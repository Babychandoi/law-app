{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { forwardRef, useId } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { Badge } from '../Badge/Badge.js';\nimport { Tooltip } from '../Tooltip/Tooltip.js';\nimport { useSidebarContext } from './SidebarContext.js';\nimport { useSidebarItemContext } from './SidebarItemContext.js';\nimport { sidebarTheme } from './theme.js';\nconst SidebarItem = forwardRef((props, ref) => {\n  const id = useId();\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme,\n    isCollapsed\n  } = useSidebarContext();\n  const {\n    isInsideCollapse\n  } = useSidebarItemContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([sidebarTheme.item, provider.theme?.sidebar?.item, rootTheme?.item, props.theme], [get(provider.clearTheme, \"sidebar.item\"), get(rootClearTheme, \"item\"), props.clearTheme], [get(provider.applyTheme, \"sidebar.item\"), get(rootApplyTheme, \"item\"), props.applyTheme]);\n  const {\n    active: isActive,\n    as: Component = \"a\",\n    children,\n    className,\n    icon: Icon,\n    label,\n    labelColor = \"info\",\n    ...restProps\n  } = resolveProps(props, provider.props?.sidebarItem);\n  return /* @__PURE__ */jsx(ListItem, {\n    theme,\n    className: theme.listItem,\n    id,\n    isCollapsed,\n    tooltipChildren: children,\n    children: /* @__PURE__ */jsxs(Component, {\n      \"aria-labelledby\": `flowbite-sidebar-item-${id}`,\n      ref,\n      className: twMerge(theme.base, isActive && theme.active, !isCollapsed && isInsideCollapse && theme.collapsed.insideCollapse, className),\n      ...restProps,\n      children: [Icon && /* @__PURE__ */jsx(Icon, {\n        \"aria-hidden\": true,\n        \"data-testid\": \"flowbite-sidebar-item-icon\",\n        className: twMerge(theme.icon.base, isActive && theme.icon.active)\n      }), isCollapsed && !Icon && /* @__PURE__ */jsx(\"span\", {\n        className: theme.collapsed.noIcon,\n        children: children.charAt(0).toLocaleUpperCase() ?? \"?\"\n      }), !isCollapsed && /* @__PURE__ */jsx(Children, {\n        id,\n        theme,\n        children\n      }), !isCollapsed && label && /* @__PURE__ */jsx(Badge, {\n        color: labelColor,\n        \"data-testid\": \"flowbite-sidebar-label\",\n        hidden: isCollapsed,\n        className: theme.label,\n        children: label\n      })]\n    })\n  });\n});\nSidebarItem.displayName = \"SidebarItem\";\nfunction ListItem({\n  id,\n  theme,\n  isCollapsed,\n  tooltipChildren,\n  children: wrapperChildren,\n  ...props\n}) {\n  return /* @__PURE__ */jsx(\"li\", {\n    ...props,\n    children: isCollapsed ? /* @__PURE__ */jsx(Tooltip, {\n      content: /* @__PURE__ */jsx(Children, {\n        id,\n        theme,\n        children: tooltipChildren\n      }),\n      placement: \"right\",\n      children: wrapperChildren\n    }) : wrapperChildren\n  });\n}\nListItem.displayName = \"SidebarItem.ListItem\";\nfunction Children({\n  id,\n  theme,\n  children\n}) {\n  return /* @__PURE__ */jsx(\"span\", {\n    \"data-testid\": \"flowbite-sidebar-item-content\",\n    id: `flowbite-sidebar-item-${id}`,\n    className: twMerge(theme.content.base),\n    children\n  });\n}\nListItem.displayName = \"SidebarItem.Children\";\nexport { SidebarItem };","map":{"version":3,"names":["SidebarItem","forwardRef","props","ref","id","useId","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","isCollapsed","useSidebarContext","isInsideCollapse","useSidebarItemContext","provider","useThemeProvider","useResolveTheme","sidebarTheme","item","sidebar","get","active","isActive","as","Component","children","className","icon","Icon","label","labelColor","restProps","resolveProps","sidebarItem","jsx","ListItem","listItem","tooltipChildren","jsxs","twMerge","base","collapsed","insideCollapse","noIcon","charAt","toLocaleUpperCase","Children","Badge","color","hidden","displayName","wrapperChildren","Tooltip","content","placement"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Sidebar\\SidebarItem.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps, ElementType, FC, PropsWithChildren, ReactNode } from \"react\";\nimport { forwardRef, useId } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { DynamicStringEnumKeysOf, FlowbiteColors, ThemingProps } from \"../../types\";\nimport { Badge } from \"../Badge\";\nimport { Tooltip } from \"../Tooltip\";\nimport { useSidebarContext } from \"./SidebarContext\";\nimport { useSidebarItemContext } from \"./SidebarItemContext\";\nimport { sidebarTheme } from \"./theme\";\n\nexport interface SidebarItemTheme {\n  active: string;\n  base: string;\n  collapsed: {\n    insideCollapse: string;\n    noIcon: string;\n  };\n  content: {\n    base: string;\n  };\n  icon: {\n    base: string;\n    active: string;\n  };\n  label: string;\n  listItem: string;\n}\n\nexport interface SidebarItemProps extends Omit<ComponentProps<\"div\">, \"ref\">, ThemingProps<SidebarItemTheme> {\n  active?: boolean;\n  as?: ElementType;\n  href?: string;\n  icon?: FC<ComponentProps<\"svg\">>;\n  label?: string;\n  labelColor?: DynamicStringEnumKeysOf<SidebarItemLabelColors>;\n}\n\nexport interface SidebarItemLabelColors extends Pick<FlowbiteColors, \"gray\"> {\n  [key: string]: string;\n}\n\nexport const SidebarItem = forwardRef<Element, SidebarItemProps>((props, ref) => {\n  const id = useId();\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme, isCollapsed } = useSidebarContext();\n  const { isInsideCollapse } = useSidebarItemContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [sidebarTheme.item, provider.theme?.sidebar?.item, rootTheme?.item, props.theme],\n    [get(provider.clearTheme, \"sidebar.item\"), get(rootClearTheme, \"item\"), props.clearTheme],\n    [get(provider.applyTheme, \"sidebar.item\"), get(rootApplyTheme, \"item\"), props.applyTheme],\n  );\n\n  const {\n    active: isActive,\n    as: Component = \"a\",\n    children,\n    className,\n    icon: Icon,\n    label,\n    labelColor = \"info\",\n    ...restProps\n  } = resolveProps(props, provider.props?.sidebarItem);\n\n  return (\n    <ListItem theme={theme} className={theme.listItem} id={id} isCollapsed={isCollapsed} tooltipChildren={children}>\n      <Component\n        aria-labelledby={`flowbite-sidebar-item-${id}`}\n        ref={ref}\n        className={twMerge(\n          theme.base,\n          isActive && theme.active,\n          !isCollapsed && isInsideCollapse && theme.collapsed.insideCollapse,\n          className,\n        )}\n        {...restProps}\n      >\n        {Icon && (\n          <Icon\n            aria-hidden\n            data-testid=\"flowbite-sidebar-item-icon\"\n            className={twMerge(theme.icon.base, isActive && theme.icon.active)}\n          />\n        )}\n        {isCollapsed && !Icon && (\n          <span className={theme.collapsed.noIcon}>{(children as string).charAt(0).toLocaleUpperCase() ?? \"?\"}</span>\n        )}\n        {!isCollapsed && (\n          <Children id={id} theme={theme}>\n            {children}\n          </Children>\n        )}\n        {!isCollapsed && label && (\n          <Badge color={labelColor} data-testid=\"flowbite-sidebar-label\" hidden={isCollapsed} className={theme.label}>\n            {label}\n          </Badge>\n        )}\n      </Component>\n    </ListItem>\n  );\n});\n\nSidebarItem.displayName = \"SidebarItem\";\n\nfunction ListItem({\n  id,\n  theme,\n  isCollapsed,\n  tooltipChildren,\n  children: wrapperChildren,\n  ...props\n}: PropsWithChildren<{\n  id: string;\n  theme: SidebarItemTheme;\n  isCollapsed: boolean;\n  tooltipChildren: ReactNode | undefined;\n  className?: string;\n}>) {\n  return (\n    <li {...props}>\n      {isCollapsed ? (\n        <Tooltip\n          content={\n            <Children id={id} theme={theme}>\n              {tooltipChildren}\n            </Children>\n          }\n          placement=\"right\"\n        >\n          {wrapperChildren}\n        </Tooltip>\n      ) : (\n        wrapperChildren\n      )}\n    </li>\n  );\n}\n\nListItem.displayName = \"SidebarItem.ListItem\";\n\nfunction Children({ id, theme, children }: PropsWithChildren<{ id: string; theme: SidebarItemTheme }>) {\n  return (\n    <span\n      data-testid=\"flowbite-sidebar-item-content\"\n      id={`flowbite-sidebar-item-${id}`}\n      className={twMerge(theme.content.base)}\n    >\n      {children}\n    </span>\n  );\n}\n\nListItem.displayName = \"SidebarItem.Children\";\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
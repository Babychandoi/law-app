{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useAccordionContext } from './AccordionPanelContext.js';\nimport { accordionTheme } from './theme.js';\nfunction AccordionContent(props) {\n  const {\n    isOpen\n  } = useAccordionContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([accordionTheme.content, provider.theme?.accordion?.content, props.theme], [get(provider.clearTheme, \"accordion.content\"), props.clearTheme], [get(provider.applyTheme, \"accordion.content\"), props.applyTheme]);\n  const {\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.accordionContent);\n  return /* @__PURE__ */jsx(\"div\", {\n    className: twMerge(theme.base, className),\n    \"data-testid\": \"flowbite-accordion-content\",\n    hidden: !isOpen,\n    ...restProps\n  });\n}\nAccordionContent.displayName = \"AccordionContent\";\nexport { AccordionContent };","map":{"version":3,"names":["AccordionContent","props","isOpen","useAccordionContext","provider","useThemeProvider","theme","useResolveTheme","accordionTheme","content","accordion","get","clearTheme","applyTheme","className","restProps","resolveProps","accordionContent","jsx","twMerge","base","hidden"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Accordion\\AccordionContent.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { useAccordionContext } from \"./AccordionPanelContext\";\nimport { accordionTheme } from \"./theme\";\n\nexport interface AccordionContentTheme {\n  base: string;\n}\n\nexport interface AccordionContentProps extends ComponentProps<\"div\">, ThemingProps<AccordionContentTheme> {}\n\nexport function AccordionContent(props: AccordionContentProps) {\n  const { isOpen } = useAccordionContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [accordionTheme.content, provider.theme?.accordion?.content, props.theme],\n    [get(provider.clearTheme, \"accordion.content\"), props.clearTheme],\n    [get(provider.applyTheme, \"accordion.content\"), props.applyTheme],\n  );\n\n  const { className, ...restProps } = resolveProps(props, provider.props?.accordionContent);\n\n  return (\n    <div\n      className={twMerge(theme.base, className)}\n      data-testid=\"flowbite-accordion-content\"\n      hidden={!isOpen}\n      {...restProps}\n    />\n  );\n}\n\nAccordionContent.displayName = \"AccordionContent\";\n"],"mappings":";;;;;;;;;;AAWA,SAAQA,gBAAaA,CAAAC,KAAA;EACnB,MAAM;IAAAC;EAAQ,IAAGC,mBAAkB;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAwB,CACzB,CAACC,cAAa,CAAAC,OAAA,EAAUL,QAAE,CAAAE,KAAA,EAAAI,SAAsB,EAAAD,OAAM,EAAAR,KAAW,CAAAK,KAAA,GACjE,CAACK,GAAG,CAACP,QAAQ,CAACQ,UAAU,EAAE,mBAAmB,CAAC,EAAEX,KAAK,CAACW,UAAU,GACjE,CAAAD,GAAA,CAAAP,QAAA,CAAAS,UAAA,wBAAAZ,KAAA,CAAAY,UAAA,CACD;EACA;IAAAC,SAAA;IAAA,GAAAC;EAA0B,IAAAC,YAAA,CAAAf,KAAA,EAAAG,QAAA,CAAAH,KAAA,EAAAgB,gBAAA;EAC5B,OAAS,eAAAC,GAAA,CACL,OACJ;IACMJ,SAAA,EAAAK,OAAe,CAAAb,KAAA,CAAAc,IAAA,EAAAN,SAAA;IACf,aAAS,EAAM;IACfO,MAAG,GAAAnB,MAAA;IACT,GAAAa;EACG,CACH;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
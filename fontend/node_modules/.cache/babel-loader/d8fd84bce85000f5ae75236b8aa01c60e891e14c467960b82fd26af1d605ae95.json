{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useDropdownContext } from './DropdownContext.js';\nimport { dropdownTheme } from './theme.js';\nconst DropdownHeader = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme\n  } = useDropdownContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([dropdownTheme.floating, provider.theme?.dropdown?.floating, rootTheme?.floating, props.theme], [get(provider.clearTheme, \"dropdown.floating\"), get(rootClearTheme, \"floating\"), props.clearTheme], [get(provider.applyTheme, \"dropdown.floating\"), get(rootApplyTheme, \"floating\"), props.applyTheme]);\n  const {\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.dropdownHeader);\n  return /* @__PURE__ */jsx(\"div\", {\n    ref,\n    className: twMerge(theme.header, className),\n    ...restProps\n  });\n});\nDropdownHeader.displayName = \"DropdownHeader\";\nexport { DropdownHeader };","map":{"version":3,"names":["DropdownHeader","forwardRef","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","useDropdownContext","provider","useThemeProvider","useResolveTheme","dropdownTheme","floating","dropdown","get","className","restProps","resolveProps","dropdownHeader","jsx","twMerge","header"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Dropdown\\DropdownHeader.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { useDropdownContext } from \"./DropdownContext\";\nimport { dropdownTheme } from \"./theme\";\n\nexport interface DropdownHeaderTheme {\n  header: string;\n}\n\nexport interface DropdownHeaderProps extends ComponentProps<\"div\">, ThemingProps<DropdownHeaderTheme> {}\n\nexport const DropdownHeader = forwardRef<HTMLDivElement, DropdownHeaderProps>((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme } = useDropdownContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [dropdownTheme.floating, provider.theme?.dropdown?.floating, rootTheme?.floating, props.theme],\n    [get(provider.clearTheme, \"dropdown.floating\"), get(rootClearTheme, \"floating\"), props.clearTheme],\n    [get(provider.applyTheme, \"dropdown.floating\"), get(rootApplyTheme, \"floating\"), props.applyTheme],\n  );\n\n  const { className, ...restProps } = resolveProps(props, provider.props?.dropdownHeader);\n\n  return <div ref={ref} className={twMerge(theme.header, className)} {...restProps} />;\n});\n\nDropdownHeader.displayName = \"DropdownHeader\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,cAAe,GAAAC,UAAW,EAAAC,KAAY,EAAAC,GAAA;EACtC,MAAM;IAAAC,KAAA,EAAQC,SAAG;IAAAC,UAAkB,EAAAC,cAAA;IAAAC,UAAA,EAAAC;EAAA,IAAAC,kBAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKR,KAAA,GAAAS,eAAwB,CACzB,CAACC,aAAa,CAAAC,QAAA,EAAUJ,QAAE,CAAAP,KAAA,EAAAY,QAAsB,EAAGD,QAAC,EAAAV,SAAgB,EAAAU,QAAW,EAAEb,KAAM,CAAAE,KAAA,GACvF,CAACa,GAAG,CAACN,QAAQ,CAACL,UAAU,EAAE,mBAAmB,CAAC,EAAEW,GAAG,CAACV,cAAc,EAAE,UAAU,CAAC,EAAEL,KAAK,CAACI,UAAU,GAClG,CAAAW,GAAA,CAAAN,QAAA,CAAAH,UAAA,wBAAAS,GAAA,CAAAR,cAAA,eAAAP,KAAA,CAAAM,UAAA,CACD;EACA;IAAAU,SAAA;IAAA,GAAAC;EAAgC,IAAIC,YAAK,CAAAlB,KAAW,EAAAS,QAAQ,CAAKT,KAAC,EAAMmB,cAAc;EACvF,sBAAAC,GAAA;IAAAnB,GAAA;IAAAe,SAAA,EAAAK,OAAA,CAAAnB,KAAA,CAAAoB,MAAA,EAAAN,SAAA;IAAA,GAAAC;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { textareaTheme } from './theme.js';\nconst Textarea = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([textareaTheme, provider.theme?.textarea, props.theme], [get(provider.clearTheme, \"textarea\"), props.clearTheme], [get(provider.applyTheme, \"textarea\"), props.applyTheme]);\n  const {\n    className,\n    color = \"gray\",\n    shadow,\n    ...restProps\n  } = resolveProps(props, provider.props?.textarea);\n  return /* @__PURE__ */jsx(\"textarea\", {\n    ref,\n    className: twMerge(theme.base, theme.colors[color], theme.withShadow[shadow ? \"on\" : \"off\"], className),\n    ...restProps\n  });\n});\nTextarea.displayName = \"Textarea\";\nexport { Textarea };","map":{"version":3,"names":["Textarea","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","textareaTheme","textarea","get","clearTheme","applyTheme","className","color","shadow","restProps","resolveProps","jsx","twMerge","base","colors","withShadow"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Textarea\\Textarea.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps } from \"react\";\nimport { forwardRef } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { DynamicStringEnumKeysOf, FlowbiteBoolean, FlowbiteColors, ThemingProps } from \"../../types\";\nimport { textareaTheme } from \"./theme\";\n\nexport interface TextareaTheme {\n  base: string;\n  colors: TextareaColors;\n  withShadow: FlowbiteBoolean;\n}\n\nexport interface TextareaColors extends Pick<FlowbiteColors, \"gray\" | \"info\" | \"failure\" | \"warning\" | \"success\"> {\n  [key: string]: string;\n}\n\nexport interface TextareaProps extends Omit<ComponentProps<\"textarea\">, \"color\" | \"ref\">, ThemingProps<TextareaTheme> {\n  color?: DynamicStringEnumKeysOf<TextareaColors>;\n  shadow?: boolean;\n}\n\nexport const Textarea = forwardRef<HTMLTextAreaElement, TextareaProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [textareaTheme, provider.theme?.textarea, props.theme],\n    [get(provider.clearTheme, \"textarea\"), props.clearTheme],\n    [get(provider.applyTheme, \"textarea\"), props.applyTheme],\n  );\n\n  const { className, color = \"gray\", shadow, ...restProps } = resolveProps(props, provider.props?.textarea);\n\n  return (\n    <textarea\n      ref={ref}\n      className={twMerge(theme.base, theme.colors[color], theme.withShadow[shadow ? \"on\" : \"off\"], className)}\n      {...restProps}\n    />\n  );\n});\n\nTextarea.displayName = \"Textarea\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,QAAM,GAAQC,UAAG,EAAAC,KAAA,EAAgBC,GAAE;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAwB,CACzB,CAACC,aAAa,EAAAJ,QAAU,CAAAE,KAAE,EAAAG,QAAa,EAAAP,KAAM,CAAAI,KAAA,GAC7C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,UAAU,CAAC,EAAET,KAAK,CAACS,UAAU,GACxD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,eAAAV,KAAA,CAAAU,UAAA,CACD;EACA;IAAAC,SAAA;IAAAC,KAAuB,GAAG;IAAAC,MAAA;IAAA,GAAAC;EAAA,IAAAC,YAAA,CAAAf,KAAA,EAAAE,QAAA,CAAAF,KAAA,EAAAO,QAAA;EAC5B,OAAI,eAAUS,GAAA,CACV,YACJ;IACMf,GAAA;IACAU,SAAG,EAAAM,OAAA,CAAAb,KAAA,CAAAc,IAAA,EAAAd,KAAA,CAAAe,MAAA,CAAAP,KAAA,GAAAR,KAAA,CAAAgB,UAAA,CAAAP,MAAA,kBAAAF,SAAA;IACT,GAAAG;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
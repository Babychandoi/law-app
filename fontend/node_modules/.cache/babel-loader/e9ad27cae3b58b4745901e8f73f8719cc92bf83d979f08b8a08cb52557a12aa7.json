{"ast":null,"code":"'use client';\n\nimport { forwardRef, createElement } from 'react';\nconst ButtonBase = forwardRef(({\n  children,\n  as: Component,\n  href,\n  type = \"button\",\n  ...props\n}, ref) => {\n  const BaseComponent = Component || (href ? \"a\" : \"button\");\n  return createElement(BaseComponent, {\n    ref,\n    href,\n    type,\n    ...props\n  }, children);\n});\nButtonBase.displayName = \"ButtonBase\";\nexport { ButtonBase };","map":{"version":3,"names":["ButtonBase","forwardRef","children","as","Component","href","type","props","ref","BaseComponent","createElement"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Button\\ButtonBase.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentPropsWithoutRef, ElementType, ForwardedRef } from \"react\";\nimport { createElement, forwardRef } from \"react\";\n\nexport type ButtonBaseProps<T extends ElementType = \"button\"> = {\n  as?: T;\n  href?: string;\n} & ComponentPropsWithoutRef<T>;\n\nexport const ButtonBase = forwardRef(\n  <T extends ElementType = \"button\">(\n    { children, as: Component, href, type = \"button\", ...props }: ButtonBaseProps<T>,\n    ref: ForwardedRef<T>,\n  ) => {\n    const BaseComponent = Component || (href ? \"a\" : \"button\");\n\n    return createElement(BaseComponent, { ref, href, type, ...props }, children);\n  },\n);\n\nButtonBase.displayName = \"ButtonBase\";\n"],"mappings":";;;AAIA,MAAKA,UAAU,GAAIC,UAAS,CAC5B;EAAIC,QAAM;EAAAC,EAAA,EAAAC,SAAgB;EAAAC,IAAA;EAASC,IAAK,WAAU;EAAG,GAAAC;AAAS,GAAAC,GAAA;EAC1D,MAAAC,aAAO,GAAcL,SAAA,KAAeC,IAAE,GAAK,MAAM,QAAM,CAAG;EAC9D,OAAAK,aAAA,CAAAD,aAAA;IAAAD,GAAA;IAAAH,IAAA;IAAAC,IAAA;IAAA,GAAAC;EAAA,GAAAL,QAAA;AACA,CACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useState } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { toastTheme } from './theme.js';\nimport { ToastContext } from './ToastContext.js';\nconst durationClasses = {\n  75: \"duration-75\",\n  100: \"duration-100\",\n  150: \"duration-150\",\n  200: \"duration-200\",\n  300: \"duration-300\",\n  500: \"duration-500\",\n  700: \"duration-700\",\n  1e3: \"duration-1000\"\n};\nconst Toast = forwardRef((props, ref) => {\n  const [isClosed, setIsClosed] = useState(false);\n  const [isRemoved, setIsRemoved] = useState(false);\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([toastTheme, provider.theme?.toast, props.theme], [get(provider.clearTheme, \"toast\"), props.clearTheme], [get(provider.applyTheme, \"toast\"), props.applyTheme]);\n  const {\n    className,\n    duration = 300,\n    ...restProps\n  } = resolveProps(props, provider.props?.toast);\n  if (isRemoved) {\n    return null;\n  }\n  return /* @__PURE__ */jsx(ToastContext.Provider, {\n    value: {\n      theme: props.theme,\n      clearTheme: props.clearTheme,\n      applyTheme: props.applyTheme,\n      duration,\n      isClosed,\n      isRemoved,\n      setIsClosed,\n      setIsRemoved\n    },\n    children: /* @__PURE__ */jsx(\"div\", {\n      ref,\n      \"data-testid\": \"flowbite-toast\",\n      role: \"alert\",\n      className: twMerge(theme.root.base, durationClasses[duration], isClosed && theme.root.closed, className),\n      ...restProps\n    })\n  });\n});\nToast.displayName = \"Toast\";\nexport { Toast };","map":{"version":3,"names":["durationClasses","Toast","forwardRef","props","ref","isClosed","setIsClosed","useState","isRemoved","setIsRemoved","provider","useThemeProvider","theme","useResolveTheme","toastTheme","toast","get","clearTheme","applyTheme","className","duration","restProps","resolveProps","jsx","ToastContext","Provider","value","children","role","twMerge","root","base","closed"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Toast\\Toast.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps } from \"react\";\nimport { forwardRef, useState } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { toastTheme } from \"./theme\";\nimport { ToastContext } from \"./ToastContext\";\n\nexport interface ToastTheme {\n  root: {\n    base: string;\n    closed: string;\n  };\n  toggle: {\n    base: string;\n    icon: string;\n  };\n}\n\nexport type ToastDuration = 75 | 100 | 150 | 200 | 300 | 500 | 700 | 1000;\n\nexport interface ToastProps extends ComponentProps<\"div\">, ThemingProps<ToastTheme> {\n  duration?: ToastDuration;\n}\n\nconst durationClasses: Record<ToastDuration, string> = {\n  75: \"duration-75\",\n  100: \"duration-100\",\n  150: \"duration-150\",\n  200: \"duration-200\",\n  300: \"duration-300\",\n  500: \"duration-500\",\n  700: \"duration-700\",\n  1000: \"duration-1000\",\n};\n\nexport const Toast = forwardRef<HTMLDivElement, ToastProps>((props, ref) => {\n  const [isClosed, setIsClosed] = useState(false);\n  const [isRemoved, setIsRemoved] = useState(false);\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [toastTheme, provider.theme?.toast, props.theme],\n    [get(provider.clearTheme, \"toast\"), props.clearTheme],\n    [get(provider.applyTheme, \"toast\"), props.applyTheme],\n  );\n\n  const { className, duration = 300, ...restProps } = resolveProps(props, provider.props?.toast);\n\n  if (isRemoved) {\n    return null;\n  }\n\n  return (\n    <ToastContext.Provider\n      value={{\n        theme: props.theme,\n        clearTheme: props.clearTheme,\n        applyTheme: props.applyTheme,\n        duration,\n        isClosed,\n        isRemoved,\n        setIsClosed,\n        setIsRemoved,\n      }}\n    >\n      <div\n        ref={ref}\n        data-testid=\"flowbite-toast\"\n        role=\"alert\"\n        className={twMerge(theme.root.base, durationClasses[duration], isClosed && theme.root.closed, className)}\n        {...restProps}\n      />\n    </ToastContext.Provider>\n  );\n});\n\nToast.displayName = \"Toast\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAMA,eAAa;EACjB,IAAG,aAAE;EACL,GAAG,EAAE,cAAc;EACnB,GAAG,EAAE,cAAc;EACnB,GAAG,EAAE,cAAc;EACnB,GAAG,EAAE,cAAc;EACnB,GAAG,EAAE,cAAc;EACnB,GAAG,EAAE;EACN;AACW;AACZ,MAAEC,KAAO,GAAAC,UAAU,EAAAC,KAAY,EAAAC,GAAG;EAChC,MAAM,CAACC,QAAA,EAASC,WAAE,IAAaC,QAAG,MAAS;EAC3C,MAAM,CAAAC,SAAQ,EAAGC,YAAA,IAAgBF,QAAE;EACnC,MAAMG,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAUC,eAAgB,CAC3B,CAACC,UAAI,EAAQJ,QAAC,CAAAE,KAAY,EAAAG,KAAQ,EAAEZ,KAAK,CAACS,KAAA,GAC1C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,OAAO,CAAC,EAAEd,KAAK,CAACc,UAAU,GACrD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,YAAAf,KAAA,CAAAe,UAAA,CACD;EACA,MAAI;IAAAC,SAAW;IAAAC,QAAA;IAAA,GAAAC;EAAA,IAAAC,YAAA,CAAAnB,KAAA,EAAAO,QAAA,CAAAP,KAAA,EAAAY,KAAA;EACjB,IAAIP,SAAW;IACf;EACE;EACF,OAAI,eAAqBe,GAAA,CACrBC,YAAA,CAAAC,QAAA,EACJ;IACAC,KAAQ,EAAK;MACLd,KAAA,EAAAT,KAAY,CAAAS,KAAM;MAClBK,UAAU,EAAEd,KAAK,CAACc,UAAU;MAC5BC,UAAQ,EAAAf,KAAA,CAAAe,UAAA;MACRE,QAAQ;MACRf,QAAA;MACAG,SAAA;MACAF,WAAA;MACDG;IACD;IACNkB,QAAa,iBAAAJ,GAAA,CACL,OACR;MACUnB,GAAA;MACA,aAAa;MACbwB,IAAA,SAAW;MACXT,SAAG,EAAAU,OAAA,CAAAjB,KAAA,CAAAkB,IAAA,CAAAC,IAAA,EAAA/B,eAAA,CAAAoB,QAAA,GAAAf,QAAA,IAAAO,KAAA,CAAAkB,IAAA,CAAAE,MAAA,EAAAb,SAAA;MACb,GAAAE;IACA,CACA;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
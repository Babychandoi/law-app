{"ast":null,"code":"const store = {\n  dark: void 0,\n  mode: void 0,\n  prefix: void 0\n};\nfunction setStore(data) {\n  if (\"dark\" in data) {\n    store.dark = data.dark;\n  }\n  if (\"mode\" in data) {\n    if ([\"light\", \"dark\", \"auto\"].includes(data.mode)) {\n      store.mode = data.mode;\n    } else {\n      console.warn(`Invalid mode value: ${data.mode}.\nAvailable values: light, dark, auto`);\n    }\n  }\n  if (\"prefix\" in data) {\n    store.prefix = data.prefix;\n  }\n}\nfunction getDark() {\n  return store.dark;\n}\nfunction getMode() {\n  return store.mode;\n}\nfunction getPrefix() {\n  return store.prefix;\n}\nexport { getDark, getMode, getPrefix, setStore };","map":{"version":3,"names":["store","dark","mode","prefix","setStore","data","includes","console","warn","getDark","getMode","getPrefix"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\store\\index.ts"],"sourcesContent":["import type { ThemeMode } from \"../hooks/use-theme-mode\";\nimport type { DeepPartial } from \"../types\";\n\nexport type StoreProps = DeepPartial<{\n  /**\n   * Whether to generate dark mode styles\n   *\n   * @default true\n   */\n  dark: boolean;\n  /**\n   * Theme mode\n   *\n   * Can be `\"light\"`, `\"dark\"`, or `\"auto\"`\n   *\n   * @default \"auto\"\n   */\n  mode: ThemeMode;\n  /**\n   * Prefix to apply to base class list\n   *\n   * @default undefined\n   */\n  prefix: string;\n}>;\n\nconst store: StoreProps = {\n  dark: undefined,\n  mode: undefined,\n  prefix: undefined,\n};\n\nexport function setStore(data: StoreProps) {\n  if (\"dark\" in data) {\n    store.dark = data.dark;\n  }\n  if (\"mode\" in data) {\n    if ([\"light\", \"dark\", \"auto\"].includes(data.mode!)) {\n      store.mode = data.mode;\n    } else {\n      console.warn(`Invalid mode value: ${data.mode}.\\nAvailable values: light, dark, auto`);\n    }\n  }\n  if (\"prefix\" in data) {\n    store.prefix = data.prefix;\n  }\n}\n\nexport function getDark(): StoreProps[\"dark\"] {\n  return store.dark;\n}\n\nexport function getMode(): StoreProps[\"mode\"] {\n  return store.mode;\n}\n\nexport function getPrefix(): StoreProps[\"prefix\"] {\n  return store.prefix;\n}\n"],"mappings":"AACA,MAAMA,KAAK,GAAG;EACZC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,MAAM;EACZC,MAAM,EAAE;AACV,CAAC;AACM,SAASC,QAAQA,CAACC,IAAI,EAAE;EAC7B,IAAI,MAAM,IAAIA,IAAI,EAAE;IAClBL,KAAK,CAACC,IAAI,GAAGI,IAAI,CAACJ,IAAI;EAC1B;EACE,IAAI,MAAM,IAAII,IAAI,EAAE;IAClB,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACD,IAAI,CAACH,IAAI,CAAC,EAAE;MACjDF,KAAK,CAACE,IAAI,GAAGG,IAAI,CAACH,IAAI;IAC5B,CAAK,MAAM;MACLK,OAAO,CAACC,IAAI,CAAC,uBAAuBH,IAAI,CAACH,IAAI;AACnD,oCAAoC,CAAC;IACrC;EACA;EACE,IAAI,QAAQ,IAAIG,IAAI,EAAE;IACpBL,KAAK,CAACG,MAAM,GAAGE,IAAI,CAACF,MAAM;EAC9B;AACA;AACO,SAASM,OAAOA,CAAA,EAAG;EACxB,OAAOT,KAAK,CAACC,IAAI;AACnB;AACO,SAASS,OAAOA,CAAA,EAAG;EACxB,OAAOV,KAAK,CAACE,IAAI;AACnB;AACO,SAASS,SAASA,CAAA,EAAG;EAC1B,OAAOX,KAAK,CAACG,MAAM;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
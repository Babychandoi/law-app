{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useSidebarContext } from './SidebarContext.js';\nimport { sidebarTheme } from './theme.js';\nconst SidebarCTA = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme,\n    isCollapsed\n  } = useSidebarContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([sidebarTheme.cta, provider.theme?.sidebar?.cta, rootTheme?.cta, props.theme], [get(provider.clearTheme, \"sidebar.cta\"), get(rootClearTheme, \"cta\"), props.clearTheme], [get(provider.applyTheme, \"sidebar.cta\"), get(rootApplyTheme, \"cta\"), props.applyTheme]);\n  const {\n    color = \"info\",\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.sidebarCTA);\n  return /* @__PURE__ */jsx(\"div\", {\n    ref,\n    \"data-testid\": \"sidebar-cta\",\n    hidden: isCollapsed,\n    className: twMerge(theme.base, theme.color[color], className),\n    ...restProps\n  });\n});\nSidebarCTA.displayName = \"SidebarCTA\";\nexport { SidebarCTA };","map":{"version":3,"names":["SidebarCTA","forwardRef","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","isCollapsed","useSidebarContext","provider","useThemeProvider","useResolveTheme","sidebarTheme","cta","sidebar","get","color","className","restProps","resolveProps","sidebarCTA","jsx","hidden","twMerge","base"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Sidebar\\SidebarCTA.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { DynamicStringEnumKeysOf, FlowbiteColors, ThemingProps } from \"../../types\";\nimport { useSidebarContext } from \"./SidebarContext\";\nimport { sidebarTheme } from \"./theme\";\n\nexport interface SidebarCTATheme {\n  base: string;\n  color: SidebarCTAColors;\n}\n\nexport interface SidebarCTAProps extends Omit<ComponentProps<\"div\">, \"color\">, ThemingProps<SidebarCTATheme> {\n  color?: DynamicStringEnumKeysOf<SidebarCTAColors>;\n}\n\nexport interface SidebarCTAColors\n  extends Pick<\n    FlowbiteColors,\n    \"blue\" | \"dark\" | \"failure\" | \"gray\" | \"green\" | \"light\" | \"purple\" | \"red\" | \"success\" | \"warning\" | \"yellow\"\n  > {\n  [key: string]: string;\n}\n\nexport const SidebarCTA = forwardRef<HTMLDivElement, SidebarCTAProps>((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme, isCollapsed } = useSidebarContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [sidebarTheme.cta, provider.theme?.sidebar?.cta, rootTheme?.cta, props.theme],\n    [get(provider.clearTheme, \"sidebar.cta\"), get(rootClearTheme, \"cta\"), props.clearTheme],\n    [get(provider.applyTheme, \"sidebar.cta\"), get(rootApplyTheme, \"cta\"), props.applyTheme],\n  );\n\n  const { color = \"info\", className, ...restProps } = resolveProps(props, provider.props?.sidebarCTA);\n\n  return (\n    <div\n      ref={ref}\n      data-testid=\"sidebar-cta\"\n      hidden={isCollapsed}\n      className={twMerge(theme.base, theme.color[color], className)}\n      {...restProps}\n    />\n  );\n});\n\nSidebarCTA.displayName = \"SidebarCTA\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,UAAa,GAAEC,UAAW,EAAAC,KAAA,EAAUC,GAAE;EACtC,MAAM;IAAAC,KAAA,EAAQC,SAAG;IAAAC,UAAkB,EAAAC,cAAA;IAAAC,UAAA,EAAAC,cAAA;IAAAC;EAAA,IAAAC,iBAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKT,KAAA,GAAAU,eAA0B,CAC3B,CAACC,YAAY,CAACC,GAAA,EAAAJ,QAAY,CAAAR,KAAA,EAAAa,OAAgB,EAAAD,GAAI,EAAAX,SAAA,EAAcW,GAAE,EAAAd,KAAQ,CAAAE,KAAM,GAC5E,CAACc,GAAG,CAACN,QAAQ,CAACN,UAAU,EAAE,aAAa,CAAC,EAAEY,GAAG,CAACX,cAAc,EAAE,KAAK,CAAC,EAAEL,KAAK,CAACI,UAAU,GACvF,CAAAY,GAAA,CAAAN,QAAA,CAAAJ,UAAA,kBAAAU,GAAA,CAAAT,cAAA,UAAAP,KAAA,CAAAM,UAAA,CACD;EACA;IAAAW,KAAA;IAAuBC,SAAG;IAAA,GAAAC;EAAA,IAAAC,YAAA,CAAApB,KAAA,EAAAU,QAAA,CAAAV,KAAA,EAAAqB,UAAA;EAC5B,OAAS,eAAAC,GAAA,CACL,OACJ;IACMrB,GAAA;IACA,aAAQ,eAAW;IACnBsB,MAAA,EAAAf,WAAmB;IACnBU,SAAG,EAAAM,OAAA,CAAAtB,KAAA,CAAAuB,IAAA,EAAAvB,KAAA,CAAAe,KAAA,CAAAA,KAAA,GAAAC,SAAA;IACT,GAAAC;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useNavbarContext } from './NavbarContext.js';\nimport { navbarTheme } from './theme.js';\nconst NavbarCollapse = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme,\n    isOpen\n  } = useNavbarContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([navbarTheme.collapse, provider.theme?.navbar?.collapse, rootTheme?.collapse, props.theme], [get(provider.clearTheme, \"navbar.collapse\"), get(rootClearTheme, \"collapse\"), props.clearTheme], [get(provider.applyTheme, \"navbar.collapse\"), get(rootApplyTheme, \"collapse\"), props.applyTheme]);\n  const {\n    children,\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.navbarCollapse);\n  return /* @__PURE__ */jsx(\"div\", {\n    ref,\n    \"data-testid\": \"flowbite-navbar-collapse\",\n    className: twMerge(theme.base, theme.hidden[!isOpen ? \"on\" : \"off\"], className),\n    ...restProps,\n    children: /* @__PURE__ */jsx(\"ul\", {\n      className: theme.list,\n      children\n    })\n  });\n});\nNavbarCollapse.displayName = \"NavbarCollapse\";\nexport { NavbarCollapse };","map":{"version":3,"names":["NavbarCollapse","forwardRef","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","isOpen","useNavbarContext","provider","useThemeProvider","useResolveTheme","navbarTheme","collapse","navbar","get","children","className","restProps","resolveProps","navbarCollapse","jsx","twMerge","base","hidden","list"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Navbar\\NavbarCollapse.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { FlowbiteBoolean, ThemingProps } from \"../../types\";\nimport { useNavbarContext } from \"./NavbarContext\";\nimport { navbarTheme } from \"./theme\";\n\nexport interface NavbarCollapseTheme {\n  base: string;\n  list: string;\n  hidden: FlowbiteBoolean;\n}\n\nexport interface NavbarCollapseProps extends ComponentProps<\"div\">, ThemingProps<NavbarCollapseTheme> {}\n\nexport const NavbarCollapse = forwardRef<HTMLDivElement, NavbarCollapseProps>((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme, isOpen } = useNavbarContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [navbarTheme.collapse, provider.theme?.navbar?.collapse, rootTheme?.collapse, props.theme],\n    [get(provider.clearTheme, \"navbar.collapse\"), get(rootClearTheme, \"collapse\"), props.clearTheme],\n    [get(provider.applyTheme, \"navbar.collapse\"), get(rootApplyTheme, \"collapse\"), props.applyTheme],\n  );\n\n  const { children, className, ...restProps } = resolveProps(props, provider.props?.navbarCollapse);\n\n  return (\n    <div\n      ref={ref}\n      data-testid=\"flowbite-navbar-collapse\"\n      className={twMerge(theme.base, theme.hidden[!isOpen ? \"on\" : \"off\"], className)}\n      {...restProps}\n    >\n      <ul className={theme.list}>{children}</ul>\n    </div>\n  );\n});\n\nNavbarCollapse.displayName = \"NavbarCollapse\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,cAAe,GAAAC,UAAW,EAAAC,KAAY,EAAAC,GAAA;EACtC,MAAM;IAAAC,KAAA,EAAQC,SAAG;IAAAC,UAAkB,EAAAC,cAAA;IAAAC,UAAA,EAAAC,cAAA;IAAAC;EAAA,IAAAC,gBAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKT,KAAA,GAAWU,eAAW,CACvB,CAACC,WAAI,CAAQC,QAAC,EAAAJ,QAAY,CAAAR,KAAA,EAAAa,MAAkB,EAAED,QAAI,EAAAX,SAAgB,EAAAW,QAAU,EAACd,KAAE,CAAKE,KAAC,GACrF,CAACc,GAAG,CAACN,QAAQ,CAACN,UAAU,EAAE,iBAAiB,CAAC,EAAEY,GAAG,CAACX,cAAc,EAAE,UAAU,CAAC,EAAEL,KAAK,CAACI,UAAU,GAChG,CAAAY,GAAA,CAAAN,QAAA,CAAAJ,UAAA,sBAAAU,GAAA,CAAAT,cAAA,eAAAP,KAAA,CAAAM,UAAA,CACD;EACA;IAAAW,QAAA;IAAAC,SAA0B;IAAA,GAAAC;EAAA,IAAAC,YAAA,CAAApB,KAAA,EAAAU,QAAA,CAAAV,KAAA,EAAAqB,cAAA;EAC5B,OAAS,eAAAC,GAAA,CACL,OACJ;IACMrB,GAAA;IACA,aAAW,4BAA0B;IACrCiB,SAAG,EAAAK,OAAS,CAAArB,KAAA,CAAAsB,IAAA,EAAAtB,KAAA,CAAAuB,MAAA,EAAAjB,MAAA,kBAAAU,SAAA;IACZ,GAAAC,SAAQ;IACdF,QAAA,iBAAAK,GAAA;MAAAJ,SAAA,EAAAhB,KAAA,CAAAwB,IAAA;MAAAT;IAAA;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
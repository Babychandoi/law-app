{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { SidebarContext } from './SidebarContext.js';\nimport { sidebarTheme } from './theme.js';\nconst Sidebar = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([sidebarTheme, provider.theme?.sidebar, props.theme], [get(provider.clearTheme, \"sidebar\"), props.clearTheme], [get(provider.applyTheme, \"sidebar\"), props.applyTheme]);\n  const {\n    as: Component = \"nav\",\n    children,\n    className,\n    collapseBehavior = \"collapse\",\n    collapsed: isCollapsed = false,\n    ...restProps\n  } = resolveProps(props, provider.props?.sidebar);\n  return /* @__PURE__ */jsx(SidebarContext.Provider, {\n    value: {\n      theme: props.theme,\n      clearTheme: props.clearTheme,\n      applyTheme: props.applyTheme,\n      isCollapsed\n    },\n    children: /* @__PURE__ */jsx(Component, {\n      ref,\n      \"aria-label\": \"Sidebar\",\n      hidden: isCollapsed && collapseBehavior === \"hide\",\n      className: twMerge(theme.root.base, theme.root.collapsed[isCollapsed ? \"on\" : \"off\"], className),\n      ...restProps,\n      children: /* @__PURE__ */jsx(\"div\", {\n        className: theme.root.inner,\n        children\n      })\n    })\n  });\n});\nSidebar.displayName = \"Sidebar\";\nexport { Sidebar };","map":{"version":3,"names":["Sidebar","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","sidebarTheme","sidebar","get","clearTheme","applyTheme","as","Component","children","className","collapseBehavior","collapsed","isCollapsed","restProps","resolveProps","jsx","SidebarContext","Provider","value","hidden","twMerge","root","base","inner"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Sidebar\\Sidebar.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps, type ElementType } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { FlowbiteBoolean, ThemingProps } from \"../../types\";\nimport type { SidebarCollapseTheme } from \"./SidebarCollapse\";\nimport { SidebarContext } from \"./SidebarContext\";\nimport type { SidebarCTATheme } from \"./SidebarCTA\";\nimport type { SidebarItemTheme } from \"./SidebarItem\";\nimport type { SidebarItemGroupTheme } from \"./SidebarItemGroup\";\nimport type { SidebarItemsTheme } from \"./SidebarItems\";\nimport type { SidebarLogoTheme } from \"./SidebarLogo\";\nimport { sidebarTheme } from \"./theme\";\n\nexport interface SidebarTheme {\n  root: {\n    base: string;\n    collapsed: FlowbiteBoolean;\n    inner: string;\n  };\n  collapse: SidebarCollapseTheme;\n  cta: SidebarCTATheme;\n  item: SidebarItemTheme;\n  items: SidebarItemsTheme;\n  itemGroup: SidebarItemGroupTheme;\n  logo: SidebarLogoTheme;\n}\n\nexport interface SidebarProps extends ComponentProps<\"div\">, ThemingProps<SidebarTheme> {\n  as?: ElementType;\n  collapseBehavior?: \"collapse\" | \"hide\";\n  collapsed?: boolean;\n}\n\nexport const Sidebar = forwardRef<HTMLElement, SidebarProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [sidebarTheme, provider.theme?.sidebar, props.theme],\n    [get(provider.clearTheme, \"sidebar\"), props.clearTheme],\n    [get(provider.applyTheme, \"sidebar\"), props.applyTheme],\n  );\n\n  const {\n    as: Component = \"nav\",\n    children,\n    className,\n    collapseBehavior = \"collapse\",\n    collapsed: isCollapsed = false,\n    ...restProps\n  } = resolveProps(props, provider.props?.sidebar);\n\n  return (\n    <SidebarContext.Provider\n      value={{ theme: props.theme, clearTheme: props.clearTheme, applyTheme: props.applyTheme, isCollapsed }}\n    >\n      <Component\n        ref={ref}\n        aria-label=\"Sidebar\"\n        hidden={isCollapsed && collapseBehavior === \"hide\"}\n        className={twMerge(theme.root.base, theme.root.collapsed[isCollapsed ? \"on\" : \"off\"], className)}\n        {...restProps}\n      >\n        <div className={theme.root.inner}>{children}</div>\n      </Component>\n    </SidebarContext.Provider>\n  );\n});\n\nSidebar.displayName = \"Sidebar\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,OAAM,GAAQC,UAAG,EAAAC,KAAA,EAAgBC,GAAE;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAuB,CACxB,CAACC,YAAY,EAACJ,QAAA,CAAUE,KAAE,EAAAG,OAAY,EAAAP,KAAM,CAAAI,KAAA,GAC5C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,SAAS,CAAC,EAAET,KAAK,CAACS,UAAU,GACvD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,cAAAV,KAAA,CAAAU,UAAA,CACD;EACF,MAAQ;IACJC,EAAA,EAAAC,SAAQ;IACRC,QAAA;IACAC,SAAA;IACAC,gBAAW,aAAc;IACzBC,SAAG,EAAAC,WAAA;IACJ,GAAGC;EACJ,IAAAC,YAAA,CAAAnB,KAAA,EAAuBE,QAAG,CAAAF,KAAA,EAAAO,OAAA;EAC5B,OAAI,eAAea,GAAQ,CACvBC,cAAA,CAAAC,QAAA,EACJ;IACMC,KAAA;MAAQnB,KAAA,EAAAJ,KAAA,CAAAI,KAAkB;MAAGK,UAAA,EAAAT,KAAA,CAAAS,UAAA;MAAAC,UAAA,EAAAV,KAAA,CAAAU,UAAA;MAAAO;IAAA;IACnCJ,QAAQ,iBAASO,GAAA,CACTR,SAAA,EACR;MACUX,GAAA;MACA,YAAQ,WAAe;MACvBuB,MAAA,EAAAP,WAAmB,IAAAF,gBAAiB,KAAM,MAAK;MAC/CD,SAAG,EAAAW,OAAS,CAAArB,KAAA,CAAAsB,IAAA,CAAAC,IAAA,EAAAvB,KAAA,CAAAsB,IAAA,CAAAV,SAAA,CAAAC,WAAA,kBAAAH,SAAA;MACZ,GAAAI,SAAQ;MAClBL,QAAA,iBAAAO,GAAA;QAAAN,SAAA,EAAAV,KAAA,CAAAsB,IAAA,CAAAE,KAAA;QAAAf;MAAA;IACA,CACA;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { labelTheme } from './theme.js';\nconst Label = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([labelTheme, provider.theme?.label, props.theme], [get(provider.clearTheme, \"label\"), props.clearTheme], [get(provider.applyTheme, \"label\"), props.applyTheme]);\n  const {\n    className,\n    color = \"default\",\n    disabled = false,\n    ...restProps\n  } = resolveProps(props, provider.props?.label);\n  return /* @__PURE__ */jsx(\"label\", {\n    ref,\n    className: twMerge(theme.root.base, theme.root.colors[color], disabled && theme.root.disabled, className),\n    \"data-testid\": \"flowbite-label\",\n    ...restProps\n  });\n});\nLabel.displayName = \"Label\";\nexport { Label };","map":{"version":3,"names":["Label","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","labelTheme","label","get","clearTheme","applyTheme","className","color","disabled","restProps","resolveProps","jsx","twMerge","root","base","colors"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Label\\Label.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { DynamicStringEnumKeysOf, FlowbiteStateColors, ThemingProps } from \"../../types\";\nimport { labelTheme } from \"./theme\";\n\nexport interface LabelTheme {\n  root: LabelRootTheme;\n}\n\nexport interface LabelRootTheme {\n  base: string;\n  colors: LabelColors;\n  disabled: string;\n}\n\nexport interface LabelColors extends FlowbiteStateColors {\n  [key: string]: string;\n  default: string;\n}\n\nexport interface LabelProps extends Omit<ComponentProps<\"label\">, \"color\">, ThemingProps<LabelTheme> {\n  color?: DynamicStringEnumKeysOf<LabelColors>;\n  disabled?: boolean;\n}\n\nexport const Label = forwardRef<HTMLLabelElement, LabelProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [labelTheme, provider.theme?.label, props.theme],\n    [get(provider.clearTheme, \"label\"), props.clearTheme],\n    [get(provider.applyTheme, \"label\"), props.applyTheme],\n  );\n\n  const { className, color = \"default\", disabled = false, ...restProps } = resolveProps(props, provider.props?.label);\n\n  return (\n    <label\n      ref={ref}\n      className={twMerge(theme.root.base, theme.root.colors[color], disabled && theme.root.disabled, className)}\n      data-testid=\"flowbite-label\"\n      {...restProps}\n    />\n  );\n});\n\nLabel.displayName = \"Label\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,KAAM,GAAAC,UAAW,EAAAC,KAAA,EAAAC,GAAgB,KAAE;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAUC,eAAgB,CAC3B,CAACC,UAAI,EAAQJ,QAAC,CAAAE,KAAY,EAAAG,KAAQ,EAAEP,KAAK,CAACI,KAAA,GAC1C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,OAAO,CAAC,EAAET,KAAK,CAACS,UAAU,GACrD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,YAAAV,KAAA,CAAAU,UAAA,CACD;EACA;IAAAC,SAAA;IAAAC,KAAuB,GAAG;IAAAC,QAAA;IAAA,GAAAC;EAAA,IAAAC,YAAA,CAAAf,KAAA,EAAAE,QAAA,CAAAF,KAAA,EAAAO,KAAA;EAC5B,OAAI,eAAOS,GAAA,CACP,SACJ;IACMf,GAAA;IACAU,SAAA,EAAAM,OAAe,CAAAb,KAAA,CAAAc,IAAA,CAAAC,IAAgB,EAAAf,KAAA,CAAAc,IAAA,CAAAE,MAAA,CAAAR,KAAA,GAAAC,QAAA,IAAAT,KAAA,CAAAc,IAAA,CAAAL,QAAA,EAAAF,SAAA;IAC/B,aAAG;IACT,GAAAG;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
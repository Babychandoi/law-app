{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { forwardRef, useId, useState, useEffect } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { ChevronDownIcon } from '../../icons/chevron-down-icon.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { Tooltip } from '../Tooltip/Tooltip.js';\nimport { useSidebarContext } from './SidebarContext.js';\nimport { SidebarItemContext } from './SidebarItemContext.js';\nimport { sidebarTheme } from './theme.js';\nconst SidebarCollapse = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme,\n    isCollapsed\n  } = useSidebarContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([sidebarTheme.collapse, provider.theme?.sidebar?.collapse, rootTheme?.collapse, props.theme], [get(provider.clearTheme, \"sidebar.collapse\"), get(rootClearTheme, \"collapse\"), props.clearTheme], [get(provider.applyTheme, \"sidebar.collapse\"), get(rootApplyTheme, \"collapse\"), props.applyTheme]);\n  const {\n    children,\n    className,\n    icon: Icon,\n    label,\n    chevronIcon: ChevronIcon = ChevronDownIcon,\n    renderChevronIcon,\n    open = false,\n    ...restProps\n  } = resolveProps(props, provider.props?.sidebarCollapse);\n  const id = useId();\n  const [isOpen, setOpen] = useState(open);\n  useEffect(() => setOpen(open), [open]);\n  function Wrapper({\n    children: children2\n  }) {\n    if (isCollapsed && !isOpen) {\n      return /* @__PURE__ */jsx(Tooltip, {\n        content: label,\n        placement: \"right\",\n        children: children2\n      });\n    }\n    return children2;\n  }\n  return /* @__PURE__ */jsx(\"li\", {\n    ref,\n    children: /* @__PURE__ */jsxs(Wrapper, {\n      children: [/* @__PURE__ */jsxs(\"button\", {\n        id: `flowbite-sidebar-collapse-${id}`,\n        onClick: () => setOpen(!isOpen),\n        title: label,\n        type: \"button\",\n        className: twMerge(theme.button, className),\n        ...restProps,\n        children: [Icon && /* @__PURE__ */jsx(Icon, {\n          \"aria-hidden\": true,\n          \"data-testid\": \"flowbite-sidebar-collapse-icon\",\n          className: twMerge(theme.icon.base, theme.icon.open[isOpen ? \"on\" : \"off\"])\n        }), isCollapsed ? /* @__PURE__ */jsx(\"span\", {\n          className: theme.label.title,\n          children: label\n        }) : /* @__PURE__ */jsxs(Fragment, {\n          children: [/* @__PURE__ */jsx(\"span\", {\n            \"data-testid\": \"flowbite-sidebar-collapse-label\",\n            className: theme.label.base,\n            children: label\n          }), renderChevronIcon ? renderChevronIcon(theme, isOpen) : /* @__PURE__ */jsx(ChevronIcon, {\n            \"aria-hidden\": true,\n            className: twMerge(theme.label.icon.base, theme.label.icon.open[isOpen ? \"on\" : \"off\"])\n          })]\n        })]\n      }), /* @__PURE__ */jsx(\"ul\", {\n        \"aria-labelledby\": `flowbite-sidebar-collapse-${id}`,\n        hidden: !isOpen,\n        className: theme.list,\n        children: /* @__PURE__ */jsx(SidebarItemContext.Provider, {\n          value: {\n            isInsideCollapse: true\n          },\n          children\n        })\n      })]\n    })\n  });\n});\nSidebarCollapse.displayName = \"SidebarCollapse\";\nexport { SidebarCollapse };","map":{"version":3,"names":["SidebarCollapse","forwardRef","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","isCollapsed","useSidebarContext","provider","useThemeProvider","useResolveTheme","sidebarTheme","collapse","sidebar","get","children","className","icon","Icon","label","chevronIcon","ChevronIcon","ChevronDownIcon","renderChevronIcon","open","restProps","resolveProps","sidebarCollapse","id","useId","isOpen","setOpen","useState","useEffect","Wrapper","children2","jsx","Tooltip","content","placement","jsxs","onClick","title","type","twMerge","button","base","Fragment","hidden","list","SidebarItemContext","Provider","value","isInsideCollapse"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Sidebar\\SidebarCollapse.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps, FC, PropsWithChildren, ReactElement } from \"react\";\nimport { forwardRef, useEffect, useId, useState } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { ChevronDownIcon } from \"../../icons/chevron-down-icon\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { FlowbiteBoolean, ThemingProps } from \"../../types\";\nimport { Tooltip } from \"../Tooltip\";\nimport { useSidebarContext } from \"./SidebarContext\";\nimport type { SidebarItemProps } from \"./SidebarItem\";\nimport { SidebarItemContext } from \"./SidebarItemContext\";\nimport { sidebarTheme } from \"./theme\";\n\nexport interface SidebarCollapseTheme {\n  button: string;\n  icon: {\n    base: string;\n    open: FlowbiteBoolean;\n  };\n  label: {\n    base: string;\n    title: string;\n    icon: {\n      base: string;\n      open: FlowbiteBoolean;\n    };\n  };\n  list: string;\n}\n\nexport interface SidebarCollapseProps\n  extends Pick<SidebarItemProps, \"active\" | \"as\" | \"href\" | \"icon\" | \"label\" | \"labelColor\">,\n    ComponentProps<\"button\">,\n    ThemingProps<SidebarCollapseTheme> {\n  onClick?: ComponentProps<\"button\">[\"onClick\"];\n  open?: boolean;\n  chevronIcon?: FC<ComponentProps<\"svg\">>;\n  renderChevronIcon?: (theme: SidebarCollapseTheme, open: boolean) => ReactElement;\n}\n\nexport const SidebarCollapse = forwardRef<HTMLLIElement, SidebarCollapseProps>((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme, isCollapsed } = useSidebarContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [sidebarTheme.collapse, provider.theme?.sidebar?.collapse, rootTheme?.collapse, props.theme],\n    [get(provider.clearTheme, \"sidebar.collapse\"), get(rootClearTheme, \"collapse\"), props.clearTheme],\n    [get(provider.applyTheme, \"sidebar.collapse\"), get(rootApplyTheme, \"collapse\"), props.applyTheme],\n  );\n\n  const {\n    children,\n    className,\n    icon: Icon,\n    label,\n    chevronIcon: ChevronIcon = ChevronDownIcon,\n    renderChevronIcon,\n    open = false,\n    ...restProps\n  } = resolveProps(props, provider.props?.sidebarCollapse);\n\n  const id = useId();\n  const [isOpen, setOpen] = useState(open);\n\n  useEffect(() => setOpen(open), [open]);\n\n  function Wrapper({ children }: PropsWithChildren) {\n    if (isCollapsed && !isOpen) {\n      return (\n        <Tooltip content={label} placement=\"right\">\n          {children}\n        </Tooltip>\n      );\n    }\n\n    return children;\n  }\n\n  return (\n    <li ref={ref}>\n      <Wrapper>\n        <button\n          id={`flowbite-sidebar-collapse-${id}`}\n          onClick={() => setOpen(!isOpen)}\n          title={label}\n          type=\"button\"\n          className={twMerge(theme.button, className)}\n          {...restProps}\n        >\n          {Icon && (\n            <Icon\n              aria-hidden\n              data-testid=\"flowbite-sidebar-collapse-icon\"\n              className={twMerge(theme.icon.base, theme.icon.open[isOpen ? \"on\" : \"off\"])}\n            />\n          )}\n          {isCollapsed ? (\n            <span className={theme.label.title}>{label}</span>\n          ) : (\n            <>\n              <span data-testid=\"flowbite-sidebar-collapse-label\" className={theme.label.base}>\n                {label}\n              </span>\n              {renderChevronIcon ? (\n                renderChevronIcon(theme, isOpen)\n              ) : (\n                <ChevronIcon\n                  aria-hidden\n                  className={twMerge(theme.label.icon.base, theme.label.icon.open[isOpen ? \"on\" : \"off\"])}\n                />\n              )}\n            </>\n          )}\n        </button>\n        <ul aria-labelledby={`flowbite-sidebar-collapse-${id}`} hidden={!isOpen} className={theme.list}>\n          <SidebarItemContext.Provider value={{ isInsideCollapse: true }}>{children}</SidebarItemContext.Provider>\n        </ul>\n      </Wrapper>\n    </li>\n  );\n});\n\nSidebarCollapse.displayName = \"SidebarCollapse\";\n"],"mappings":";;;;;;;;;;;;;;AAeA,MAAEA,eAAe,GAAAC,UAAW,EAAAC,KAAY,EAAAC,GAAA;EACtC,MAAM;IAAAC,KAAA,EAAQC,SAAG;IAAAC,UAAkB,EAAAC,cAAA;IAAAC,UAAA,EAAAC,cAAA;IAAAC;EAAA,IAAAC,iBAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKT,KAAA,GAAAU,eAAuB,CACxB,CAACC,YAAY,CAACC,QAAA,EAAUJ,QAAE,CAAAR,KAAA,EAAAa,OAAqB,EAAAD,QAAI,EAAAX,SAAgB,EAAAW,QAAW,EAAEd,KAAK,CAACE,KAAA,GACtF,CAACc,GAAG,CAACN,QAAQ,CAACN,UAAU,EAAE,kBAAkB,CAAC,EAAEY,GAAG,CAACX,cAAc,EAAE,UAAU,CAAC,EAAEL,KAAK,CAACI,UAAU,GACjG,CAAAY,GAAA,CAAAN,QAAA,CAAAJ,UAAA,uBAAAU,GAAA,CAAAT,cAAA,eAAAP,KAAA,CAAAM,UAAA,CACD;EACF,MAAI;IACAW,QAAA;IACAC,SAAM;IACNC,IAAA,EAAKC,IAAA;IACLC,KAAA;IACAC,WAAA,EAAAC,WAAiB,GAAAC,eAAA;IACjBC,iBAAY;IACZC,IAAG;IACJ,GAAGC;EACJ,IAAAC,YAAgB,CAAA5B,KAAE,EAAAU,QAAA,CAAAV,KAAA,EAAA6B,eAAA;EAClB,MAAMC,EAAC,GAAAC,KAAQ;EACf,OAAAC,MAAU,EAAAC,OAAM,CAAO,GAACC,QAAQ,CAAAR,IAAM;EACtCS,SAAS,OAAOF,OAAG,CAAAP,IAAQ,CAAE,GAAAA,IAAA,EAAS;EACxC,SAAQU,QAAW;IAAAnB,QAAK,EAAMoB;EAAE;IAChC,IAAM7B,WAAA,KAAAwB,MAAuB,EAAG;MAChC,sBAAAM,GAAA,CAAAC,OAAA;QAAAC,OAAA,EAAAnB,KAAA;QAAAoB,SAAA;QAAAxB,QAAA,EAAAoB;MAAA;IACI;IACJ,OAAAA,SAAA;EACE;EACF,sBAAwBC,GAAA;IAAArC,GAAA;IAAAgB,QAAA,iBAAAyB,IAAA,CAAAN,OAAA;MAAAnB,QAAA,GACxB,eAAcyB,IAAA,CACR,UACN;QACQZ,EAAA,+BAA+BA,EAAA;QAC/Ba,OAAO,EAAAA,CAAA,KAAKV,OAAA,EAAAD,MAAA;QACZY,KAAI,EAAEvB,KAAA;QACNwB,IAAA,UAAW;QACX3B,SAAG,EAAA4B,OAAS,CAAA5C,KAAA,CAAA6C,MAAA,EAAA7B,SAAA;QACZ,GAAAS,SAAU;QAClBV,QAAc,GACdG,IAAY,IAAI,eAAAkB,GAAA,CACJlB,IAAA,EACZ;UACc,aAAa,EAAE;UACf,aAAW,kCAAoC;UAC7DF,SAAA,EAAA4B,OAAA,CAAA5C,KAAA,CAAAiB,IAAA,CAAA6B,IAAA,EAAA9C,KAAA,CAAAiB,IAAA,CAAAO,IAAA,CAAAM,MAAA;QACW,CACD,GACVxB,WAAA,kBAAwC8B,GAAE;UAAApB,SAAe,EAAAhB,KAAA,CAAAmB,KAAA,CAAAuB,KAAA;UAAA3B,QAAmC,EAAAI;QAAA,CAAS,IAAE,eAAkBqB,IAAA,CAAAO,QAAU,EAAK;UAAEhC,QAAC,GAC/H,eAAAqB,GAAiB,CAAG;YAAA,aAAuB,EAAE,iCAA6B;YAAApB,SAAA,EAAAhB,KAAA,CAAAmB,KAAA,CAAA2B,IAAA;YAAA/B,QAAA,EAAAI;UAAA,IACtFI,iBAAyB,GAAAA,iBAAA,CAAAvB,KAAA,EAAA8B,MAAA,mBAAAM,GAAA,CACXf,WAAA,EACd;YACgB,aAAW,MAAQ;YACnCL,SAAA,EAAA4B,OAAA,CAAA5C,KAAA,CAAAmB,KAAA,CAAAF,IAAA,CAAA6B,IAAA,EAAA9C,KAAA,CAAAmB,KAAA,CAAAF,IAAA,CAAAO,IAAA,CAAAM,MAAA;UACA,CACW,CAAE;QACb;MAEK,CACL,GACG,eAAMM,GAAA;QAAA,gDAAAR,EAAA;QAAAoB,MAAA,GAAAlB,MAAA;QAAAd,SAAA,EAAAhB,KAAA,CAAAiD,IAAA;QAAAlC,QAAA,iBAAAqB,GAAA,CAAAc,kBAAA,CAAAC,QAAA;UAAAC,KAAA;YAAAC,gBAAA;UAAA;UAAAtC;QAAA;MAAA;IACR;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { textInputTheme } from './theme.js';\nconst TextInput = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([textInputTheme, provider.theme?.textInput, props.theme], [get(provider.clearTheme, \"textInput\"), props.clearTheme], [get(provider.applyTheme, \"textInput\"), props.applyTheme]);\n  const {\n    addon,\n    className,\n    color = \"gray\",\n    icon: Icon,\n    rightIcon: RightIcon,\n    shadow,\n    sizing = \"md\",\n    type = \"text\",\n    ...restProps\n  } = resolveProps(props, provider.props?.textInput);\n  return /* @__PURE__ */jsxs(\"div\", {\n    className: twMerge(theme.base, className),\n    children: [addon && /* @__PURE__ */jsx(\"span\", {\n      className: theme.addon,\n      children: addon\n    }), /* @__PURE__ */jsxs(\"div\", {\n      className: theme.field.base,\n      children: [Icon && /* @__PURE__ */jsx(\"div\", {\n        className: theme.field.icon.base,\n        children: /* @__PURE__ */jsx(Icon, {\n          className: theme.field.icon.svg\n        })\n      }), RightIcon && /* @__PURE__ */jsx(\"div\", {\n        \"data-testid\": \"right-icon\",\n        className: theme.field.rightIcon.base,\n        children: /* @__PURE__ */jsx(RightIcon, {\n          className: theme.field.rightIcon.svg\n        })\n      }), /* @__PURE__ */jsx(\"input\", {\n        className: twMerge(theme.field.input.base, theme.field.input.colors[color], theme.field.input.sizes[sizing], theme.field.input.withIcon[Icon ? \"on\" : \"off\"], theme.field.input.withRightIcon[RightIcon ? \"on\" : \"off\"], theme.field.input.withAddon[addon ? \"on\" : \"off\"], theme.field.input.withShadow[shadow ? \"on\" : \"off\"]),\n        type,\n        ...restProps,\n        ref\n      })]\n    })]\n  });\n});\nTextInput.displayName = \"TextInput\";\nexport { TextInput };","map":{"version":3,"names":["TextInput","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","textInputTheme","textInput","get","clearTheme","applyTheme","addon","className","color","icon","Icon","rightIcon","RightIcon","shadow","sizing","type","restProps","resolveProps","jsxs","twMerge","base","children","jsx","field","svg","input","colors","sizes","withIcon","withRightIcon","withAddon","withShadow"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\TextInput\\TextInput.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps, FC, ReactNode } from \"react\";\nimport { forwardRef } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type {\n  DynamicStringEnumKeysOf,\n  FlowbiteBoolean,\n  FlowbiteColors,\n  FlowbiteSizes,\n  ThemingProps,\n} from \"../../types\";\nimport { textInputTheme } from \"./theme\";\n\nexport interface TextInputTheme {\n  base: string;\n  addon: string;\n  field: {\n    base: string;\n    icon: {\n      base: string;\n      svg: string;\n    };\n    rightIcon: {\n      base: string;\n      svg: string;\n    };\n    input: {\n      base: string;\n      sizes: TextInputSizes;\n      colors: TextInputColors;\n      withIcon: FlowbiteBoolean;\n      withRightIcon: FlowbiteBoolean;\n      withAddon: FlowbiteBoolean;\n      withShadow: FlowbiteBoolean;\n    };\n  };\n}\n\nexport interface TextInputColors extends Pick<FlowbiteColors, \"gray\" | \"info\" | \"failure\" | \"warning\" | \"success\"> {\n  [key: string]: string;\n}\n\nexport interface TextInputSizes extends Pick<FlowbiteSizes, \"sm\" | \"md\" | \"lg\"> {\n  [key: string]: string;\n}\n\nexport interface TextInputProps extends Omit<ComponentProps<\"input\">, \"ref\" | \"color\">, ThemingProps<TextInputTheme> {\n  addon?: ReactNode;\n  color?: DynamicStringEnumKeysOf<TextInputColors>;\n  icon?: FC<ComponentProps<\"svg\">>;\n  rightIcon?: FC<ComponentProps<\"svg\">>;\n  shadow?: boolean;\n  sizing?: DynamicStringEnumKeysOf<TextInputSizes>;\n}\n\nexport const TextInput = forwardRef<HTMLInputElement, TextInputProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [textInputTheme, provider.theme?.textInput, props.theme],\n    [get(provider.clearTheme, \"textInput\"), props.clearTheme],\n    [get(provider.applyTheme, \"textInput\"), props.applyTheme],\n  );\n\n  const {\n    addon,\n    className,\n    color = \"gray\",\n    icon: Icon,\n    rightIcon: RightIcon,\n    shadow,\n    sizing = \"md\",\n    type = \"text\",\n    ...restProps\n  } = resolveProps(props, provider.props?.textInput);\n\n  return (\n    <div className={twMerge(theme.base, className)}>\n      {addon && <span className={theme.addon}>{addon}</span>}\n      <div className={theme.field.base}>\n        {Icon && (\n          <div className={theme.field.icon.base}>\n            <Icon className={theme.field.icon.svg} />\n          </div>\n        )}\n        {RightIcon && (\n          <div data-testid=\"right-icon\" className={theme.field.rightIcon.base}>\n            <RightIcon className={theme.field.rightIcon.svg} />\n          </div>\n        )}\n        <input\n          className={twMerge(\n            theme.field.input.base,\n            theme.field.input.colors[color],\n            theme.field.input.sizes[sizing],\n            theme.field.input.withIcon[Icon ? \"on\" : \"off\"],\n            theme.field.input.withRightIcon[RightIcon ? \"on\" : \"off\"],\n            theme.field.input.withAddon[addon ? \"on\" : \"off\"],\n            theme.field.input.withShadow[shadow ? \"on\" : \"off\"],\n          )}\n          type={type}\n          {...restProps}\n          ref={ref}\n        />\n      </div>\n    </div>\n  );\n});\n\nTextInput.displayName = \"TextInput\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,SAAM,GAAQC,UAAG,EAAAC,KAAgB,EAAEC,GAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAyB,CAC1B,CAACC,cAAa,EAAAJ,QAAU,CAAEE,KAAA,EAAAG,SAAc,EAAAP,KAAM,CAAAI,KAAA,CAAU,EACxD,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,WAAW,CAAC,EAAET,KAAK,CAACS,UAAU,GACzD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,gBAAAV,KAAA,CAAAU,UAAA,CACD;EACF,MAAI;IACAC,KAAA;IACAC,SAAQ;IACRC,KAAI,GAAE,MAAI;IACVC,IAAA,EAAAC,IAAS;IACTC,SAAM,EAAAC,SAAA;IACNC,MAAM;IACNC,MAAI,GAAG,IAAM;IACbC,IAAG;IACJ,GAAGC;EACJ,IAAAC,YAAA,CAAAtB,KAAA,EAAuBE,QAAK,CAAKF,KAAI,EAAAO,SAAW;EAClD,OAAS,eAAAgB,IAAoB,MAAI;IAAMX,SAAI,EAAAY,OAAW,CAAApB,KAAM,CAAAqB,IAAO,EAAAb,SAAU;IAAKc,QAAG,GACrFf,KAAA,mBAAyBgB,GAAO,OAAE;MAASf,SAAQ,EAAAR,KAAM,CAAAO,KAAM;MAAAe,QAAU,EAAAf;IAAA,IACzE,eAAUY,IAAA,MAAoB;MAAIX,SAAS,EAAAR,KAAA,CAAAwB,KAAW,CAAAH,IAAM;MAAAC,QAAW,GACjEX,IAAA,mBAASY,GAAA,MAAwB;QAAAf,SAAS,EAAAR,KAAA,CAAAwB,KAAe,CAAAd,IAAA,CAAAW,IAAY;QAAEC,QAAA,EAAS,eAAcC,GAAA,CAAAZ,IAAU;UAAIH,SAAU,EAAAR,KAAA,CAAAwB,KAAA,CAAAd,IAAkB,CAAAe;QAAI;MAAA,IAClJZ,SAAA,mBAAyBU,GAAA;QAAA;QAAAf,SAAA,EAAAR,KAAA,CAAAwB,KAAA,CAAAZ,SAAA,CAAAS,IAAA;QAAAC,QAAA,iBAAAC,GAAA,CAAAV,SAAA;UAAAL,SAAA,EAAAR,KAAA,CAAAwB,KAAA,CAAAZ,SAAA,CAAAa;QAAA;MAAA,IACzB,eAAeF,GAAA,CACP,SACR;QACAf,SAAkB,EAAAY,OAAM,CACZpB,KAAK,CAACwB,KAAK,CAACE,KAAK,CAACL,IAAA,EAClBrB,KAAK,CAACwB,KAAK,CAACE,KAAK,CAACC,MAAM,CAAAlB,KAAM,CAAC,EAC/BT,KAAK,CAACwB,KAAK,CAACE,KAAK,CAACE,KAAA,CAAAb,MAAS,CAAI,EAC/Bf,KAAK,CAACwB,KAAK,CAACE,KAAK,CAACG,QAAA,CAAAlB,IAAa,GAAC,OAAS,KAAG,GAC5CX,KAAK,CAACwB,KAAK,CAACE,KAAK,CAACI,aAAU,CAAAjB,SAAY,GAAG,IAAK,GAAC,QACjDb,KAAK,CAACwB,KAAK,CAACE,KAAK,CAACK,SAAA,CAAUxB,KAAC,GAAM,IAAG,GAAI,KAAG,GAC9CP,KAAA,CAAAwB,KAAA,CAAAE,KAAA,CAAAM,UAAA,CAAAlB,MAAA,gBACD;QACAE,IAAG;QACH,GAAAC,SAAA;QACVpB;MACA,CACK,CAAE;IACD;EACL;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
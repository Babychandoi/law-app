{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { paginationTheme } from './theme.js';\nconst PaginationButton = forwardRef(({\n  active,\n  children,\n  className,\n  onClick,\n  theme: customTheme,\n  clearTheme,\n  applyTheme,\n  ...props\n}, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([paginationTheme, provider.theme?.pagination, customTheme], [get(provider.clearTheme, \"pagination\"), clearTheme], [get(provider.applyTheme, \"pagination\"), applyTheme]);\n  return /* @__PURE__ */jsx(\"button\", {\n    ref,\n    type: \"button\",\n    className: twMerge(active && theme.pages.selector.active, className),\n    onClick,\n    ...props,\n    children\n  });\n});\nPaginationButton.displayName = \"PaginationButton\";\nfunction PaginationNavigation({\n  children,\n  className,\n  onClick,\n  disabled = false,\n  theme: customTheme,\n  clearTheme,\n  applyTheme,\n  ...props\n}) {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([paginationTheme, provider.theme?.pagination, customTheme], [get(provider.clearTheme, \"pagination\"), clearTheme], [get(provider.applyTheme, \"pagination\"), applyTheme]);\n  return /* @__PURE__ */jsx(\"button\", {\n    type: \"button\",\n    className: twMerge(disabled && theme.pages.selector.disabled, className),\n    disabled,\n    onClick,\n    ...props,\n    children\n  });\n}\nPaginationNavigation.displayName = \"PaginationNavigation\";\nexport { PaginationButton, PaginationNavigation };","map":{"version":3,"names":["PaginationButton","forwardRef","active","children","className","onClick","theme","customTheme","clearTheme","applyTheme","props","ref","provider","useThemeProvider","useResolveTheme","paginationTheme","pagination","get","jsx","type","twMerge","pages","selector","displayName","PaginationNavigation","disabled"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Pagination\\PaginationButton.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps, type ReactEventHandler, type ReactNode } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { paginationTheme } from \"./theme\";\n\nexport interface PaginationButtonTheme {\n  base: string;\n  active: string;\n  disabled: string;\n}\n\nexport interface PaginationButtonProps extends ComponentProps<\"button\">, ThemingProps<PaginationButtonTheme> {\n  active?: boolean;\n  children?: ReactNode;\n  className?: string;\n  onClick?: ReactEventHandler<HTMLButtonElement>;\n}\n\nexport interface PaginationPrevButtonProps extends Omit<PaginationButtonProps, \"active\"> {\n  disabled?: boolean;\n}\n\nexport const PaginationButton = forwardRef<HTMLButtonElement, PaginationButtonProps>(\n  ({ active, children, className, onClick, theme: customTheme, clearTheme, applyTheme, ...props }, ref) => {\n    const provider = useThemeProvider();\n    const theme = useResolveTheme(\n      [paginationTheme, provider.theme?.pagination, customTheme],\n      [get(provider.clearTheme, \"pagination\"), clearTheme],\n      [get(provider.applyTheme, \"pagination\"), applyTheme],\n    );\n\n    return (\n      <button\n        ref={ref}\n        type=\"button\"\n        className={twMerge(active && theme.pages.selector.active, className)}\n        onClick={onClick}\n        {...props}\n      >\n        {children}\n      </button>\n    );\n  },\n);\n\nPaginationButton.displayName = \"PaginationButton\";\n\nexport function PaginationNavigation({\n  children,\n  className,\n  onClick,\n  disabled = false,\n  theme: customTheme,\n  clearTheme,\n  applyTheme,\n  ...props\n}: PaginationPrevButtonProps) {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [paginationTheme, provider.theme?.pagination, customTheme],\n    [get(provider.clearTheme, \"pagination\"), clearTheme],\n    [get(provider.applyTheme, \"pagination\"), applyTheme],\n  );\n\n  return (\n    <button\n      type=\"button\"\n      className={twMerge(disabled && theme.pages.selector.disabled, className)}\n      disabled={disabled}\n      onClick={onClick}\n      {...props}\n    >\n      {children}\n    </button>\n  );\n}\n\nPaginationNavigation.displayName = \"PaginationNavigation\";\n"],"mappings":";;;;;;;;;AAUA,MAAKA,gBAAgB,GAAEC,UAAW,CAClC;EAAIC,MAAM;EAAAC,QAAW;EAAAC,SAAA;EAAAC,OAAkB;EAAAC,KAAA,EAAAC,WAAA;EAAAC,UAAA;EAAAC,UAAA;EAAA,GAAAC;AAAA,GAAAC,GAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EACjC,MAAOP,KAAA,GAAAQ,eAA0B,CAC3B,CAACC,eAAa,EAAAH,QAAY,CAAAN,KAAA,EAAAU,UAAe,EAAAT,WAAW,GACpD,CAACU,GAAG,CAACL,QAAQ,CAACJ,UAAU,EAAE,YAAY,CAAC,EAAEA,UAAU,GACpD,CAAAS,GAAA,CAAAL,QAAA,CAAAH,UAAA,iBAAAA,UAAA,CACD;EACJ,OAAM,eAAQS,GAAA,CACR,UACN;IACQP,GAAA;IACAQ,IAAA,UAAW;IACXf,SAAO,EAAAgB,OAAA,CAAAlB,MAAA,IAAAI,KAAA,CAAAe,KAAA,CAAAC,QAAA,CAAApB,MAAA,EAAAE,SAAA;IACPC,OAAG;IACH,GAAAK,KAAA;IACRP;EACK,CACL;AACA,CACA;AACOH,gBAAS,CAAAuB,WAAA,GAAqB;AACrC,SAAEC,oBAAQA,CAAA;EACRrB,QAAA;EACAC,SAAO;EACPC,OAAA;EACAoB,QAAO;EACPnB,KAAA,EAAAC,WAAU;EACVC,UAAU;EACVC,UAAG;EACJ,GAAEC;AACH,GAAE;EACA,MAAME,QAAQ,GAAAC,gBAAe;EAC/B,MAAKP,KAAA,GAAAQ,eAA0B,CAC3B,CAACC,eAAa,EAAAH,QAAY,CAAAN,KAAA,EAAAU,UAAe,EAAAT,WAAW,GACpD,CAACU,GAAG,CAACL,QAAQ,CAACJ,UAAU,EAAE,YAAY,CAAC,EAAEA,UAAU,GACpD,CAAAS,GAAA,CAAAL,QAAA,CAAAH,UAAA,iBAAAA,UAAA,CACD;EACF,OAAI,eAAQS,GAAA,CACR,UACJ;IACMC,IAAA,UAAW;IACXf,SAAQ,EAAAgB,OAAA,CAAAK,QAAA,IAAAnB,KAAA,CAAAe,KAAA,CAAAC,QAAA,CAAAG,QAAA,EAAArB,SAAA;IACRqB,QAAO;IACPpB,OAAG;IACH,GAAAK,KAAA;IACNP;EACG,CACH;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
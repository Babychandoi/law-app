{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport { getPrefix } from '../store/index.js';\nconst defaultOptions = {\n  defaultMode: \"auto\",\n  localStorageKey: \"flowbite-theme-mode\",\n  prefix: \"\"\n};\nfunction ThemeModeScript({\n  mode,\n  defaultMode = defaultOptions.defaultMode,\n  localStorageKey = defaultOptions.localStorageKey,\n  ...others\n}) {\n  return /* @__PURE__ */jsx(\"script\", {\n    ...others,\n    \"data-flowbite-theme-mode-script\": true,\n    dangerouslySetInnerHTML: {\n      __html: getThemeModeScript({\n        mode,\n        defaultMode,\n        localStorageKey,\n        prefix: getPrefix() ?? \"\"\n      })\n    }\n  });\n}\nThemeModeScript.displayName = \"ThemeModeScript\";\nfunction getThemeModeScript(props = {}) {\n  const {\n    mode,\n    defaultMode = defaultOptions.defaultMode,\n    localStorageKey = defaultOptions.localStorageKey,\n    prefix = defaultOptions.prefix\n  } = props;\n  return `\n    try {\n      const storageMode = window.localStorage.getItem(\"${localStorageKey}\");\n      const isStorageModeValid = storageMode === \"light\" || storageMode === \"dark\" || storageMode === \"auto\";\n      const resolvedMode = (isStorageModeValid ? storageMode : null) ?? ${mode ? `\"${mode}\"` : void 0} ?? \"${defaultMode}\";\n      const computedMode =\n        resolvedMode === \"auto\" ? (window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\") : resolvedMode;\n\n      if (computedMode === \"dark\") {\n        document.documentElement.classList.add(\"${prefix}dark\");\n      } else {\n        document.documentElement.classList.remove(\"${prefix}dark\");\n      }\n      localStorage.setItem(\"${localStorageKey}\", resolvedMode);\n\n      // Add listener for system theme changes\n      const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n      mediaQuery.addEventListener(\"change\", (e) => {\n        const storageMode = window.localStorage.getItem(\"${localStorageKey}\");\n        const isStorageModeValid = storageMode === \"light\" || storageMode === \"dark\" || storageMode === \"auto\";\n        const resolvedMode = isStorageModeValid ? storageMode : \"${defaultMode}\";\n\n        if (resolvedMode === \"auto\") {\n          if (e.matches) {\n            document.documentElement.classList.add(\"${prefix}dark\");\n          } else {\n            document.documentElement.classList.remove(\"${prefix}dark\");\n          }\n        }\n      });\n\n      // Add listener for storage changes\n      window.addEventListener(\"storage\", (e) => {\n        if (e.key === \"${localStorageKey}\") {\n          const newMode = e.newValue;\n          const isStorageModeValid = newMode === \"light\" || newMode === \"dark\" || newMode === \"auto\";\n          const resolvedMode = isStorageModeValid ? newMode : \"${defaultMode}\";\n\n          if (resolvedMode === \"dark\" || (resolvedMode === \"auto\" && window.matchMedia(\"(prefers-color-scheme: dark)\").matches)) {\n            document.documentElement.classList.add(\"${prefix}dark\");\n          } else {\n            document.documentElement.classList.remove(\"${prefix}dark\");\n          }\n        }\n      });\n    } catch (e) {}\n  `;\n}\nfunction initThemeMode(props = {}) {\n  const {\n    mode,\n    defaultMode = defaultOptions.defaultMode,\n    localStorageKey = defaultOptions.localStorageKey,\n    prefix = defaultOptions.prefix\n  } = props;\n  try {\n    const storageMode = window.localStorage.getItem(localStorageKey);\n    const isStorageModeValid = storageMode === \"light\" || storageMode === \"dark\" || storageMode === \"auto\";\n    const resolvedMode = (isStorageModeValid ? storageMode : null) ?? mode ?? defaultMode;\n    const computedMode = resolvedMode === \"auto\" ? window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\" : resolvedMode;\n    if (computedMode === \"dark\") {\n      document.documentElement.classList.add(`${prefix}dark`);\n    } else {\n      document.documentElement.classList.remove(`${prefix}dark`);\n    }\n    localStorage.setItem(localStorageKey, resolvedMode);\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    mediaQuery.addEventListener(\"change\", e => {\n      const storageMode2 = window.localStorage.getItem(localStorageKey);\n      const isStorageModeValid2 = storageMode2 === \"light\" || storageMode2 === \"dark\" || storageMode2 === \"auto\";\n      const resolvedMode2 = isStorageModeValid2 ? storageMode2 : defaultMode;\n      if (resolvedMode2 === \"auto\") {\n        if (e.matches) {\n          document.documentElement.classList.add(`${prefix}dark`);\n        } else {\n          document.documentElement.classList.remove(`${prefix}dark`);\n        }\n      }\n    });\n    window.addEventListener(\"storage\", e => {\n      if (e.key === localStorageKey) {\n        const newMode = e.newValue;\n        const isStorageModeValid2 = newMode === \"light\" || newMode === \"dark\" || newMode === \"auto\";\n        const resolvedMode2 = isStorageModeValid2 ? newMode : defaultMode;\n        if (resolvedMode2 === \"dark\" || resolvedMode2 === \"auto\" && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n          document.documentElement.classList.add(`${prefix}dark`);\n        } else {\n          document.documentElement.classList.remove(`${prefix}dark`);\n        }\n      }\n    });\n  } catch (e) {}\n}\nexport { ThemeModeScript, getThemeModeScript, initThemeMode };","map":{"version":3,"names":["defaultOptions","defaultMode","localStorageKey","prefix","ThemeModeScript","mode","others","jsx","dangerouslySetInnerHTML","__html","getThemeModeScript","getPrefix","displayName","props","initThemeMode","storageMode","window","localStorage","getItem","isStorageModeValid","resolvedMode","computedMode","matchMedia","matches","document","documentElement","classList","add","remove","setItem","mediaQuery","addEventListener","e","storageMode2","isStorageModeValid2","resolvedMode2","key","newMode","newValue"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\theme\\mode-script.tsx"],"sourcesContent":["import type React from \"react\";\nimport type { ThemeMode } from \"../hooks/use-theme-mode\";\nimport { getPrefix } from \"../store\";\n\nconst defaultOptions = {\n  mode: \"auto\" as ThemeMode,\n  defaultMode: \"auto\" as ThemeMode,\n  localStorageKey: \"flowbite-theme-mode\",\n  prefix: \"\",\n};\n\nexport interface ThemeModeScriptProps extends React.ComponentPropsWithoutRef<\"script\"> {\n  /**\n   * The current theme mode to use\n   *\n   * @type {\"light\" | \"dark\" | \"auto\"}\n   */\n  mode?: ThemeMode;\n  /**\n   * The default theme mode if none is set\n   *\n   * @type {\"light\" | \"dark\" | \"auto\"}\n   * @default \"auto\"\n   */\n  defaultMode?: ThemeMode;\n  /**\n   * Key used to store theme mode in localStorage\n   *\n   * @type {string}\n   * @default \"flowbite-theme-mode\"\n   */\n  localStorageKey?: string;\n}\n\n/**\n * A script component that handles theme mode initialization\n *\n * @param {Object} props - The component props\n * @param {ThemeMode} [props.mode] - The current theme mode to use\n * @param {ThemeMode} [props.defaultMode=\"auto\"] - The default theme mode if none is set\n * @param {string} [props.localStorageKey=\"flowbite-theme-mode\"] - Key used to store theme mode in localStorage\n * @param {React.ComponentPropsWithoutRef<\"script\">} props.others - Additional script element props\n * @returns {JSX.Element} Script element that initializes theme mode\n */\nexport function ThemeModeScript({\n  mode,\n  defaultMode = defaultOptions.defaultMode,\n  localStorageKey = defaultOptions.localStorageKey,\n  ...others\n}: ThemeModeScriptProps): JSX.Element {\n  return (\n    <script\n      {...others}\n      data-flowbite-theme-mode-script\n      dangerouslySetInnerHTML={{\n        __html: getThemeModeScript({ mode, defaultMode, localStorageKey, prefix: getPrefix() ?? \"\" }),\n      }}\n    />\n  );\n}\n\nThemeModeScript.displayName = \"ThemeModeScript\";\n\n/**\n * Generates a script string that handles theme mode initialization\n *\n * @param {Object} options - The options object\n * @param {ThemeMode} [options.mode] - The current theme mode to use\n * @param {ThemeMode} [options.defaultMode=\"auto\"] - The default theme mode if none is set\n * @param {string} [options.localStorageKey=\"flowbite-theme-mode\"] - Key used to store theme mode in localStorage\n * @param {string} [options.prefix=\"\"] - The prefix to use for the theme mode class\n * @returns {string} Script string that initializes theme mode\n */\nexport function getThemeModeScript(\n  props: {\n    mode?: ThemeMode;\n    defaultMode?: ThemeMode;\n    localStorageKey?: string;\n    prefix?: string;\n  } = {},\n): string {\n  const {\n    mode,\n    defaultMode = defaultOptions.defaultMode,\n    localStorageKey = defaultOptions.localStorageKey,\n    prefix = defaultOptions.prefix,\n  } = props;\n\n  return `\n    try {\n      const storageMode = window.localStorage.getItem(\"${localStorageKey}\");\n      const isStorageModeValid = storageMode === \"light\" || storageMode === \"dark\" || storageMode === \"auto\";\n      const resolvedMode = (isStorageModeValid ? storageMode : null) ?? ${mode ? `\"${mode}\"` : undefined} ?? \"${defaultMode}\";\n      const computedMode =\n        resolvedMode === \"auto\" ? (window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\") : resolvedMode;\n\n      if (computedMode === \"dark\") {\n        document.documentElement.classList.add(\"${prefix}dark\");\n      } else {\n        document.documentElement.classList.remove(\"${prefix}dark\");\n      }\n      localStorage.setItem(\"${localStorageKey}\", resolvedMode);\n\n      // Add listener for system theme changes\n      const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n      mediaQuery.addEventListener(\"change\", (e) => {\n        const storageMode = window.localStorage.getItem(\"${localStorageKey}\");\n        const isStorageModeValid = storageMode === \"light\" || storageMode === \"dark\" || storageMode === \"auto\";\n        const resolvedMode = isStorageModeValid ? storageMode : \"${defaultMode}\";\n\n        if (resolvedMode === \"auto\") {\n          if (e.matches) {\n            document.documentElement.classList.add(\"${prefix}dark\");\n          } else {\n            document.documentElement.classList.remove(\"${prefix}dark\");\n          }\n        }\n      });\n\n      // Add listener for storage changes\n      window.addEventListener(\"storage\", (e) => {\n        if (e.key === \"${localStorageKey}\") {\n          const newMode = e.newValue;\n          const isStorageModeValid = newMode === \"light\" || newMode === \"dark\" || newMode === \"auto\";\n          const resolvedMode = isStorageModeValid ? newMode : \"${defaultMode}\";\n\n          if (resolvedMode === \"dark\" || (resolvedMode === \"auto\" && window.matchMedia(\"(prefers-color-scheme: dark)\").matches)) {\n            document.documentElement.classList.add(\"${prefix}dark\");\n          } else {\n            document.documentElement.classList.remove(\"${prefix}dark\");\n          }\n        }\n      });\n    } catch (e) {}\n  `;\n}\n\n/**\n * Initializes the theme mode by checking localStorage, provided mode, or default mode\n * and applies the appropriate class to the document element\n *\n * @param {Object} options - The options object\n * @param {ThemeMode} [options.mode] - The current theme mode to use\n * @param {ThemeMode} [options.defaultMode=\"auto\"] - The default theme mode if none is set\n * @param {string} [options.localStorageKey=\"flowbite-theme-mode\"] - Key used to store theme mode in localStorage\n * @param {string} [options.prefix=\"\"] - The prefix to use for the theme mode class\n * @returns {void}\n */\nexport function initThemeMode(\n  props: {\n    mode?: ThemeMode;\n    defaultMode?: ThemeMode;\n    localStorageKey?: string;\n    prefix?: string;\n  } = {},\n): void {\n  const {\n    mode,\n    defaultMode = defaultOptions.defaultMode,\n    localStorageKey = defaultOptions.localStorageKey,\n    prefix = defaultOptions.prefix,\n  } = props;\n\n  try {\n    const storageMode = window.localStorage.getItem(localStorageKey);\n    const isStorageModeValid = storageMode === \"light\" || storageMode === \"dark\" || storageMode === \"auto\";\n    const resolvedMode = (isStorageModeValid ? storageMode : null) ?? mode ?? defaultMode;\n    const computedMode =\n      resolvedMode === \"auto\"\n        ? window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n          ? \"dark\"\n          : \"light\"\n        : resolvedMode;\n\n    if (computedMode === \"dark\") {\n      document.documentElement.classList.add(`${prefix}dark`);\n    } else {\n      document.documentElement.classList.remove(`${prefix}dark`);\n    }\n    localStorage.setItem(localStorageKey, resolvedMode);\n\n    // Add listener for system theme changes\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    mediaQuery.addEventListener(\"change\", (e) => {\n      const storageMode = window.localStorage.getItem(localStorageKey);\n      const isStorageModeValid = storageMode === \"light\" || storageMode === \"dark\" || storageMode === \"auto\";\n      const resolvedMode = isStorageModeValid ? storageMode : defaultMode;\n\n      if (resolvedMode === \"auto\") {\n        if (e.matches) {\n          document.documentElement.classList.add(`${prefix}dark`);\n        } else {\n          document.documentElement.classList.remove(`${prefix}dark`);\n        }\n      }\n    });\n\n    // Add listener for storage changes\n    window.addEventListener(\"storage\", (e) => {\n      if (e.key === localStorageKey) {\n        const newMode = e.newValue;\n        const isStorageModeValid = newMode === \"light\" || newMode === \"dark\" || newMode === \"auto\";\n        const resolvedMode = isStorageModeValid ? newMode : defaultMode;\n\n        if (\n          resolvedMode === \"dark\" ||\n          (resolvedMode === \"auto\" && window.matchMedia(\"(prefers-color-scheme: dark)\").matches)\n        ) {\n          document.documentElement.classList.add(`${prefix}dark`);\n        } else {\n          document.documentElement.classList.remove(`${prefix}dark`);\n        }\n      }\n    });\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-empty\n  } catch (e) {}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
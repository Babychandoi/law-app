{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useSidebarContext } from './SidebarContext.js';\nimport { SidebarItemContext } from './SidebarItemContext.js';\nimport { sidebarTheme } from './theme.js';\nconst SidebarItemGroup = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme\n  } = useSidebarContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([sidebarTheme.itemGroup, provider.theme?.sidebar?.itemGroup, rootTheme?.itemGroup, props.theme], [get(provider.clearTheme, \"sidebar.itemGroup\"), get(rootClearTheme, \"itemGroup\"), props.clearTheme], [get(provider.applyTheme, \"sidebar.itemGroup\"), get(rootApplyTheme, \"itemGroup\"), props.applyTheme]);\n  const {\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.sidebarItemGroup);\n  return /* @__PURE__ */jsx(SidebarItemContext.Provider, {\n    value: {\n      isInsideCollapse: false\n    },\n    children: /* @__PURE__ */jsx(\"ul\", {\n      ref,\n      \"data-testid\": \"flowbite-sidebar-item-group\",\n      className: twMerge(theme.base, className),\n      ...restProps\n    })\n  });\n});\nSidebarItemGroup.displayName = \"SidebarItemGroup\";\nexport { SidebarItemGroup };","map":{"version":3,"names":["SidebarItemGroup","forwardRef","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","useSidebarContext","provider","useThemeProvider","useResolveTheme","sidebarTheme","itemGroup","sidebar","get","className","restProps","resolveProps","sidebarItemGroup","jsx","SidebarItemContext","Provider","value","isInsideCollapse","children","twMerge","base"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Sidebar\\SidebarItemGroup.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { useSidebarContext } from \"./SidebarContext\";\nimport { SidebarItemContext } from \"./SidebarItemContext\";\nimport { sidebarTheme } from \"./theme\";\n\nexport interface SidebarItemGroupTheme {\n  base: string;\n}\n\nexport interface SidebarItemGroupProps extends ComponentProps<\"ul\">, ThemingProps<SidebarItemGroupTheme> {}\n\nexport const SidebarItemGroup = forwardRef<HTMLUListElement, SidebarItemGroupProps>((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme } = useSidebarContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [sidebarTheme.itemGroup, provider.theme?.sidebar?.itemGroup, rootTheme?.itemGroup, props.theme],\n    [get(provider.clearTheme, \"sidebar.itemGroup\"), get(rootClearTheme, \"itemGroup\"), props.clearTheme],\n    [get(provider.applyTheme, \"sidebar.itemGroup\"), get(rootApplyTheme, \"itemGroup\"), props.applyTheme],\n  );\n\n  const { className, ...restProps } = resolveProps(props, provider.props?.sidebarItemGroup);\n\n  return (\n    <SidebarItemContext.Provider value={{ isInsideCollapse: false }}>\n      <ul\n        ref={ref}\n        data-testid=\"flowbite-sidebar-item-group\"\n        className={twMerge(theme.base, className)}\n        {...restProps}\n      />\n    </SidebarItemContext.Provider>\n  );\n});\n\nSidebarItemGroup.displayName = \"SidebarItemGroup\";\n"],"mappings":";;;;;;;;;;;;AAaA,MAAEA,gBAAe,GAAAC,UAAW,EAAAC,KAAY,EAAAC,GAAA;EACtC,MAAM;IAAAC,KAAA,EAAQC,SAAG;IAAAC,UAAkB,EAAAC,cAAA;IAAAC,UAAA,EAAAC;EAAA,IAAAC,iBAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKR,KAAA,GAAAS,eAAwB,CACzB,CAACC,YAAY,CAACC,SAAA,EAAUJ,QAAE,CAAAP,KAAA,EAAAY,OAAsB,EAAAD,SAAI,EAAAV,SAAgB,EAAAU,SAAY,EAAEb,KAAM,CAAAE,KAAA,GACxF,CAACa,GAAG,CAACN,QAAQ,CAACL,UAAU,EAAE,mBAAmB,CAAC,EAAEW,GAAG,CAACV,cAAc,EAAE,WAAW,CAAC,EAAEL,KAAK,CAACI,UAAU,GACnG,CAAAW,GAAA,CAAAN,QAAA,CAAAH,UAAA,wBAAAS,GAAA,CAAAR,cAAA,gBAAAP,KAAA,CAAAM,UAAA,CACD;EACA;IAAAU,SAAA;IAAA,GAAAC;EAA2B,IAAAC,YAAmB,CAAAlB,KAAQ,EAAES,QAAO,CAAET,KAAE,EAAAmB,gBAAkB;EACvF,OAAQ,eAAAC,GAAA,CAAAC,kBAAA,CAAAC,QAAA;IAAAC,KAAA;MAAAC,gBAAA;IAAA;IAAAC,QAAA,iBAAAL,GAAA,CACJ,MACJ;MACMnB,GAAA;MACA,aAAW,+BAA8B;MACzCe,SAAG,EAAAU,OAAA,CAAAxB,KAAA,CAAAyB,IAAA,EAAAX,SAAA;MACT,GAAAC;IACG,CACF;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsxs, Fragment, jsx } from 'react/jsx-runtime';\nimport { forwardRef, useId } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { toggleSwitchTheme } from './theme.js';\nconst ToggleSwitch = forwardRef((props, ref) => {\n  const id = useId();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([toggleSwitchTheme, provider.theme?.toggleSwitch, props.theme], [get(provider.clearTheme, \"toggleSwitch\"), props.clearTheme], [get(provider.applyTheme, \"toggleSwitch\"), props.applyTheme]);\n  const {\n    checked,\n    className,\n    color = \"default\",\n    sizing = \"md\",\n    disabled,\n    label,\n    name,\n    onChange,\n    ...restProps\n  } = resolveProps(props, provider.props?.toggleSwitch);\n  function handleClick() {\n    onChange(!checked);\n  }\n  function handleOnKeyDown(event) {\n    if (event.code == \"Enter\") {\n      event.preventDefault();\n    }\n  }\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(\"input\", {\n      ref,\n      checked,\n      name,\n      type: \"checkbox\",\n      className: theme.root.input,\n      readOnly: true,\n      hidden: true\n    }), /* @__PURE__ */jsxs(\"button\", {\n      \"aria-checked\": checked,\n      \"aria-labelledby\": `${id}-flowbite-toggleswitch-label`,\n      disabled,\n      id: `${id}-flowbite-toggleswitch`,\n      onClick: handleClick,\n      onKeyDown: handleOnKeyDown,\n      role: \"switch\",\n      tabIndex: 0,\n      type: \"button\",\n      className: twMerge(theme.root.base, theme.root.active[disabled ? \"off\" : \"on\"], className),\n      ...restProps,\n      children: [/* @__PURE__ */jsx(\"div\", {\n        \"data-testid\": \"flowbite-toggleswitch-toggle\",\n        className: twMerge(theme.toggle.base, theme.toggle.checked.color[color], theme.toggle.checked[checked ? \"on\" : \"off\"], theme.toggle.sizes[sizing])\n      }), !!label?.length && /* @__PURE__ */jsx(\"span\", {\n        \"data-testid\": \"flowbite-toggleswitch-label\",\n        id: `${id}-flowbite-toggleswitch-label`,\n        className: theme.root.label,\n        children: label\n      })]\n    })]\n  });\n});\nToggleSwitch.displayName = \"ToggleSwitch\";\nexport { ToggleSwitch };","map":{"version":3,"names":["ToggleSwitch","forwardRef","props","ref","id","useId","provider","useThemeProvider","theme","useResolveTheme","toggleSwitchTheme","toggleSwitch","get","clearTheme","applyTheme","checked","className","color","sizing","disabled","label","name","onChange","restProps","resolveProps","handleClick","handleOnKeyDown","event","code","preventDefault","jsxs","Fragment","children","jsx","type","root","input","readOnly","hidden","onClick","onKeyDown","role","tabIndex","twMerge","base","active","toggle","sizes","length"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\ToggleSwitch\\ToggleSwitch.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps, KeyboardEvent } from \"react\";\nimport { forwardRef, useId } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { DynamicStringEnumKeysOf, FlowbiteBoolean, FlowbiteColors, ThemingProps } from \"../../types\";\nimport type { TextInputSizes } from \"../TextInput\";\nimport { toggleSwitchTheme } from \"./theme\";\n\nexport interface ToggleSwitchTheme {\n  root: ToggleSwitchRootTheme;\n  toggle: ToggleSwitchToggleTheme;\n}\n\nexport interface ToggleSwitchRootTheme {\n  base: string;\n  active: FlowbiteBoolean;\n  label: string;\n  input: string;\n}\n\nexport interface ToggleSwitchToggleTheme {\n  base: string;\n  sizes: TextInputSizes;\n  checked: FlowbiteBoolean & {\n    color: FlowbiteColors;\n  };\n}\n\nexport type ToggleSwitchProps = Omit<ComponentProps<\"button\">, \"onChange\" | \"ref\"> & {\n  checked: boolean;\n  color?: DynamicStringEnumKeysOf<FlowbiteColors>;\n  sizing?: DynamicStringEnumKeysOf<TextInputSizes>;\n  label?: string;\n  onChange: (checked: boolean) => void;\n} & ThemingProps<ToggleSwitchTheme>;\n\nexport const ToggleSwitch = forwardRef<HTMLInputElement, ToggleSwitchProps>((props, ref) => {\n  const id = useId();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [toggleSwitchTheme, provider.theme?.toggleSwitch, props.theme],\n    [get(provider.clearTheme, \"toggleSwitch\"), props.clearTheme],\n    [get(provider.applyTheme, \"toggleSwitch\"), props.applyTheme],\n  );\n\n  const {\n    checked,\n    className,\n    color = \"default\",\n    sizing = \"md\",\n    disabled,\n    label,\n    name,\n    onChange,\n    ...restProps\n  } = resolveProps(props, provider.props?.toggleSwitch);\n\n  function handleClick() {\n    onChange(!checked);\n  }\n\n  function handleOnKeyDown(event: KeyboardEvent<HTMLButtonElement>) {\n    if (event.code == \"Enter\") {\n      event.preventDefault();\n    }\n  }\n\n  return (\n    <>\n      <input ref={ref} checked={checked} name={name} type=\"checkbox\" className={theme.root.input} readOnly hidden />\n      <button\n        aria-checked={checked}\n        aria-labelledby={`${id}-flowbite-toggleswitch-label`}\n        disabled={disabled}\n        id={`${id}-flowbite-toggleswitch`}\n        onClick={handleClick}\n        onKeyDown={handleOnKeyDown}\n        role=\"switch\"\n        tabIndex={0}\n        type=\"button\"\n        className={twMerge(theme.root.base, theme.root.active[disabled ? \"off\" : \"on\"], className)}\n        {...restProps}\n      >\n        <div\n          data-testid=\"flowbite-toggleswitch-toggle\"\n          className={twMerge(\n            theme.toggle.base,\n            theme.toggle.checked.color[color],\n            theme.toggle.checked[checked ? \"on\" : \"off\"],\n            theme.toggle.sizes[sizing],\n          )}\n        />\n        {!!label?.length && (\n          <span\n            data-testid=\"flowbite-toggleswitch-label\"\n            id={`${id}-flowbite-toggleswitch-label`}\n            className={theme.root.label}\n          >\n            {label}\n          </span>\n        )}\n      </button>\n    </>\n  );\n});\n\nToggleSwitch.displayName = \"ToggleSwitch\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,YAAgB,GAAEC,UAAA,EAAAC,KAAA,EAAAC,GAAA;EAClB,MAAMC,EAAA,GAAAC,KAAQ,CAAG;EACjB,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAmB,CACpB,CAACC,iBAAa,EAAAJ,QAAY,CAAAE,KAAA,EAAAG,YAAsB,EAACT,KAAA,CAAAM,KAAW,GAC5D,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,cAAc,CAAC,EAAEX,KAAK,CAACW,UAAU,GAC5D,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,mBAAAZ,KAAA,CAAAY,UAAA,CACD;EACF,MAAI;IACAC,OAAA;IACAC,SAAQ;IACRC,KAAA,GAAM,SAAO;IACbC,MAAA,GAAQ;IACRC,QAAK;IACLC,KAAI;IACJC,IAAA;IACAC,QAAG;IACJ,GAAGC;EACJ,IAAAC,YAAS,CAAAtB,KAAW,EAAGI,QAAA,CAAAJ,KAAA,EAAAS,YAAA;EACzB,SAAIc,WAAkBA,CAAA;IACtBH,QAAA,EAAAP,OAAA;EACE;EACF,SAAQW,eAAcA,CAAAC,KAAS;IAC/B,IAAMA,KAAM,CAAAC,IAAA,WAAgB;MAC5BD,KAAA,CAAAE,cAAA;IACA;EACE;EACF,sBAAwBC,IAAA,CAAAC,QAAc,EAAE;IAAAC,QAAS,GACjD,eAAoBC,GAAA,CAAI;MAAA9B,GAAA;MAAAY,OAAA;MAAAM,IAAA;MAAAa,IAAA;MAAAlB,SAAA,EAAAR,KAAA,CAAA2B,IAAA,CAAAC,KAAA;MAAAC,QAAA;MAAAC,MAAA;IAAA,IACxB,eAAcR,IAAA,CACR,UACN;MACQ,gBAAAf,OAAsB;MACtB,iBAAQ,KAAAX,EAAA;MACRe,QAAO;MACPf,EAAA,KAAOA,EAAE,wBAAW;MACpBmC,OAAA,EAASd,WAAE;MACXe,SAAM,EAAAd,eAAQ;MACde,IAAA,UAAW;MACXC,QAAM;MACNR,IAAA,UAAW;MACXlB,SAAG,EAAA2B,OAAS,CAAAnC,KAAA,CAAA2B,IAAA,CAAAS,IAAA,EAAApC,KAAA,CAAA2B,IAAA,CAAAU,MAAA,CAAA1B,QAAA,kBAAAH,SAAA;MACZ,GAAAO,SAAU;MAClBS,QAAA,GACA,eAAiBC,GAAA,CACL,OACZ;QACc,aAAW,gCAAO;QAChCjB,SAAsB,EAAA2B,OAAO,CACbnC,KAAK,CAACsC,MAAM,CAACF,IAAA,EACbpC,KAAK,CAACsC,MAAM,CAAC/B,OAAO,CAACE,KAAA,CAAAA,KAAU,GAC/BT,KAAK,CAACsC,MAAM,CAAC/B,OAAM,CAAAA,OAAM,kBACzCP,KAAA,CAAAsC,MAAA,CAAAC,KAAA,CAAA7B,MAAA,CACA;MACW,CACD,CAAC,EACX,EAAYE,KAAA,EAAM4B,MAAA,mBAAAf,GAAA,CACN,QACZ;QACc,aAAU,+BAA6B;QACvC7B,EAAA,KAAAA,EAAS,8BAAkB;QAC3BY,SAAQ,EAAER,KAAA,CAAA2B,IAAA,CAAAf,KAAA;QACxBY,QAAA,EAAAZ;MACA,CACA;IAEA,CACG,CAAE;EACJ;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
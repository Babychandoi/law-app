{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { ButtonBase } from './ButtonBase.js';\nimport { useButtonGroupContext } from './ButtonGroupContext.js';\nimport { buttonTheme } from './theme.js';\nconst Button = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([buttonTheme, provider.theme?.button, props.theme], [get(provider.clearTheme, \"button\"), props.clearTheme], [get(provider.applyTheme, \"button\"), props.applyTheme]);\n  const {\n    children,\n    className,\n    color = \"default\",\n    disabled,\n    fullSized,\n    outline: _outline,\n    pill: _pill,\n    size = \"md\",\n    ...restProps\n  } = resolveProps(props, provider.props?.button);\n  const buttonGroup = useButtonGroupContext();\n  const outline = buttonGroup?.outline ?? _outline;\n  const pill = buttonGroup?.pill ?? _pill;\n  return /* @__PURE__ */jsx(ButtonBase, {\n    ref,\n    disabled,\n    className: twMerge(theme.base, theme.size[size], pill && theme.pill, disabled && theme.disabled, fullSized && theme.fullSized, outline ? theme.outlineColor[color] : theme.color[color], buttonGroup && theme.grouped, className),\n    ...restProps,\n    children\n  });\n});\nButton.displayName = \"Button\";\nexport { Button };","map":{"version":3,"names":["Button","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","buttonTheme","button","get","clearTheme","applyTheme","children","className","color","disabled","fullSized","outline","_outline","pill","_pill","size","restProps","resolveProps","buttonGroup","useButtonGroupContext","jsx","ButtonBase","twMerge","base","outlineColor","grouped"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Button\\Button.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ElementType } from \"react\";\nimport { forwardRef } from \"react\";\nimport type { PolymorphicComponentPropWithRef, PolymorphicRef } from \"../../helpers/generic-as-prop\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type {\n  DynamicStringEnumKeysOf,\n  FlowbiteColors,\n  FlowbiteSizes,\n  FlowbiteStateColors,\n  ThemingProps,\n} from \"../../types\";\nimport { ButtonBase } from \"./ButtonBase\";\nimport { useButtonGroupContext } from \"./ButtonGroupContext\";\nimport { buttonTheme } from \"./theme\";\n\nexport interface ButtonTheme {\n  base: string;\n  disabled: string;\n  fullSized: string;\n  grouped: string;\n  pill: string;\n  size: ButtonSizes;\n  // colors\n  color: ButtonColors;\n  outlineColor: ButtonOutlineColors;\n}\n\nexport interface ButtonColors extends Omit<FlowbiteColors, keyof FlowbiteStateColors> {\n  [key: string]: string;\n  default: string;\n  alternative: string;\n}\n\nexport interface ButtonOutlineColors extends Omit<ButtonColors, \"alternative\" | \"light\"> {\n  [key: string]: string;\n}\n\nexport interface ButtonSizes extends Pick<FlowbiteSizes, \"xs\" | \"sm\" | \"lg\" | \"xl\"> {\n  [key: string]: string;\n}\n\nexport type ButtonProps<T extends ElementType = \"button\"> = PolymorphicComponentPropWithRef<\n  T,\n  {\n    href?: string;\n    color?: DynamicStringEnumKeysOf<ButtonColors>;\n    fullSized?: boolean;\n    outline?: boolean;\n    pill?: boolean;\n    size?: DynamicStringEnumKeysOf<ButtonSizes>;\n  }\n> &\n  ThemingProps<ButtonTheme>;\n\ntype ButtonComponentType = (<C extends ElementType = \"button\">(props: ButtonProps<C>) => JSX.Element) & {\n  displayName?: string;\n};\n\nexport const Button = forwardRef(<T extends ElementType = \"button\">(props: ButtonProps<T>, ref: PolymorphicRef<T>) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [buttonTheme, provider.theme?.button, props.theme],\n    [get(provider.clearTheme, \"button\"), props.clearTheme],\n    [get(provider.applyTheme, \"button\"), props.applyTheme],\n  );\n\n  const {\n    children,\n    className,\n    color = \"default\",\n    disabled,\n    fullSized,\n    outline: _outline,\n    pill: _pill,\n    size = \"md\",\n    ...restProps\n  } = resolveProps(props, provider.props?.button);\n\n  const buttonGroup = useButtonGroupContext();\n\n  const outline = buttonGroup?.outline ?? _outline;\n  const pill = buttonGroup?.pill ?? _pill;\n\n  return (\n    <ButtonBase\n      ref={ref}\n      disabled={disabled}\n      className={twMerge(\n        theme.base,\n        theme.size[size],\n        pill && theme.pill,\n        disabled && theme.disabled,\n        fullSized && theme.fullSized,\n        outline ? theme.outlineColor[color] : theme.color[color],\n        buttonGroup && theme.grouped,\n        className,\n      )}\n      {...restProps}\n    >\n      {children}\n    </ButtonBase>\n  );\n}) as ButtonComponentType;\n\nButton.displayName = \"Button\";\n"],"mappings":";;;;;;;;;;;;AAaA,MAAEA,MAAM,GAAAC,UAAW,EAAAC,KAAA,EAAAC,GAAkB;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAWC,eAAW,CACvB,CAACC,WAAI,EAASJ,QAAA,CAAAE,KAAY,EAAAG,MAAS,EAAEP,KAAM,CAAAI,KAAA,GAC3C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,QAAQ,CAAC,EAAET,KAAK,CAACS,UAAU,GACtD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,aAAAV,KAAA,CAAAU,UAAA,CACD;EACF,MAAI;IACAC,QAAA;IACAC,SAAQ;IACRC,KAAA,GAAQ;IACRC,QAAA;IACAC,SAAS;IACTC,OAAM,EAAAC,QAAK;IACXC,IAAI,EAAAC,KAAO;IACXC,IAAG;IACJ,GAAGC;EACJ,IAAAC,YAAM,CAAWtB,KAAG,EAAAE,QAAA,CAAAF,KAAA,EAAAO,MAAuB;EAC3C,MAAMgB,WAAU,GAAAC,qBAAwB;EACxC,MAAMR,OAAO,GAAAO,WAAa,EAAAP,OAAQ,IAAKC,QAAA;EACvC,MAAAC,IAAA,GAAAK,WAAuB,EAAGL,IAAA,IAAAC,KAAA;EAC5B,OAAI,eAAUM,GAAA,CACVC,UAAA,EACJ;IACMzB,GAAA;IACAa,QAAA;IACNF,SAAc,EAAAe,OAAI,CACVvB,KAAK,CAACwB,IAAI,EACVxB,KAAI,CAAAgB,IAAI,CAAAA,IAAM,GACdF,IAAA,IAAQd,KAAI,CAAAc,IAAM,EAClBJ,QAAA,IAASV,KAAI,CAAKU,QAAC,EACnBC,SAAO,IAAGX,KAAM,CAAAW,SAAY,EAC5BC,OAAA,GAAAZ,KAAe,CAAAyB,YAAa,CAAAhB,KAAA,IAAAT,KAAA,CAAAS,KAAA,CAAAA,KAAA,GAC5BU,WAAA,IAAAnB,KAAA,CAAA0B,OAAA,EACDlB,SACD;IACA,GAAAS,SAAA;IACNV;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
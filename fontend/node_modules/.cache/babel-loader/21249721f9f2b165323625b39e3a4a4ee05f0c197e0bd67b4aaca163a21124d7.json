{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { useListItem, useMergeRefs } from '@floating-ui/react';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { ButtonBase } from '../Button/ButtonBase.js';\nimport { useDropdownContext } from './DropdownContext.js';\nimport { dropdownTheme } from './theme.js';\nconst DropdownItem = forwardRef((props, forwardedRef) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme,\n    activeIndex,\n    dismissOnClick,\n    getItemProps,\n    handleSelect\n  } = useDropdownContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([dropdownTheme.floating.item, provider.theme?.dropdown?.floating?.item, rootTheme?.floating?.item, props.theme], [get(provider.clearTheme, \"dropdown.floating.item\"), get(rootClearTheme, \"floating.item\"), props.clearTheme], [get(provider.applyTheme, \"dropdown.floating.item\"), get(rootApplyTheme, \"floating.item\"), props.applyTheme]);\n  const {\n    children,\n    className,\n    icon: Icon,\n    onClick,\n    ...restProps\n  } = resolveProps(props, provider.props?.dropdownItem);\n  const {\n    ref: listItemRef,\n    index\n  } = useListItem({\n    label: typeof children === \"string\" ? children : void 0\n  });\n  const ref = useMergeRefs([forwardedRef, listItemRef]);\n  const isActive = activeIndex === index;\n  return /* @__PURE__ */jsx(\"li\", {\n    role: \"menuitem\",\n    className: theme.container,\n    children: /* @__PURE__ */jsxs(ButtonBase, {\n      ref,\n      className: twMerge(theme.base, className),\n      ...restProps,\n      ...getItemProps({\n        onClick: () => {\n          onClick?.();\n          dismissOnClick && handleSelect(null);\n        }\n      }),\n      tabIndex: isActive ? 0 : -1,\n      children: [Icon && /* @__PURE__ */jsx(Icon, {\n        className: theme.icon\n      }), children]\n    })\n  });\n});\nDropdownItem.displayName = \"DropdownItem\";\nexport { DropdownItem };","map":{"version":3,"names":["DropdownItem","forwardRef","props","forwardedRef","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","activeIndex","dismissOnClick","getItemProps","handleSelect","useDropdownContext","provider","useThemeProvider","useResolveTheme","dropdownTheme","floating","item","dropdown","get","children","className","icon","Icon","onClick","restProps","resolveProps","dropdownItem","ref","listItemRef","index","useListItem","label","useMergeRefs","isActive","jsx","role","container","jsxs","ButtonBase","twMerge","base","tabIndex"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Dropdown\\DropdownItem.tsx"],"sourcesContent":["\"use client\";\n\nimport { useListItem, useMergeRefs } from \"@floating-ui/react\";\nimport { forwardRef, type ComponentProps, type ElementType, type FC, type RefCallback } from \"react\";\nimport type { PolymorphicComponentPropWithRef, PolymorphicRef } from \"../../helpers/generic-as-prop\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { ButtonBase } from \"../Button/ButtonBase\";\nimport { useDropdownContext } from \"./DropdownContext\";\nimport { dropdownTheme } from \"./theme\";\n\nexport interface DropdownItemTheme {\n  container: string;\n  base: string;\n  icon: string;\n}\n\nexport type DropdownItemProps<T extends ElementType = \"button\"> = PolymorphicComponentPropWithRef<\n  T,\n  {\n    href?: string;\n    icon?: FC<ComponentProps<\"svg\">>;\n    onClick?: () => void;\n  }\n> &\n  ThemingProps<DropdownItemTheme>;\n\ntype DropdownItemType = (<C extends ElementType = \"button\">(props: DropdownItemProps<C>) => JSX.Element) & {\n  displayName?: string;\n};\n\nexport const DropdownItem = forwardRef(\n  <T extends ElementType = \"button\">(props: DropdownItemProps<T>, forwardedRef: PolymorphicRef<T>) => {\n    const {\n      theme: rootTheme,\n      clearTheme: rootClearTheme,\n      applyTheme: rootApplyTheme,\n      activeIndex,\n      dismissOnClick,\n      getItemProps,\n      handleSelect,\n    } = useDropdownContext();\n\n    const provider = useThemeProvider();\n    const theme = useResolveTheme(\n      [dropdownTheme.floating.item, provider.theme?.dropdown?.floating?.item, rootTheme?.floating?.item, props.theme],\n      [get(provider.clearTheme, \"dropdown.floating.item\"), get(rootClearTheme, \"floating.item\"), props.clearTheme],\n      [get(provider.applyTheme, \"dropdown.floating.item\"), get(rootApplyTheme, \"floating.item\"), props.applyTheme],\n    );\n\n    const {\n      children,\n      className,\n      icon: Icon,\n      onClick,\n      ...restProps\n    } = resolveProps(props, provider.props?.dropdownItem);\n\n    const { ref: listItemRef, index } = useListItem({ label: typeof children === \"string\" ? children : undefined });\n    const ref = useMergeRefs([forwardedRef, listItemRef]);\n    const isActive = activeIndex === index;\n\n    return (\n      <li role=\"menuitem\" className={theme.container}>\n        <ButtonBase\n          ref={ref as RefCallback<T>}\n          className={twMerge(theme.base, className)}\n          {...restProps}\n          {...getItemProps({\n            onClick: () => {\n              onClick?.();\n              dismissOnClick && handleSelect(null);\n            },\n          })}\n          tabIndex={isActive ? 0 : -1}\n        >\n          {Icon && <Icon className={theme.icon} />}\n          {children}\n        </ButtonBase>\n      </li>\n    );\n  },\n) as DropdownItemType;\n\nDropdownItem.displayName = \"DropdownItem\";\n"],"mappings":";;;;;;;;;;;;;AAcA,MAAGA,YAAO,GAAAC,UAAiB,CAC3B,CAAAC,KAAI,EAAMC,YAAA;EACV,MAAM;IACAC,KAAA,EAAAC,SAAY;IACZC,UAAU,EAAEC,cAAc;IAC1BC,UAAA,EAAWC,cAAA;IACXC,WAAA;IACAC,cAAY;IACZC,YAAA;IACDC;EACD,IAAAC,kBAAiB;EACjB,MAAMC,QAAQ,GAAAC,gBAAe;EACjC,MAAOZ,KAAA,GAAAa,eAAuB,CACxB,CAACC,aAAa,CAAAC,QAAA,CAAUC,IAAE,EAAAL,QAAA,CAAAX,KAAA,EAAAiB,QAA2B,EAAGF,QAAC,EAAAC,IAAA,EAAcf,SAAE,EAAAc,QAAkB,EAAAC,IAAM,EAAAlB,KAAA,CAAAE,KAAW,GAC5G,CAACkB,GAAG,CAACP,QAAQ,CAACT,UAAU,EAAE,wBAAwB,CAAC,EAAEgB,GAAG,CAACf,cAAc,EAAE,eAAe,CAAC,EAAEL,KAAK,CAACI,UAAU,GAC5G,CAAAgB,GAAA,CAAAP,QAAA,CAAAP,UAAA,6BAAAc,GAAA,CAAAb,cAAA,oBAAAP,KAAA,CAAAM,UAAA,CACD;EACJ,MAAM;IACAe,QAAA;IACAC,SAAM;IACNC,IAAA,EAAAC,IAAO;IACPC,OAAG;IACJ,GAAGC;EACJ,IAAAC,YAAa,CAAA3B,KAAA,EAAWa,QAAO,CAAEb,KAAG,EAAA4B,YAAc;EAClD,MAAM;IAAAC,GAAG,EAAGC,WAAY;IAAEC;EAAA,IAAAC,WAAc;IAAAC,KAAa,SAAAZ,QAAA,gBAAAA,QAAA;EAAA;EACrD,MAAMQ,GAAA,GAAAK,YAAW,EAAAjC,YAAqB,EAAA6B,WAAA;EACtC,MAAAK,QAAA,GAAA3B,WAA2B,KAAMuB,KAAE;EACvC,OAAM,eAAUK,GAAA;IAAAC,IAAA;IAAAf,SAAA,EAAApB,KAAA,CAAAoC,SAAA;IAAAjB,QAAA,iBAAAkB,IAAA,CACVC,UAAA,EACN;MACQX,GAAA;MACAP,SAAG,EAAAmB,OAAS,CAAAvC,KAAA,CAAAwC,IAAA,EAAApB,SAAA;MACZ,GAAGI,SAAA;MACX,GAAUhB,YAAS;QACnBe,OAAY,EAAOA,CAAA,KAAI;UACXA,OAAA;UACZhB,cAAA,IAAAE,YAAA;QACU;MACF;MACAgC,QAAQ,EAAER,QAAA;MAClBd,QAAc,GACJG,IAAA,mBAAAY,GAAA,CAAAZ,IAAA;QAAAF,SAAA,EAAApB,KAAA,CAAAqB;MAAA,IACVF,QAAA;IAEK,CACL;EAAA;AACA,CACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
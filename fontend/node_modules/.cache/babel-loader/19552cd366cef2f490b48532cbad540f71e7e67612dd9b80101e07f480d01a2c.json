{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { checkboxTheme } from './theme.js';\nconst Checkbox = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([checkboxTheme, provider.theme?.checkbox, props.theme], [get(provider.clearTheme, \"checkbox\"), props.clearTheme], [get(provider.applyTheme, \"checkbox\"), props.applyTheme]);\n  const {\n    className,\n    color = \"default\",\n    indeterminate,\n    ...restProps\n  } = resolveProps(props, provider.props?.checkbox);\n  return /* @__PURE__ */jsx(\"input\", {\n    ref,\n    type: \"checkbox\",\n    className: twMerge(theme.base, theme.color[color], indeterminate && theme.indeterminate, className),\n    ...restProps\n  });\n});\nCheckbox.displayName = \"Checkbox\";\nexport { Checkbox };","map":{"version":3,"names":["Checkbox","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","checkboxTheme","checkbox","get","clearTheme","applyTheme","className","color","indeterminate","restProps","resolveProps","jsx","type","twMerge","base"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Checkbox\\Checkbox.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps } from \"react\";\nimport { forwardRef } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { DynamicStringEnumKeysOf, FlowbiteColors, ThemingProps } from \"../../types\";\nimport { checkboxTheme } from \"./theme\";\n\nexport interface CheckboxTheme {\n  base: string;\n  color: FlowbiteColors;\n  indeterminate: string;\n}\n\nexport interface CheckboxProps\n  extends Omit<ComponentProps<\"input\">, \"type\" | \"ref\" | \"color\">,\n    ThemingProps<CheckboxTheme> {\n  color?: DynamicStringEnumKeysOf<FlowbiteColors>;\n  indeterminate?: boolean;\n}\n\nexport const Checkbox = forwardRef<HTMLInputElement, CheckboxProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [checkboxTheme, provider.theme?.checkbox, props.theme],\n    [get(provider.clearTheme, \"checkbox\"), props.clearTheme],\n    [get(provider.applyTheme, \"checkbox\"), props.applyTheme],\n  );\n\n  const { className, color = \"default\", indeterminate, ...restProps } = resolveProps(props, provider.props?.checkbox);\n\n  return (\n    <input\n      ref={ref}\n      type=\"checkbox\"\n      className={twMerge(theme.base, theme.color[color], indeterminate && theme.indeterminate, className)}\n      {...restProps}\n    />\n  );\n});\n\nCheckbox.displayName = \"Checkbox\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,QAAM,GAAQC,UAAG,EAAAC,KAAA,EAAgBC,GAAE;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAwB,CACzB,CAACC,aAAa,EAAAJ,QAAU,CAAAE,KAAE,EAAAG,QAAa,EAAAP,KAAM,CAAAI,KAAA,GAC7C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,UAAU,CAAC,EAAET,KAAK,CAACS,UAAU,GACxD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,eAAAV,KAAA,CAAAU,UAAA,CACD;EACA;IAAAC,SAAA;IAAAC,KAAuB,GAAG;IAAAC,aAAA;IAAA,GAAAC;EAAA,IAAAC,YAAA,CAAAf,KAAA,EAAAE,QAAA,CAAAF,KAAA,EAAAO,QAAA;EAC5B,OAAI,eAAOS,GAAA,CACP,SACJ;IACMf,GAAA;IACAgB,IAAA,YAAW;IACXN,SAAG,EAAAO,OAAA,CAAAd,KAAA,CAAAe,IAAA,EAAAf,KAAA,CAAAQ,KAAA,CAAAA,KAAA,GAAAC,aAAA,IAAAT,KAAA,CAAAS,aAAA,EAAAF,SAAA;IACT,GAAAG;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useGoogleMap.ts\nimport { useState, useCallback, useMemo } from 'react';\nimport { generateMapUrl } from '../utils/GoogleMap.utils';\nexport const useGoogleMap = ({\n  initialCoordinates = {\n    lat: 21.0036983,\n    lng: 105.7919108\n  },\n  initialZoom = 14,\n  initialLanguage = 'en',\n  initialMapType = 'roadmap',\n  initialLabel = 'Location'\n} = {}) => {\n  _s();\n  // State management\n  const [coordinates, setCoordinates] = useState(initialCoordinates);\n  const [zoom, setZoom] = useState(initialZoom);\n  const [language, setLanguage] = useState(initialLanguage);\n  const [mapType, setMapType] = useState(initialMapType);\n  const [label, setLabel] = useState(initialLabel);\n  const [loading, setLoading] = useState(false);\n\n  // Generate map URL\n  const mapUrl = useMemo(() => generateMapUrl(coordinates, 600, language, label, mapType, zoom), [coordinates, language, label, mapType, zoom]);\n\n  // Action handlers\n  const updateLocation = useCallback((newCoordinates, newLabel) => {\n    setCoordinates(newCoordinates);\n    if (newLabel) setLabel(newLabel);\n  }, []);\n  const updateMapSettings = useCallback(settings => {\n    if (settings.zoom !== undefined) setZoom(settings.zoom);\n    if (settings.language !== undefined) setLanguage(settings.language);\n    if (settings.mapType !== undefined) setMapType(settings.mapType);\n  }, []);\n  const resetToDefault = useCallback(() => {\n    setCoordinates(initialCoordinates);\n    setZoom(initialZoom);\n    setLanguage(initialLanguage);\n    setMapType(initialMapType);\n    setLabel(initialLabel);\n  }, [initialCoordinates, initialZoom, initialLanguage, initialMapType, initialLabel]);\n\n  // Utility functions\n  const zoomIn = useCallback(() => setZoom(prev => Math.min(prev + 1, 20)), []);\n  const zoomOut = useCallback(() => setZoom(prev => Math.max(prev - 1, 1)), []);\n  return {\n    // State\n    coordinates,\n    zoom,\n    language,\n    mapType,\n    label,\n    loading,\n    mapUrl,\n    // Actions\n    setCoordinates,\n    setZoom,\n    setLanguage,\n    setMapType,\n    setLabel,\n    setLoading,\n    updateLocation,\n    updateMapSettings,\n    resetToDefault,\n    zoomIn,\n    zoomOut\n  };\n};\n_s(useGoogleMap, \"oB5zrfJdBZZhhCgdjv44AYiek8I=\");","map":{"version":3,"names":["useState","useCallback","useMemo","generateMapUrl","useGoogleMap","initialCoordinates","lat","lng","initialZoom","initialLanguage","initialMapType","initialLabel","_s","coordinates","setCoordinates","zoom","setZoom","language","setLanguage","mapType","setMapType","label","setLabel","loading","setLoading","mapUrl","updateLocation","newCoordinates","newLabel","updateMapSettings","settings","undefined","resetToDefault","zoomIn","prev","Math","min","zoomOut","max"],"sources":["D:/ATWON/law-app/src/page/contact/googleMap/hooks/useGoogleMap.ts"],"sourcesContent":["// hooks/useGoogleMap.ts\r\nimport { useState, useCallback, useMemo } from 'react';\r\nimport { Coordinates, MapLanguage, MapType } from '../types/GoogleMap.types';\r\nimport { generateMapUrl } from '../utils/GoogleMap.utils';\r\n\r\ninterface UseGoogleMapProps {\r\n  initialCoordinates?: Coordinates;\r\n  initialZoom?: number;\r\n  initialLanguage?: MapLanguage;\r\n  initialMapType?: MapType;\r\n  initialLabel?: string;\r\n}\r\n\r\nexport const useGoogleMap = ({\r\n  initialCoordinates = { lat: 21.0036983, lng: 105.7919108 },\r\n  initialZoom = 14,\r\n  initialLanguage = 'en',\r\n  initialMapType = 'roadmap',\r\n  initialLabel = 'Location'\r\n}: UseGoogleMapProps = {}) => {\r\n  // State management\r\n  const [coordinates, setCoordinates] = useState<Coordinates>(initialCoordinates);\r\n  const [zoom, setZoom] = useState<number>(initialZoom);\r\n  const [language, setLanguage] = useState<MapLanguage>(initialLanguage);\r\n  const [mapType, setMapType] = useState<MapType>(initialMapType);\r\n  const [label, setLabel] = useState<string>(initialLabel);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  // Generate map URL\r\n  const mapUrl = useMemo(() => \r\n    generateMapUrl(coordinates, 600, language, label, mapType, zoom),\r\n    [coordinates, language, label, mapType, zoom]\r\n  );\r\n\r\n  // Action handlers\r\n  const updateLocation = useCallback((newCoordinates: Coordinates, newLabel?: string) => {\r\n    setCoordinates(newCoordinates);\r\n    if (newLabel) setLabel(newLabel);\r\n  }, []);\r\n\r\n  const updateMapSettings = useCallback((settings: {\r\n    zoom?: number;\r\n    language?: MapLanguage;\r\n    mapType?: MapType;\r\n  }) => {\r\n    if (settings.zoom !== undefined) setZoom(settings.zoom);\r\n    if (settings.language !== undefined) setLanguage(settings.language);\r\n    if (settings.mapType !== undefined) setMapType(settings.mapType);\r\n  }, []);\r\n\r\n  const resetToDefault = useCallback(() => {\r\n    setCoordinates(initialCoordinates);\r\n    setZoom(initialZoom);\r\n    setLanguage(initialLanguage);\r\n    setMapType(initialMapType);\r\n    setLabel(initialLabel);\r\n  }, [initialCoordinates, initialZoom, initialLanguage, initialMapType, initialLabel]);\r\n\r\n  // Utility functions\r\n  const zoomIn = useCallback(() => setZoom(prev => Math.min(prev + 1, 20)), []);\r\n  const zoomOut = useCallback(() => setZoom(prev => Math.max(prev - 1, 1)), []);\r\n\r\n  return {\r\n    // State\r\n    coordinates,\r\n    zoom,\r\n    language,\r\n    mapType,\r\n    label,\r\n    loading,\r\n    mapUrl,\r\n    \r\n    // Actions\r\n    setCoordinates,\r\n    setZoom,\r\n    setLanguage,\r\n    setMapType,\r\n    setLabel,\r\n    setLoading,\r\n    updateLocation,\r\n    updateMapSettings,\r\n    resetToDefault,\r\n    zoomIn,\r\n    zoomOut\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
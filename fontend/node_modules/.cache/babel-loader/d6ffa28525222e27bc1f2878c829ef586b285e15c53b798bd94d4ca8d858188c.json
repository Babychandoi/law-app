{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { StarIcon } from '../../icons/star-icon.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useRatingContext } from './RatingContext.js';\nimport { ratingTheme } from './theme.js';\nconst RatingStar = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme,\n    size = \"sm\"\n  } = useRatingContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([ratingTheme.star, provider.theme?.rating?.star, rootTheme?.star, props.theme], [get(provider.clearTheme, \"rating.star\"), get(rootClearTheme, \"star\"), props.clearTheme], [get(provider.applyTheme, \"rating.star\"), get(rootApplyTheme, \"star\"), props.applyTheme]);\n  const {\n    className,\n    filled = true,\n    starIcon: Icon = StarIcon,\n    ...restProps\n  } = resolveProps(props, provider.props?.ratingStar);\n  return /* @__PURE__ */jsx(Icon, {\n    ref,\n    \"data-testid\": \"flowbite-rating-star\",\n    className: twMerge(theme.sizes[size], theme[filled ? \"filled\" : \"empty\"], className),\n    ...restProps\n  });\n});\nRatingStar.displayName = \"RatingStar\";\nexport { RatingStar };","map":{"version":3,"names":["RatingStar","forwardRef","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","size","useRatingContext","provider","useThemeProvider","useResolveTheme","ratingTheme","star","rating","get","className","filled","starIcon","Icon","StarIcon","restProps","resolveProps","ratingStar","jsx","twMerge","sizes"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Rating\\RatingStar.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps, type FC } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { StarIcon } from \"../../icons/star-icon\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { FlowbiteSizes, ThemingProps } from \"../../types\";\nimport { useRatingContext } from \"./RatingContext\";\nimport { ratingTheme } from \"./theme\";\n\nexport interface RatingStarTheme {\n  empty: string;\n  filled: string;\n  sizes: RatingStarSizes;\n}\n\nexport interface RatingStarSizes extends Pick<FlowbiteSizes, \"sm\" | \"md\" | \"lg\"> {\n  [key: string]: string;\n}\n\nexport interface RatingStarProps extends ComponentProps<\"svg\">, ThemingProps<RatingStarTheme> {\n  filled?: boolean;\n  starIcon?: FC<ComponentProps<\"svg\">>;\n}\n\nexport const RatingStar = forwardRef<SVGSVGElement, RatingStarProps>((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme, size = \"sm\" } = useRatingContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [ratingTheme.star, provider.theme?.rating?.star, rootTheme?.star, props.theme],\n    [get(provider.clearTheme, \"rating.star\"), get(rootClearTheme, \"star\"), props.clearTheme],\n    [get(provider.applyTheme, \"rating.star\"), get(rootApplyTheme, \"star\"), props.applyTheme],\n  );\n\n  const {\n    className,\n    filled = true,\n    starIcon: Icon = StarIcon,\n    ...restProps\n  } = resolveProps(props, provider.props?.ratingStar);\n\n  return (\n    <Icon\n      ref={ref}\n      data-testid=\"flowbite-rating-star\"\n      className={twMerge(theme.sizes[size], theme[filled ? \"filled\" : \"empty\"], className)}\n      {...restProps}\n    />\n  );\n});\n\nRatingStar.displayName = \"RatingStar\";\n"],"mappings":";;;;;;;;;;;;AAaA,MAAEA,UAAa,GAAEC,UAAW,EAAAC,KAAA,EAAUC,GAAE;EACtC,MAAM;IAAAC,KAAA,EAAQC,SAAG;IAAAC,UAAkB,EAAAC,cAAA;IAAAC,UAAA,EAAAC,cAAA;IAAAC,IAAA;EAAA,IAAAC,gBAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKT,KAAA,GAAWU,eAAe,CAC3B,CAACC,WAAI,CAAQC,IAAC,EAAAJ,QAAY,CAAAR,KAAA,EAAAa,MAAc,EAAED,IAAI,EAAAX,SAAA,EAAcW,IAAE,EAAAd,KAAS,CAAAE,KAAM,GAC7E,CAACc,GAAG,CAACN,QAAQ,CAACN,UAAU,EAAE,aAAa,CAAC,EAAEY,GAAG,CAACX,cAAc,EAAE,MAAM,CAAC,EAAEL,KAAK,CAACI,UAAU,GACxF,CAAAY,GAAA,CAAAN,QAAA,CAAAJ,UAAA,kBAAAU,GAAA,CAAAT,cAAA,WAAAP,KAAA,CAAAM,UAAA,CACD;EACF,MAAI;IACAW,SAAS;IACTC,MAAA,GAAQ,IAAE;IACVC,QAAG,EAAAC,IAAA,GAAAC,QAAA;IACJ,GAAGC;EACJ,IAAAC,YAAA,CAAAvB,KAAA,EAAuBU,QAAG,CAAAV,KAAA,EAAAwB,UAAA;EAC5B,OAAQ,eAAAC,GAAA,CACJL,IAAA,EACJ;IACMnB,GAAA;IACA,aAAW,wBAAyB;IACpCgB,SAAG,EAAAS,OAAA,CAAAxB,KAAA,CAAAyB,KAAA,CAAAnB,IAAA,GAAAN,KAAA,CAAAgB,MAAA,wBAAAD,SAAA;IACT,GAAAK;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
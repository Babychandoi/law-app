{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useState, useId, useRef, useEffect } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { Dropdown } from '../Dropdown/Dropdown.js';\nimport '../Dropdown/DropdownContext.js';\nimport '../Dropdown/DropdownDivider.js';\nimport '../Dropdown/DropdownHeader.js';\nimport '../Dropdown/DropdownItem.js';\nimport { megaMenuTheme } from './theme.js';\nfunction MegaMenuDropdown(props) {\n  const [labelledBy, setLabelledBy] = useState(void 0);\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([megaMenuTheme.dropdown, provider.theme?.megaMenu?.dropdown, props.theme], [get(provider.clearTheme, \"megaMenu.dropdown\"), props.clearTheme], [get(provider.applyTheme, \"megaMenu.dropdown\"), props.applyTheme]);\n  const {\n    children,\n    className,\n    toggle,\n    ...restProps\n  } = resolveProps(props, provider.props?.megaMenuDropdown);\n  if (toggle) {\n    return /* @__PURE__ */jsx(Dropdown, {\n      inline: true,\n      label: toggle,\n      placement: \"bottom\",\n      theme: theme.toggle,\n      className: twMerge(theme.base, className),\n      children\n    });\n  }\n  const id = useId();\n  const ref = useRef(null);\n  useEffect(() => {\n    const toggle2 = ref.current?.closest(\"nav\")?.querySelector('[aria-haspopup=\"menu\"]');\n    setLabelledBy(toggle2?.id);\n  }, []);\n  return /* @__PURE__ */jsx(\"div\", {\n    \"aria-labelledby\": labelledBy,\n    id,\n    ref,\n    role: \"menu\",\n    className: twMerge(theme.base, className),\n    ...restProps,\n    children\n  });\n}\nMegaMenuDropdown.displayName = \"MegaMenuDropdown\";\nexport { MegaMenuDropdown };","map":{"version":3,"names":["MegaMenuDropdown","props","labelledBy","setLabelledBy","useState","provider","useThemeProvider","theme","useResolveTheme","megaMenuTheme","dropdown","megaMenu","get","clearTheme","applyTheme","children","className","toggle","restProps","resolveProps","megaMenuDropdown","jsx","Dropdown","inline","label","placement","twMerge","base","id","useId","ref","useRef","useEffect","toggle2","current","closest","querySelector","role"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\MegaMenu\\MegaMenuDropdown.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useId, useRef, useState, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { Dropdown, type DropdownTheme } from \"../Dropdown\";\nimport { megaMenuTheme } from \"./theme\";\n\nexport interface MegaMenuDropdownTheme {\n  base: string;\n  toggle: DropdownTheme;\n}\n\nexport interface MegaMenuDropdownProps extends ComponentProps<\"div\">, ThemingProps<MegaMenuDropdownTheme> {\n  toggle?: JSX.Element;\n}\n\nexport function MegaMenuDropdown(props: MegaMenuDropdownProps) {\n  const [labelledBy, setLabelledBy] = useState<string | undefined>(undefined);\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [megaMenuTheme.dropdown, provider.theme?.megaMenu?.dropdown, props.theme],\n    [get(provider.clearTheme, \"megaMenu.dropdown\"), props.clearTheme],\n    [get(provider.applyTheme, \"megaMenu.dropdown\"), props.applyTheme],\n  );\n\n  const { children, className, toggle, ...restProps } = resolveProps(props, provider.props?.megaMenuDropdown);\n\n  if (toggle) {\n    return (\n      <Dropdown\n        inline\n        label={toggle}\n        placement=\"bottom\"\n        theme={theme.toggle}\n        className={twMerge(theme.base, className)}\n      >\n        {children}\n      </Dropdown>\n    );\n  }\n\n  const id = useId();\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const toggle = ref.current?.closest(\"nav\")?.querySelector('[aria-haspopup=\"menu\"]');\n    setLabelledBy(toggle?.id);\n  }, []);\n\n  return (\n    <div\n      aria-labelledby={labelledBy}\n      id={id}\n      ref={ref}\n      role=\"menu\"\n      className={twMerge(theme.base, className)}\n      {...restProps}\n    >\n      {children}\n    </div>\n  );\n}\n\nMegaMenuDropdown.displayName = \"MegaMenuDropdown\";\n"],"mappings":";;;;;;;;;;;;;;;AAYA,SAASA,gBAAYA,CAAAC,KAAA;EACnB,MAAM,CAAAC,UAAW,EAAAC,aAAA,CAAgB,GAAEC,QAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAwB,CACzB,CAACC,aAAa,CAAAC,QAAA,EAAUL,QAAE,CAAAE,KAAA,EAAAI,QAAsB,EAAAD,QAAM,EAAAT,KAAW,CAAAM,KAAA,GACjE,CAACK,GAAG,CAACP,QAAQ,CAACQ,UAAU,EAAE,mBAAmB,CAAC,EAAEZ,KAAK,CAACY,UAAU,GACjE,CAAAD,GAAA,CAAAP,QAAA,CAAAS,UAAA,wBAAAb,KAAA,CAAAa,UAAA,CACD;EACA,MAAI;IAAAC,QAAQ;IAAAC,SAAA;IAAAC,MAAA;IAAA,GAAAC;EAAA,IAAAC,YAAA,CAAAlB,KAAA,EAAAI,QAAA,CAAAJ,KAAA,EAAAmB,gBAAA;EACd,IAAIH,MAAA;IACJ,OAAM,eAAQI,GAAA,CACRC,QAAA,EACN;MACQC,MAAK,EAAE;MACPC,KAAA,EAAAP,MAAW;MACXQ,SAAO,UAAY;MACnBlB,KAAA,EAAAA,KAAW,CAAAU,MAAQ;MACnBD,SAAA,EAAAU,OAAA,CAAAnB,KAAA,CAAAoB,IAAA,EAAAX,SAAA;MACRD;IACK,CACL;EACE;EACA,MAAMa,EAAA,GAAGC,KAAG,EAAM;EAClB,MAAAC,GAAS,GAACC,MAAM;EAClBC,SAAU,OAAO;IACb,MAAAC,OAAa,GAACH,GAAA,CAAAI,OAAY,EAAAC,OAAA,SAAAC,aAAA;IAC3BjC,aAAK,CAAA8B,OAAA,EAAAL,EAAA;EACN;EACF,OAAS,eAAAP,GAAA,CACL,OACJ;IACM,iBAAE,EAAAnB,UAAA;IACF0B,EAAA;IACAE,GAAA;IACAO,IAAA,QAAW;IACXrB,SAAG,EAAAU,OAAS,CAAAnB,KAAA,CAAAoB,IAAA,EAAAX,SAAA;IACZ,GAAAE,SAAA;IACNH;EACG,CACH;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
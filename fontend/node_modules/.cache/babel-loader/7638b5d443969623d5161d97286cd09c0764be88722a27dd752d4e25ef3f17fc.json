{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { timelineTheme } from './theme.js';\nimport { useTimelineContext } from './TimelineContext.js';\nimport { TimelineItemContext } from './TimelineItemContext.js';\nconst TimelineItem = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme,\n    horizontal\n  } = useTimelineContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([timelineTheme.item, provider.theme?.timeline?.item, rootTheme?.item, props.theme], [get(provider.clearTheme, \"timeline.item\"), get(rootClearTheme, \"item\"), props.clearTheme], [get(provider.applyTheme, \"timeline.item\"), get(rootApplyTheme, \"item\"), props.applyTheme]);\n  const {\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.timelineItem);\n  return /* @__PURE__ */jsx(TimelineItemContext.Provider, {\n    value: {\n      theme: props.theme,\n      clearTheme: props.clearTheme,\n      applyTheme: props.applyTheme\n    },\n    children: /* @__PURE__ */jsx(\"li\", {\n      ref,\n      \"data-testid\": \"timeline-item\",\n      className: twMerge(horizontal && theme.root.horizontal, !horizontal && theme.root.vertical, className),\n      ...restProps\n    })\n  });\n});\nTimelineItem.displayName = \"TimelineItem\";\nexport { TimelineItem };","map":{"version":3,"names":["TimelineItem","forwardRef","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","horizontal","useTimelineContext","provider","useThemeProvider","useResolveTheme","timelineTheme","item","timeline","get","className","restProps","resolveProps","timelineItem","jsx","TimelineItemContext","Provider","value","children","twMerge","root","vertical"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Timeline\\TimelineItem.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { timelineTheme } from \"./theme\";\nimport type { TimelineContentTheme } from \"./TimelineContent\";\nimport { useTimelineContext } from \"./TimelineContext\";\nimport { TimelineItemContext } from \"./TimelineItemContext\";\nimport type { TimelinePointTheme } from \"./TimelinePoint\";\n\nexport interface TimelineItemTheme {\n  root: {\n    horizontal: string;\n    vertical: string;\n  };\n  content: TimelineContentTheme;\n  point: TimelinePointTheme;\n}\n\nexport interface TimelineItemProps extends ComponentProps<\"li\">, ThemingProps<TimelineItemTheme> {}\n\nexport const TimelineItem = forwardRef<HTMLLIElement, TimelineItemProps>((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme, horizontal } = useTimelineContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [timelineTheme.item, provider.theme?.timeline?.item, rootTheme?.item, props.theme],\n    [get(provider.clearTheme, \"timeline.item\"), get(rootClearTheme, \"item\"), props.clearTheme],\n    [get(provider.applyTheme, \"timeline.item\"), get(rootApplyTheme, \"item\"), props.applyTheme],\n  );\n\n  const { className, ...restProps } = resolveProps(props, provider.props?.timelineItem);\n\n  return (\n    <TimelineItemContext.Provider\n      value={{ theme: props.theme, clearTheme: props.clearTheme, applyTheme: props.applyTheme }}\n    >\n      <li\n        ref={ref}\n        data-testid=\"timeline-item\"\n        className={twMerge(horizontal && theme.root.horizontal, !horizontal && theme.root.vertical, className)}\n        {...restProps}\n      />\n    </TimelineItemContext.Provider>\n  );\n});\n\nTimelineItem.displayName = \"TimelineItem\";\n"],"mappings":";;;;;;;;;;;;AAaA,MAAEA,YAAe,GAAAC,UAAW,EAAAC,KAAU,EAAEC,GAAA;EACtC,MAAM;IAAAC,KAAA,EAAQC,SAAG;IAAAC,UAAkB,EAAAC,cAAA;IAAAC,UAAA,EAAAC,cAAA;IAAAC;EAAA,IAAAC,kBAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKT,KAAA,GAAAU,eAAoB,CACrB,CAACC,aAAa,CAAAC,IAAA,EAAAJ,QAAY,CAAAR,KAAA,EAAAa,QAAkB,EAAGD,IAAC,EAAAX,SAAc,EAAEW,IAAA,EAAMd,KAAG,CAAAE,KAAM,GAC/E,CAACc,GAAG,CAACN,QAAQ,CAACN,UAAU,EAAE,eAAe,CAAC,EAAEY,GAAG,CAACX,cAAc,EAAE,MAAM,CAAC,EAAEL,KAAK,CAACI,UAAU,GAC1F,CAAAY,GAAA,CAAAN,QAAA,CAAAJ,UAAA,oBAAAU,GAAA,CAAAT,cAAA,WAAAP,KAAA,CAAAM,UAAA,CACD;EACA;IAAAW,SAAA;IAAA,GAAAC;EAA0B,IAAAC,YAAA,CAAAnB,KAAA,EAAAU,QAAA,CAAAV,KAAA,EAAAoB,YAAA;EAC5B,OAAI,eAAoBC,GAAA,CACpBC,mBAAA,CAAAC,QAAA,EACJ;IACMC,KAAA;MAAQtB,KAAA,EAAAF,KAAA,CAAAE,KAAkB;MAAGE,UAAA,EAAAJ,KAAA,CAAAI,UAAA;MAAAE,UAAA,EAAAN,KAAA,CAAAM;IAAA;IACnCmB,QAAY,iBAAAJ,GAAA,CACJ,MACR;MACUpB,GAAA;MACA,aAAW,iBAAkB;MAC7BgB,SAAG,EAAAS,OAAA,CAAAlB,UAAA,IAAAN,KAAA,CAAAyB,IAAA,CAAAnB,UAAA,GAAAA,UAAA,IAAAN,KAAA,CAAAyB,IAAA,CAAAC,QAAA,EAAAX,SAAA;MACb,GAAAC;IACA,CACA;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsxs, Fragment, jsx } from 'react/jsx-runtime';\nimport { twMerge } from '../../../helpers/tailwind-merge.js';\nimport { useDatePickerContext } from '../DatepickerContext.js';\nimport { getWeekDays, getFirstDayOfTheMonth, addDays, getFormattedDate, isDateEqual, isDateInRange } from '../helpers.js';\nfunction DatepickerViewsDays() {\n  const {\n    theme: rootTheme,\n    weekStart,\n    minDate,\n    maxDate,\n    viewDate,\n    selectedDate,\n    changeSelectedDate,\n    language\n  } = useDatePickerContext();\n  const theme = rootTheme.views.days;\n  const weekDays = getWeekDays(language, weekStart);\n  const startDate = getFirstDayOfTheMonth(viewDate, weekStart);\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(\"div\", {\n      className: theme.header.base,\n      children: weekDays.map((day, index) => /* @__PURE__ */jsx(\"span\", {\n        className: theme.header.title,\n        children: day\n      }, index))\n    }), /* @__PURE__ */jsx(\"div\", {\n      className: theme.items.base,\n      children: [...Array(42)].map((_date, index) => {\n        const currentDate = addDays(startDate, index);\n        const day = getFormattedDate(language, currentDate, {\n          day: \"numeric\"\n        });\n        const isSelected = selectedDate && isDateEqual(selectedDate, currentDate);\n        const isDisabled = !isDateInRange(currentDate, minDate, maxDate);\n        return /* @__PURE__ */jsx(\"button\", {\n          disabled: isDisabled,\n          type: \"button\",\n          className: twMerge(theme.items.item.base, isSelected && theme.items.item.selected, isDisabled && theme.items.item.disabled),\n          onClick: () => {\n            if (isDisabled) return;\n            changeSelectedDate(currentDate, true);\n          },\n          children: day\n        }, index);\n      })\n    })]\n  });\n}\nDatepickerViewsDays.displayName = \"DatepickerViewsDays\";\nexport { DatepickerViewsDays };","map":{"version":3,"names":["DatepickerViewsDays","theme","rootTheme","weekStart","minDate","maxDate","viewDate","selectedDate","changeSelectedDate","language","useDatePickerContext","views","days","weekDays","getWeekDays","startDate","getFirstDayOfTheMonth","jsxs","Fragment","children","jsx","className","header","base","map","day","index","title","items","Array","_date","currentDate","addDays","getFormattedDate","isSelected","isDateEqual","isDisabled","isDateInRange","disabled","type","twMerge","item","selected","onClick"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Datepicker\\Views\\Days.tsx"],"sourcesContent":["\"use client\";\n\nimport { twMerge } from \"../../../helpers/tailwind-merge\";\nimport { useDatePickerContext } from \"../DatepickerContext\";\nimport { addDays, getFirstDayOfTheMonth, getFormattedDate, getWeekDays, isDateEqual, isDateInRange } from \"../helpers\";\n\nexport interface DatepickerViewsDaysTheme {\n  header: {\n    base: string;\n    title: string;\n  };\n  items: {\n    base: string;\n    item: {\n      base: string;\n      selected: string;\n      disabled: string;\n    };\n  };\n}\n\nexport function DatepickerViewsDays() {\n  const {\n    theme: rootTheme,\n    weekStart,\n    minDate,\n    maxDate,\n    viewDate,\n    selectedDate,\n    changeSelectedDate,\n    language,\n  } = useDatePickerContext();\n\n  const theme = rootTheme.views.days;\n\n  const weekDays = getWeekDays(language, weekStart);\n  const startDate = getFirstDayOfTheMonth(viewDate, weekStart);\n\n  return (\n    <>\n      <div className={theme.header.base}>\n        {weekDays.map((day, index) => (\n          <span key={index} className={theme.header.title}>\n            {day}\n          </span>\n        ))}\n      </div>\n      <div className={theme.items.base}>\n        {[...Array(42)].map((_date, index) => {\n          const currentDate = addDays(startDate, index);\n          const day = getFormattedDate(language, currentDate, { day: \"numeric\" });\n\n          const isSelected = selectedDate && isDateEqual(selectedDate, currentDate);\n          const isDisabled = !isDateInRange(currentDate, minDate, maxDate);\n\n          return (\n            <button\n              disabled={isDisabled}\n              key={index}\n              type=\"button\"\n              className={twMerge(\n                theme.items.item.base,\n                isSelected && theme.items.item.selected,\n                isDisabled && theme.items.item.disabled,\n              )}\n              onClick={() => {\n                if (isDisabled) return;\n\n                changeSelectedDate(currentDate, true);\n              }}\n            >\n              {day}\n            </button>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nDatepickerViewsDays.displayName = \"DatepickerViewsDays\";\n"],"mappings":";;;;;;AAOA,SAAQA,oBAAA;EACR,MAAI;IACAC,KAAA,EAAAC,SAAS;IACTC,SAAO;IACPC,OAAO;IACPC,OAAA;IACAC,QAAA;IACAC,YAAA;IACAC,kBAAA;IACDC;EACD,IAAAC,oBAAwB;EACxB,MAAMT,KAAA,GAAQC,SAAG,CAAAS,KAAY,CAAAC,IAAA;EAC7B,MAAMC,QAAA,GAASC,WAAG,CAAAL,QAAA,EAAqBN,SAAS;EAChD,MAAAY,SAAA,GAAAC,qBAAsC,CAAEV,QAAQ,EAAEH,SAAA;EACpD,sBAAwBc,IAAK,CAAAC,QAAI;IAASC,QAAQ,GAClD,eAAoBC,GAAG,CAAC,KAAK,EAAE;MAAEC,SAAS,EAAEpB,KAAK,CAACqB,MAAM,CAAAC,IAAI;MAAEJ,QAAQ,EAAGN,QAAQ,CAACW,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAE,eAAUN,GAAA;QAAAC,SAAA,EAAApB,KAAA,CAAAqB,MAAA,CAAAK,KAAA;QAAAR,QAAA,EAAAM;MAAA,GAAAC,KAAA;IAAA,IAC7G,eAAYN,GAAW,MAAG;MAAOC,SAAC,EAASpB,KAAE,CAAK2B,KAAC,CAAAL,IAAA;MAAAJ,QAAA,MAAAU,KAAA,MAAAL,GAAA,EAAAM,KAAA,EAAAJ,KAAA;QAC7C,MAAMK,WAAM,GAAAC,OAAA,CAAgBjB,SAAS,EAAEW,KAAA;QACvC,MAAMD,GAAA,GAAAQ,gBAAa,CAAAxB,QAAgB,EAAAsB,WAAY;UAAAN,GAAA,EAAY;QAAE;QAC7D,MAAMS,UAAU,GAAG3B,YAAC,IAAc4B,WAAW,CAAE5B,YAAS,EAAAwB,WAAQ;QAChE,MAAAK,UAAA,IAAAC,aAA0B,CAAAN,WAAA,EAAA3B,OAAA,EAAAC,OAAA;QAChC,OAAQ,eAAQe,GAAA,CACR,UACR;UACUkB,QAAM,EAAAF,UAAQ;UACdG,IAAA,UAAW;UACrBlB,SAAkB,EAAAmB,OAAU,CAChBvC,KAAA,CAAA2B,KAAU,CAAAa,IAAI,CAAAlB,IAAM,EACpBW,UAAU,IAAIjC,KAAK,CAAC2B,KAAK,CAACa,IAAI,CAACC,QAAA,EAChCN,UAAA,IAAAnC,KAAA,CAAA2B,KAAA,CAAAa,IAAA,CAAAH,QACD;UACVK,OAAgB,EAAAA,CAAA;YACJ,IAAAP,UAAA;YACD5B,kBAAA,CAAAuB,WAAA;UACD;UACDZ,QAAA,EAAAM;QACD,GACDC,KACD;MACH,CAAE;IAAC;EACN;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { avatarTheme } from './theme.js';\nconst Avatar = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([avatarTheme, provider.theme?.avatar, props.theme], [get(provider.clearTheme, \"avatar\"), props.clearTheme], [get(provider.applyTheme, \"avatar\"), props.applyTheme]);\n  const {\n    alt = \"\",\n    bordered = false,\n    children,\n    className,\n    color = \"light\",\n    img,\n    placeholderInitials = \"\",\n    rounded = false,\n    size = \"md\",\n    stacked = false,\n    status,\n    statusPosition = \"top-left\",\n    ...restProps\n  } = resolveProps(props, provider.props?.avatar);\n  const imgClassName = twMerge(theme.root.img.base, bordered && theme.root.bordered, bordered && theme.root.color[color], rounded && theme.root.rounded, stacked && theme.root.stacked, theme.root.img.on, theme.root.size[size]);\n  const imgProps = {\n    className: twMerge(imgClassName, theme.root.img.on),\n    \"data-testid\": \"flowbite-avatar-img\"\n  };\n  return /* @__PURE__ */jsxs(\"div\", {\n    ref,\n    className: twMerge(theme.root.base, className),\n    \"data-testid\": \"flowbite-avatar\",\n    ...restProps,\n    children: [/* @__PURE__ */jsxs(\"div\", {\n      className: theme.root.inner,\n      children: [img ? typeof img === \"string\" ? /* @__PURE__ */jsx(\"img\", {\n        alt,\n        src: img,\n        ...imgProps\n      }) : img({\n        alt,\n        ...imgProps\n      }) : placeholderInitials ? /* @__PURE__ */jsx(\"div\", {\n        className: twMerge(theme.root.img.off, theme.root.initials.base, stacked && theme.root.stacked, bordered && theme.root.bordered, bordered && theme.root.color[color], theme.root.size[size], rounded && theme.root.rounded),\n        \"data-testid\": \"flowbite-avatar-initials-placeholder\",\n        children: /* @__PURE__ */jsx(\"span\", {\n          className: twMerge(theme.root.initials.text),\n          \"data-testid\": \"flowbite-avatar-initials-placeholder-text\",\n          children: placeholderInitials\n        })\n      }) : /* @__PURE__ */jsx(\"div\", {\n        className: twMerge(imgClassName, theme.root.img.off),\n        \"data-testid\": \"flowbite-avatar-img\",\n        children: /* @__PURE__ */jsx(\"svg\", {\n          className: theme.root.img.placeholder,\n          fill: \"currentColor\",\n          viewBox: \"0 0 20 20\",\n          xmlns: \"http://www.w3.org/2000/svg\",\n          children: /* @__PURE__ */jsx(\"path\", {\n            fillRule: \"evenodd\",\n            d: \"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\",\n            clipRule: \"evenodd\"\n          })\n        })\n      }), status && /* @__PURE__ */jsx(\"span\", {\n        \"data-testid\": \"flowbite-avatar-status\",\n        className: twMerge(theme.root.status.base, theme.root.status[status], theme.root.statusPosition[statusPosition])\n      })]\n    }), children && /* @__PURE__ */jsx(\"div\", {\n      children\n    })]\n  });\n});\nAvatar.displayName = \"Avatar\";\nexport { Avatar };","map":{"version":3,"names":["Avatar","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","avatarTheme","avatar","get","clearTheme","applyTheme","alt","bordered","children","className","color","img","placeholderInitials","rounded","size","stacked","status","statusPosition","restProps","resolveProps","imgClassName","twMerge","root","base","on","imgProps","jsxs","inner","jsx","src","off","initials","text","placeholder","fill","viewBox","xmlns","fillRule","d","clipRule"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Avatar\\Avatar.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps, type ReactElement } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type {\n  DynamicStringEnumKeysOf,\n  FlowbiteBoolean,\n  FlowbiteColors,\n  FlowbitePositions,\n  FlowbiteSizes,\n  ThemingProps,\n} from \"../../types\";\nimport type { AvatarGroupTheme } from \"./AvatarGroup\";\nimport type { AvatarGroupCounterTheme } from \"./AvatarGroupCounter\";\nimport { avatarTheme } from \"./theme\";\n\nexport interface AvatarTheme {\n  root: AvatarRootTheme;\n  group: AvatarGroupTheme;\n  groupCounter: AvatarGroupCounterTheme;\n}\n\nexport interface AvatarRootTheme {\n  base: string;\n  inner: string;\n  bordered: string;\n  color: AvatarColors;\n  img: AvatarImageTheme;\n  initials: AvatarInitialsTheme;\n  rounded: string;\n  size: AvatarSizes;\n  stacked: string;\n  status: AvatarStatusTheme;\n  statusPosition: FlowbitePositions;\n}\n\nexport interface AvatarImageTheme extends FlowbiteBoolean {\n  base: string;\n  placeholder: string;\n}\n\nexport interface AvatarStatusTheme {\n  away: string;\n  base: string;\n  busy: string;\n  offline: string;\n  online: string;\n}\n\nexport interface AvatarInitialsTheme {\n  base: string;\n  text: string;\n}\n\nexport interface AvatarColors\n  extends Pick<FlowbiteColors, \"failure\" | \"gray\" | \"info\" | \"pink\" | \"purple\" | \"success\" | \"warning\"> {\n  [key: string]: string;\n}\n\nexport interface AvatarSizes extends Pick<FlowbiteSizes, \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\"> {\n  [key: string]: string;\n}\n\nexport interface AvatarImageProps {\n  alt?: string;\n  className: string;\n  \"data-testid\": string;\n}\n\nexport interface AvatarProps extends Omit<ComponentProps<\"div\">, \"color\">, ThemingProps<AvatarTheme> {\n  alt?: string;\n  bordered?: boolean;\n  img?: string | ((props: AvatarImageProps) => ReactElement);\n  color?: DynamicStringEnumKeysOf<AvatarColors>;\n  rounded?: boolean;\n  size?: DynamicStringEnumKeysOf<AvatarSizes>;\n  stacked?: boolean;\n  status?: \"away\" | \"busy\" | \"offline\" | \"online\";\n  statusPosition?: keyof FlowbitePositions;\n  placeholderInitials?: string;\n}\n\nexport const Avatar = forwardRef<HTMLDivElement, AvatarProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [avatarTheme, provider.theme?.avatar, props.theme],\n    [get(provider.clearTheme, \"avatar\"), props.clearTheme],\n    [get(provider.applyTheme, \"avatar\"), props.applyTheme],\n  );\n\n  const {\n    alt = \"\",\n    bordered = false,\n    children,\n    className,\n    color = \"light\",\n    img,\n    placeholderInitials = \"\",\n    rounded = false,\n    size = \"md\",\n    stacked = false,\n    status,\n    statusPosition = \"top-left\",\n    ...restProps\n  } = resolveProps(props, provider.props?.avatar);\n\n  const imgClassName = twMerge(\n    theme.root.img.base,\n    bordered && theme.root.bordered,\n    bordered && theme.root.color[color],\n    rounded && theme.root.rounded,\n    stacked && theme.root.stacked,\n    theme.root.img.on,\n    theme.root.size[size],\n  );\n\n  const imgProps = {\n    className: twMerge(imgClassName, theme.root.img.on),\n    \"data-testid\": \"flowbite-avatar-img\",\n  };\n\n  return (\n    <div ref={ref} className={twMerge(theme.root.base, className)} data-testid=\"flowbite-avatar\" {...restProps}>\n      <div className={theme.root.inner}>\n        {img ? (\n          typeof img === \"string\" ? (\n            <img alt={alt} src={img} {...imgProps} />\n          ) : (\n            img({ alt, ...imgProps })\n          )\n        ) : placeholderInitials ? (\n          <div\n            className={twMerge(\n              theme.root.img.off,\n              theme.root.initials.base,\n              stacked && theme.root.stacked,\n              bordered && theme.root.bordered,\n              bordered && theme.root.color[color],\n              theme.root.size[size],\n              rounded && theme.root.rounded,\n            )}\n            data-testid=\"flowbite-avatar-initials-placeholder\"\n          >\n            <span className={twMerge(theme.root.initials.text)} data-testid=\"flowbite-avatar-initials-placeholder-text\">\n              {placeholderInitials}\n            </span>\n          </div>\n        ) : (\n          <div className={twMerge(imgClassName, theme.root.img.off)} data-testid=\"flowbite-avatar-img\">\n            <svg\n              className={theme.root.img.placeholder}\n              fill=\"currentColor\"\n              viewBox=\"0 0 20 20\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path fillRule=\"evenodd\" d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n        )}\n        {status && (\n          <span\n            data-testid=\"flowbite-avatar-status\"\n            className={twMerge(\n              theme.root.status.base,\n              theme.root.status[status],\n              theme.root.statusPosition[statusPosition],\n            )}\n          />\n        )}\n      </div>\n      {children && <div>{children}</div>}\n    </div>\n  );\n});\n\nAvatar.displayName = \"Avatar\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,MAAM,GAAAC,UAAW,EAAAC,KAAA,EAAAC,GAAkB;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAWC,eAAW,CACvB,CAACC,WAAI,EAASJ,QAAA,CAAAE,KAAY,EAAAG,MAAS,EAAEP,KAAM,CAAAI,KAAA,GAC3C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,QAAQ,CAAC,EAAET,KAAK,CAACS,UAAU,GACtD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,aAAAV,KAAA,CAAAU,UAAA,CACD;EACF,MAAO;IACHC,GAAA,KAAQ;IACRC,QAAQ;IACRC,QAAA;IACAC,SAAQ;IACRC,KAAG;IACHC,GAAA;IACAC,mBAAe;IACfC,OAAO,QAAI;IACXC,IAAA,GAAO,IAAG;IACVC,OAAM;IACNC,MAAA;IACAC,cAAG;IACJ,GAAGC;EACJ,IAAAC,YAAM,CAAAxB,KAAe,EAAAE,QAAO,CAAAF,KAAA,EAAAO,MAAA;EAC9B,MAAIkB,YAAe,GAAIC,OAAA,CACnBtB,KAAA,CAAAuB,IAAQ,CAAAX,GAAI,CAAAY,IAAM,EAClBhB,QAAQ,IAAIR,KAAK,CAACuB,IAAI,CAACf,QAAM,EAC7BA,QAAO,IAAIR,KAAM,CAAAuB,IAAK,CAAAZ,KAAA,CAAOA,KAAA,GAC7BG,OAAO,IAAId,KAAK,CAACuB,IAAI,CAACT,OAAO,EAC7BE,OAAM,IAAKhB,KAAI,CAAEuB,IAAA,CAAAP,OAAA,EACjBhB,KAAK,CAACuB,IAAI,CAACX,GAAA,CAAIa,EAAC,EACjBzB,KAAA,CAAAuB,IAAA,CAAAR,IAAA,CAAAA,IAAA,CACD;EACF,MAAIW,QAAW;IACXhB,SAAA,EAAAY,OAAe,CAAAD,YAAA,EAAArB,KAAA,CAAAuB,IAAA,CAAAX,GAAA,CAAAa,EAAA;IAChB;EACD;EACF,sBAAyBE,IAAA,CAAK,KAAI;IAAA9B,GAAA;IAASa,SAAQ,EAAIY,OAAM,CAAEtB,KAAA,CAAAuB,IAAU,CAAAC,IAAA,EAAAd,SAAA;IAAA;IAAA,GAAAS,SAAA;IAAAV,QAAA,GACzE,eAAmBkB,IAAG,MAAK;MAAAjB,SAAQ,EAAAV,KAAA,CAAAuB,IAAmB,CAAAK,KAAI;MAAKnB,QAAO,EAAE,CACxEG,GAAQ,UAAKA,GAAA,+BAAAiB,GAAA;QAAAtB,GAAA;QAAAuB,GAAA,EAAAlB,GAAA;QAAA,GAAAc;MAAA,KAAAd,GAAA;QAAAL,GAAA;QAAA,GAAAmB;MAAA,KAAAb,mBAAA,kBAAAgB,GAAA,CACL,OACR;QACAnB,SAAkB,EAAAY,OAAS,CACftB,KAAK,CAACuB,IAAI,CAACX,GAAA,CAAAmB,GAAA,EACX/B,KAAA,CAAAuB,IAAO,CAAIS,QAAM,CAAAR,IAAK,EACtBR,OAAA,IAAQhB,KAAI,CAAKuB,IAAC,CAAIP,OAAC,EACvBR,QAAQ,IAAIR,KAAK,CAACuB,IAAI,CAACf,QAAM,EAC7BA,QAAM,IAAKR,KAAK,CAAAuB,IAAK,CAAAZ,KAAA,CAAAA,KAAA,GACrBX,KAAA,CAAAuB,IAAO,CAAIR,IAAA,CAAKA,IAAC,CAAI,EACtBD,OAAA,IAAAd,KAAA,CAAAuB,IAAA,CAAAT,OACD;QACA,aAAQ,wCAA2C;QAC7DL,QAAA,iBAAAoB,GAAA;UAAAnB,SAAA,EAAAY,OAAA,CAAAtB,KAAA,CAAAuB,IAAA,CAAAS,QAAA,CAAAC,IAAA;UAAA;UAAAxB,QAAA,EAAAI;QAAA;MACO,CACP,IAAQ,eAAKgB,GAAA;QAAAnB,SAAA,EAAAY,OAAA,CAAAD,YAAA,EAAArB,KAAA,CAAAuB,IAAA,CAAAX,GAAA,CAAAmB,GAAA;QAAA;QAAAtB,QAAA,iBAAAoB,GAAA,CACL,OACR;UACUnB,SAAM,EAAAV,KAAA,CAAAuB,IAAc,CAAAX,GAAA,CAAAsB,WAAA;UACpBC,IAAA,gBAAoB;UACpBC,OAAO;UACPC,KAAA,8BAA8B;UACxC5B,QAAA,iBAAAoB,GAAA;YAAAS,QAAA;YAAAC,CAAA;YAAAC,QAAA;UAAA;QACO,CACD;MAAA,IACNvB,MAAQ,IAAM,eAAAY,GAAA,CACN,QACR;QACU,aAAW,0BAAO;QAC5BnB,SAAkB,EAAAY,OAAK,CACXtB,KAAK,CAACuB,IAAI,CAACN,MAAM,CAACO,IAAA,EAClBxB,KAAK,CAACuB,IAAI,CAACN,MAAA,CAAAA,MAAA,CAAc,EACrCjB,KAAA,CAAAuB,IAAA,CAAAL,cAAA,CAAAA,cAAA,CACA;MACA,CACK,CAAE;IACH,IACDT,QAAG,mBAAAoB,GAAA;MAAApB;IAAA;EACL;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useState, useMemo, Children, cloneElement } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { ChevronDownIcon } from '../../icons/chevron-down-icon.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { accordionTheme } from './theme.js';\nfunction Accordion(props) {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([accordionTheme.root, provider.theme?.accordion?.root, props.theme], [get(provider.clearTheme, \"accordion.root\"), props.clearTheme], [get(provider.applyTheme, \"accordion.root\"), props.applyTheme]);\n  const {\n    alwaysOpen = false,\n    arrowIcon = ChevronDownIcon,\n    children,\n    flush = false,\n    collapseAll = false,\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.accordion);\n  const [isOpen, setOpen] = useState(collapseAll ? -1 : 0);\n  const panels = useMemo(() => Children.map(children, (child, i) => cloneElement(child, {\n    alwaysOpen,\n    arrowIcon,\n    flush,\n    isOpen: isOpen === i,\n    setOpen: () => setOpen(isOpen === i ? -1 : i)\n  })), [alwaysOpen, arrowIcon, children, flush, isOpen]);\n  return /* @__PURE__ */jsx(\"div\", {\n    className: twMerge(theme.base, theme.flush[flush ? \"on\" : \"off\"], className),\n    \"data-testid\": \"flowbite-accordion\",\n    ...restProps,\n    children: panels\n  });\n}\nAccordion.displayName = \"Accordion\";\nexport { Accordion };","map":{"version":3,"names":["Accordion","props","provider","useThemeProvider","theme","useResolveTheme","accordionTheme","root","accordion","get","clearTheme","applyTheme","alwaysOpen","arrowIcon","ChevronDownIcon","children","flush","collapseAll","className","restProps","resolveProps","isOpen","setOpen","useState","panels","useMemo","Children","map","child","i","cloneElement","jsx","twMerge","base"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Accordion\\Accordion.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps, FC, ReactElement } from \"react\";\nimport { Children, cloneElement, useMemo, useState } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { ChevronDownIcon } from \"../../icons/chevron-down-icon\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { FlowbiteBoolean, ThemingProps } from \"../../types\";\nimport type { AccordionContentTheme } from \"./AccordionContent\";\nimport type { AccordionPanelProps } from \"./AccordionPanel\";\nimport type { AccordionTitleTheme } from \"./AccordionTitle\";\nimport { accordionTheme } from \"./theme\";\n\nexport interface AccordionTheme {\n  root: AccordionRootTheme;\n  content: AccordionContentTheme;\n  title: AccordionTitleTheme;\n}\n\nexport interface AccordionRootTheme {\n  base: string;\n  flush: FlowbiteBoolean;\n}\n\nexport interface AccordionProps extends ComponentProps<\"div\">, ThemingProps<AccordionRootTheme> {\n  alwaysOpen?: boolean;\n  arrowIcon?: FC<ComponentProps<\"svg\">>;\n  children: ReactElement<AccordionPanelProps> | ReactElement<AccordionPanelProps>[];\n  flush?: boolean;\n  collapseAll?: boolean;\n}\n\nexport function Accordion(props: AccordionProps) {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [accordionTheme.root, provider.theme?.accordion?.root, props.theme],\n    [get(provider.clearTheme, \"accordion.root\"), props.clearTheme],\n    [get(provider.applyTheme, \"accordion.root\"), props.applyTheme],\n  );\n\n  const {\n    alwaysOpen = false,\n    arrowIcon = ChevronDownIcon,\n    children,\n    flush = false,\n    collapseAll = false,\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.accordion);\n\n  const [isOpen, setOpen] = useState(collapseAll ? -1 : 0);\n\n  const panels = useMemo(\n    () =>\n      Children.map(children, (child, i) =>\n        cloneElement(child, {\n          alwaysOpen,\n          arrowIcon,\n          flush,\n          isOpen: isOpen === i,\n          setOpen: () => setOpen(isOpen === i ? -1 : i),\n        }),\n      ),\n    [alwaysOpen, arrowIcon, children, flush, isOpen],\n  );\n\n  return (\n    <div\n      className={twMerge(theme.base, theme.flush[flush ? \"on\" : \"off\"], className)}\n      data-testid=\"flowbite-accordion\"\n      {...restProps}\n    >\n      {panels}\n    </div>\n  );\n}\n\nAccordion.displayName = \"Accordion\";\n"],"mappings":";;;;;;;;;;;AAYA,SAAQA,SAAQA,CAAGC,KAAA;EACjB,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAqB,CACtB,CAACC,cAAa,CAAAC,IAAA,EAAAL,QAAY,CAAAE,KAAA,EAAAI,SAAmB,EAAAD,IAAM,EAAAN,KAAA,CAAUG,KAAC,GAC9D,CAACK,GAAG,CAACP,QAAQ,CAACQ,UAAU,EAAE,gBAAgB,CAAC,EAAET,KAAK,CAACS,UAAU,GAC9D,CAAAD,GAAA,CAAAP,QAAA,CAAAS,UAAA,qBAAAV,KAAA,CAAAU,UAAA,CACD;EACF,MAAI;IACAC,UAAS,GAAG;IACZC,SAAQ,GAAAC,eAAA;IACRC,QAAQ;IACRC,KAAA,QAAW;IACXC,WAAS;IACTC,SAAG;IACJ,GAAGC;EACJ,IAAAC,YAAe,CAAAnB,KAAO,EAACC,QAAG,CAAAD,KAAS,EAAAO,SAAc;EACjD,MAAM,CAAAa,MAAM,EAAGC,OAAO,IAAAC,QAAA,CAAAN,WAAA;EACxB,MAAIO,MAAM,GAAAC,OAAY,CACtB,MAAMC,QAAQ,CAAAC,GAAA,CACRZ,QAAQ,EACd,CAAAa,KAAQ,EAAAC,CAAA,KAAUC,YAAA,CAAAF,KAAA;IACVhB,UAAS;IACTC,SAAK;IACLG,KAAA;IACAK,MAAA,EAAOA,MAAE,KAAMQ,CAAA;IAChBP,OAAA,EAAAA,CAAA,KAAAA,OAAA,CAAAD,MAAA,KAAAQ,CAAA,QAAAA,CAAA;EACF,EACD,CAAC,EACF,CAAAjB,UAAA,EAAAC,SAAA,EAAAE,QAAA,EAAAC,KAAA,EAAAK,MAAA,CACD;EACF,OAAS,eAAAU,GAAA,CACL,OACJ;IACMb,SAAA,EAAAc,OAAe,CAAA5B,KAAA,CAAA6B,IAAA,EAAA7B,KAAoB,CAAAY,KAAA,CAAAA,KAAA,kBAAAE,SAAA;IACnC,aAAY;IACZ,GAAAC,SAAU;IAChBJ,QAAA,EAAAS;EACG,CACH;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
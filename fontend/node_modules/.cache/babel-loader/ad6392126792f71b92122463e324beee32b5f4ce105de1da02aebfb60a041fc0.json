{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { blockquoteTheme } from './theme.js';\nconst Blockquote = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([blockquoteTheme, provider.theme?.blockquote, props.theme], [get(provider.clearTheme, \"blockquote\"), props.clearTheme], [get(provider.applyTheme, \"blockquote\"), props.applyTheme]);\n  const {\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.blockquote);\n  return /* @__PURE__ */jsx(\"blockquote\", {\n    ref,\n    className: twMerge(theme.root.base, className),\n    \"data-testid\": \"flowbite-blockquote\",\n    ...restProps\n  });\n});\nBlockquote.displayName = \"Blockquote\";\nexport { Blockquote };","map":{"version":3,"names":["Blockquote","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","blockquoteTheme","blockquote","get","clearTheme","applyTheme","className","restProps","resolveProps","jsx","twMerge","root","base"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Blockquote\\Blockquote.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { blockquoteTheme } from \"./theme\";\n\nexport interface BlockquoteTheme {\n  root: BlockquoteRootTheme;\n}\n\nexport interface BlockquoteRootTheme {\n  base: string;\n}\n\nexport interface BlockquoteProps extends ComponentProps<\"blockquote\">, ThemingProps<BlockquoteTheme> {}\n\nexport const Blockquote = forwardRef<HTMLQuoteElement, BlockquoteProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [blockquoteTheme, provider.theme?.blockquote, props.theme],\n    [get(provider.clearTheme, \"blockquote\"), props.clearTheme],\n    [get(provider.applyTheme, \"blockquote\"), props.applyTheme],\n  );\n\n  const { className, ...restProps } = resolveProps(props, provider.props?.blockquote);\n\n  return (\n    <blockquote\n      ref={ref}\n      className={twMerge(theme.root.base, className)}\n      data-testid=\"flowbite-blockquote\"\n      {...restProps}\n    />\n  );\n});\n\nBlockquote.displayName = \"Blockquote\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,UAAc,GAAGC,UAAA,EAAAC,KAAgB,EAAEC,GAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAA0B,CAC3B,CAACC,eAAa,EAAAJ,QAAY,CAAAE,KAAA,EAAAG,UAAe,EAAKP,KAAC,CAAAI,KAAU,CAAC,EAC1D,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,YAAY,CAAC,EAAET,KAAK,CAACS,UAAU,GAC1D,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,iBAAAV,KAAA,CAAAU,UAAA,CACD;EACA;IAAAC,SAAA;IAAA,GAAAC;EAA0B,IAAAC,YAAA,CAAAb,KAAA,EAAAE,QAAA,CAAAF,KAAA,EAAAO,UAAA;EAC5B,OAAI,eAAYO,GAAA,CACZ,cACJ;IACMb,GAAA;IACAU,SAAA,EAAAI,OAAe,CAAAX,KAAA,CAAAY,IAAA,CAAAC,IAAA,EAAqBN,SAAA;IACpC,aAAG;IACT,GAAAC;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
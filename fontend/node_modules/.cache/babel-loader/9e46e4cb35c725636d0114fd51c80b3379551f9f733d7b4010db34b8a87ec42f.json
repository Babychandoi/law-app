{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { timelineTheme } from './theme.js';\nimport { useTimelineContentContext } from './TimelineContentContext.js';\nimport { useTimelineContext } from './TimelineContext.js';\nimport { useTimelineItemContext } from './TimelineItemContext.js';\nconst TimelineBody = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme\n  } = useTimelineContext();\n  const {\n    theme: itemTheme,\n    clearTheme: itemClearTheme,\n    applyTheme: itemApplyTheme\n  } = useTimelineItemContext();\n  const {\n    theme: contentTheme,\n    clearTheme: contentClearTheme,\n    applyTheme: contentApplyTheme\n  } = useTimelineContentContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([timelineTheme.item.content.body, provider.theme?.timeline?.item?.content?.body, rootTheme?.item?.content?.body, itemTheme?.content?.body, contentTheme?.body, props.theme], [get(provider.clearTheme, \"timeline.item.content.body\"), get(rootClearTheme, \"item.content.body\"), get(itemClearTheme, \"content.body\"), get(contentClearTheme, \"body\"), props.clearTheme], [get(provider.applyTheme, \"timeline.item.content.body\"), get(rootApplyTheme, \"item.content.body\"), get(itemApplyTheme, \"content.body\"), get(contentApplyTheme, \"body\"), props.applyTheme]);\n  const {\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.timelineBody);\n  return /* @__PURE__ */jsx(\"div\", {\n    ref,\n    className: twMerge(theme.base, className),\n    ...restProps\n  });\n});\nTimelineBody.displayName = \"TimelineBody\";\nexport { TimelineBody };","map":{"version":3,"names":["TimelineBody","forwardRef","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","useTimelineContext","itemTheme","itemClearTheme","itemApplyTheme","useTimelineItemContext","contentTheme","contentClearTheme","contentApplyTheme","useTimelineContentContext","provider","useThemeProvider","useResolveTheme","timelineTheme","item","content","body","timeline","get","className","restProps","resolveProps","timelineBody","jsx","twMerge","base"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Timeline\\TimelineBody.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { timelineTheme } from \"./theme\";\nimport { useTimelineContentContext } from \"./TimelineContentContext\";\nimport { useTimelineContext } from \"./TimelineContext\";\nimport { useTimelineItemContext } from \"./TimelineItemContext\";\n\nexport interface TimelineBodyTheme {\n  base: string;\n}\n\nexport interface TimelineBodyProps extends ComponentProps<\"p\">, ThemingProps<TimelineBodyTheme> {}\n\nexport const TimelineBody = forwardRef<HTMLDivElement, TimelineBodyProps>((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme } = useTimelineContext();\n  const { theme: itemTheme, clearTheme: itemClearTheme, applyTheme: itemApplyTheme } = useTimelineItemContext();\n  const {\n    theme: contentTheme,\n    clearTheme: contentClearTheme,\n    applyTheme: contentApplyTheme,\n  } = useTimelineContentContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [\n      timelineTheme.item.content.body,\n      provider.theme?.timeline?.item?.content?.body,\n      rootTheme?.item?.content?.body,\n      itemTheme?.content?.body,\n      contentTheme?.body,\n      props.theme,\n    ],\n    [\n      get(provider.clearTheme, \"timeline.item.content.body\"),\n      get(rootClearTheme, \"item.content.body\"),\n      get(itemClearTheme, \"content.body\"),\n      get(contentClearTheme, \"body\"),\n      props.clearTheme,\n    ],\n    [\n      get(provider.applyTheme, \"timeline.item.content.body\"),\n      get(rootApplyTheme, \"item.content.body\"),\n      get(itemApplyTheme, \"content.body\"),\n      get(contentApplyTheme, \"body\"),\n      props.applyTheme,\n    ],\n  );\n\n  const { className, ...restProps } = resolveProps(props, provider.props?.timelineBody);\n\n  return <div ref={ref} className={twMerge(theme.base, className)} {...restProps} />;\n});\n\nTimelineBody.displayName = \"TimelineBody\";\n"],"mappings":";;;;;;;;;;;;;AAcA,MAAEA,YAAe,GAAAC,UAAW,EAAAC,KAAU,EAAEC,GAAA;EACtC,MAAM;IAAEC,KAAK,EAAEC,SAAS;IAAEC,UAAU,EAAEC,cAAc;IAAEC,UAAU,EAAEC;EAAc,CAAE,GAAGC,kBAAA;EACrF,MAAM;IAAAN,KAAA,EAAAO,SAAA;IAAAL,UAAA,EAAAM,cAAA;IAAAJ,UAAA,EAAAK;EAAA,IAAAC,sBAAA;EACR,MAAI;IACAV,KAAA,EAAAW,YAAY;IACZT,UAAU,EAAEU,iBAAA;IACbR,UAAG,EAAAS;EACJ,IAAAC,yBAAiB;EACjB,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAIhB,KAAA,GAAAiB,eAAA,CACJ,CACMC,aAAS,CAAKC,IAAE,CAAAC,OAAU,CAAAC,IAAI,EAC9BN,QAAA,CAASf,KAAE,EAAIsB,QAAS,EAAEH,IAAI,EAAAC,OAAA,EAAAC,IAAA,EAC9BpB,SAAS,EAAEkB,IAAA,EAAAC,OAAa,EAAAC,IAAA,EACxBd,SAAA,EAAAa,OAAkB,EAAAC,IAAA,EAClBV,YAAM,EAAAU,IAAA,EACPvB,KAAA,CAAAE,KAAA,CACD,EACJ,CACMuB,GAAG,CAACR,QAAA,CAAAb,UAAgB,8BAAoB,GACxCqB,GAAG,CAACpB,cAAc,EAAE,mBAAe,GACnCoB,GAAG,CAACf,cAAA,gBAA0B,GAC9Be,GAAA,CAAAX,iBAAM,WACPd,KAAA,CAAAI,UAAA,CACD,EACJ,CACMqB,GAAG,CAACR,QAAA,CAAAX,UAAgB,8BAAoB,GACxCmB,GAAG,CAAClB,cAAc,EAAE,mBAAe,GACnCkB,GAAG,CAACd,cAAA,gBAA0B,GAC9Bc,GAAA,CAAAV,iBAAM,WACZf,KAAA,CAAAM,UAAA,CAEE;EACA;IAAAoB,SAAA;IAAA,GAAAC;EAAgC,IAAIC,YAAK,CAAA5B,KAAW,EAAAiB,QAAQ,CAAKjB,KAAK,EAAE6B,YAAY;EACrF,sBAAAC,GAAA;IAAA7B,GAAA;IAAAyB,SAAA,EAAAK,OAAA,CAAA7B,KAAA,CAAA8B,IAAA,EAAAN,SAAA;IAAA,GAAAC;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
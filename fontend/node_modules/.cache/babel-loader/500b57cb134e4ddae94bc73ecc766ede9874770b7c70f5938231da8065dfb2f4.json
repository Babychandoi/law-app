{"ast":null,"code":"function mergeRefs(refs) {\n  return value => {\n    refs.forEach(ref => {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        const _ref = ref;\n        _ref.current = value;\n      }\n    });\n  };\n}\nexport { mergeRefs };","map":{"version":3,"names":["mergeRefs","refs","value","forEach","ref","_ref","current"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\helpers\\merge-refs.ts"],"sourcesContent":["/**\n * Merges multiple React refs into a single ref callback function.\n *\n * This utility function combines multiple refs (callback refs, mutable refs, etc.)\n * into a single callback ref that updates all provided refs.\n *\n * @param refs - An array of refs to be merged. Can contain:\n * - MutableRefObject\n * - LegacyRef\n * - undefined\n * - null\n *\n * @returns A RefCallback function that updates all provided refs with the current value\n *\n * @example\n * ```tsx\n * const firstRef = useRef(null);\n * const secondRef = useRef(null);\n *\n * <div ref={mergeRefs([firstRef, secondRef])} />\n * ```\n *\n * @typeParam T - The type of value the refs will reference\n */\nexport function mergeRefs<T>(\n  refs: Array<React.MutableRefObject<T> | React.LegacyRef<T> | undefined | null>,\n): React.RefCallback<T> {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        const _ref = ref as React.MutableRefObject<T | null>;\n        _ref.current = value;\n      }\n    });\n  };\n}\n"],"mappings":"AACO,SAASA,SAASA,CAACC,IAAI,EAAE;EAC9B,OAAQC,KAAK,IAAK;IAChBD,IAAI,CAACE,OAAO,CAAEC,GAAG,IAAK;MACpB,IAAI,OAAOA,GAAG,KAAK,UAAU,EAAE;QAC7BA,GAAG,CAACF,KAAK,CAAC;MAClB,CAAO,MAAM,IAAIE,GAAG,IAAI,IAAI,EAAE;QACtB,MAAMC,IAAI,GAAGD,GAAG;QAChBC,IAAI,CAACC,OAAO,GAAGJ,KAAK;MAC5B;IACA,CAAK,CAAC;EACN,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { useFloating, useMergeRefs, useClick, useDismiss, useRole, useInteractions, FloatingPortal, FloatingOverlay, FloatingFocusManager } from '@floating-ui/react';\nimport { forwardRef, useState } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { ModalContext } from './ModalContext.js';\nimport { modalTheme } from './theme.js';\nconst Modal = forwardRef((props, ref) => {\n  const [headerId, setHeaderId] = useState(void 0);\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([modalTheme, provider.theme?.modal, props.theme], [get(provider.clearTheme, \"modal\"), props.clearTheme], [get(provider.applyTheme, \"modal\"), props.applyTheme]);\n  const {\n    children,\n    className,\n    dismissible = false,\n    onClose,\n    popup,\n    position = \"center\",\n    root,\n    show,\n    size = \"2xl\",\n    initialFocus,\n    ...restProps\n  } = resolveProps(props, provider.props?.modal);\n  const {\n    context\n  } = useFloating({\n    open: show,\n    onOpenChange: () => onClose && onClose()\n  });\n  const mergedRef = useMergeRefs([context.refs.setFloating, ref]);\n  const click = useClick(context);\n  const dismiss = useDismiss(context, {\n    outsidePressEvent: \"mousedown\",\n    enabled: dismissible\n  });\n  const role = useRole(context);\n  const {\n    getFloatingProps\n  } = useInteractions([click, dismiss, role]);\n  if (!show) {\n    return null;\n  }\n  return /* @__PURE__ */jsx(ModalContext.Provider, {\n    value: {\n      theme: props.theme,\n      clearTheme: props.clearTheme,\n      applyTheme: props.applyTheme,\n      popup,\n      onClose,\n      setHeaderId\n    },\n    children: /* @__PURE__ */jsx(FloatingPortal, {\n      root,\n      children: /* @__PURE__ */jsx(FloatingOverlay, {\n        lockScroll: true,\n        \"data-testid\": \"modal-overlay\",\n        className: twMerge(theme.root.base, theme.root.positions[position], show ? theme.root.show.on : theme.root.show.off, className),\n        ...restProps,\n        children: /* @__PURE__ */jsx(FloatingFocusManager, {\n          context,\n          initialFocus,\n          children: /* @__PURE__ */jsx(\"div\", {\n            ref: mergedRef,\n            ...getFloatingProps(restProps),\n            \"aria-labelledby\": headerId,\n            className: twMerge(theme.content.base, theme.root.sizes[size]),\n            children: /* @__PURE__ */jsx(\"div\", {\n              className: theme.content.inner,\n              children\n            })\n          })\n        })\n      })\n    })\n  });\n});\nModal.displayName = \"Modal\";\nexport { Modal };","map":{"version":3,"names":["Modal","forwardRef","props","ref","headerId","setHeaderId","useState","provider","useThemeProvider","theme","useResolveTheme","modalTheme","modal","get","clearTheme","applyTheme","children","className","dismissible","onClose","popup","position","root","show","size","initialFocus","restProps","resolveProps","context","useFloating","open","onOpenChange","mergedRef","useMergeRefs","refs","setFloating","click","useClick","dismiss","useDismiss","outsidePressEvent","enabled","role","useRole","getFloatingProps","useInteractions","jsx","ModalContext","Provider","value","FloatingPortal","FloatingOverlay","lockScroll","twMerge","base","positions","on","off","FloatingFocusManager","content","sizes","inner"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Modal\\Modal.tsx"],"sourcesContent":["\"use client\";\n\nimport {\n  FloatingFocusManager,\n  FloatingOverlay,\n  FloatingPortal,\n  useClick,\n  useDismiss,\n  useFloating,\n  useInteractions,\n  useMergeRefs,\n  useRole,\n} from \"@floating-ui/react\";\nimport type { MutableRefObject } from \"react\";\nimport { forwardRef, useState, type ComponentPropsWithoutRef } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type {\n  DynamicStringEnumKeysOf,\n  FlowbiteBoolean,\n  FlowbitePositions,\n  FlowbiteSizes,\n  ThemingProps,\n} from \"../../types\";\nimport type { ModalBodyTheme } from \"./ModalBody\";\nimport { ModalContext } from \"./ModalContext\";\nimport type { ModalFooterTheme } from \"./ModalFooter\";\nimport type { ModalHeaderTheme } from \"./ModalHeader\";\nimport { modalTheme } from \"./theme\";\n\nexport interface ModalTheme {\n  root: ModalRootTheme;\n  content: ModalContentTheme;\n  body: ModalBodyTheme;\n  header: ModalHeaderTheme;\n  footer: ModalFooterTheme;\n}\n\nexport interface ModalRootTheme {\n  base: string;\n  show: FlowbiteBoolean;\n  sizes: ModalSizes;\n  positions: ModalPositions;\n}\n\nexport interface ModalContentTheme {\n  base: string;\n  inner: string;\n}\n\nexport interface ModalPositions extends FlowbitePositions {\n  [key: string]: string;\n}\n\nexport interface ModalSizes extends Omit<FlowbiteSizes, \"xs\"> {\n  [key: string]: string;\n}\n\nexport interface ModalProps extends ComponentPropsWithoutRef<\"div\">, ThemingProps<ModalTheme> {\n  onClose?: () => void;\n  position?: DynamicStringEnumKeysOf<ModalPositions>;\n  popup?: boolean;\n  root?: HTMLElement;\n  show?: boolean;\n  size?: DynamicStringEnumKeysOf<ModalSizes>;\n  dismissible?: boolean;\n  initialFocus?: number | MutableRefObject<HTMLElement | null>;\n}\n\nexport const Modal = forwardRef<HTMLDivElement, ModalProps>((props, ref) => {\n  const [headerId, setHeaderId] = useState<string | undefined>(undefined);\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [modalTheme, provider.theme?.modal, props.theme],\n    [get(provider.clearTheme, \"modal\"), props.clearTheme],\n    [get(provider.applyTheme, \"modal\"), props.applyTheme],\n  );\n\n  const {\n    children,\n    className,\n    dismissible = false,\n    onClose,\n    popup,\n    position = \"center\",\n    root,\n    show,\n    size = \"2xl\",\n    initialFocus,\n    ...restProps\n  } = resolveProps(props, provider.props?.modal);\n\n  const { context } = useFloating({\n    open: show,\n    onOpenChange: () => onClose && onClose(),\n  });\n\n  const mergedRef = useMergeRefs([context.refs.setFloating, ref]);\n\n  const click = useClick(context);\n  const dismiss = useDismiss(context, { outsidePressEvent: \"mousedown\", enabled: dismissible });\n  const role = useRole(context);\n\n  const { getFloatingProps } = useInteractions([click, dismiss, role]);\n\n  if (!show) {\n    return null;\n  }\n\n  return (\n    <ModalContext.Provider\n      value={{\n        theme: props.theme,\n        clearTheme: props.clearTheme,\n        applyTheme: props.applyTheme,\n        popup,\n        onClose,\n        setHeaderId,\n      }}\n    >\n      <FloatingPortal root={root}>\n        <FloatingOverlay\n          lockScroll\n          data-testid=\"modal-overlay\"\n          className={twMerge(\n            theme.root.base,\n            theme.root.positions[position],\n            show ? theme.root.show.on : theme.root.show.off,\n            className,\n          )}\n          {...restProps}\n        >\n          <FloatingFocusManager context={context} initialFocus={initialFocus}>\n            <div\n              ref={mergedRef}\n              {...getFloatingProps(restProps)}\n              aria-labelledby={headerId}\n              className={twMerge(theme.content.base, theme.root.sizes[size])}\n            >\n              <div className={theme.content.inner}>{children}</div>\n            </div>\n          </FloatingFocusManager>\n        </FloatingOverlay>\n      </FloatingPortal>\n    </ModalContext.Provider>\n  );\n});\n\nModal.displayName = \"Modal\";\n"],"mappings":";;;;;;;;;;;;AAuBA,MAAEA,KAAO,GAAAC,UAAU,EAAAC,KAAY,EAAAC,GAAG;EAChC,MAAM,CAAAC,QAAQ,EAAGC,WAAA,IAAAC,QAAkB;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAUC,eAAgB,CAC3B,CAACC,UAAI,EAAQJ,QAAC,CAAAE,KAAY,EAAAG,KAAQ,EAAEV,KAAK,CAACO,KAAA,GAC1C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,OAAO,CAAC,EAAEZ,KAAK,CAACY,UAAU,GACrD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,YAAAb,KAAA,CAAAa,UAAA,CACD;EACF,MAAI;IACAC,QAAA;IACAC,SAAA;IACAC,WAAO;IACPC,OAAK;IACLC,KAAA;IACAC,QAAI;IACJC,IAAI;IACJC,IAAI;IACJC,IAAA,QAAY;IACZC,YAAG;IACJ,GAAGC;EACJ,IAAAC,YAAe,CAAEzB,KAAG,EAAAK,QAAY,CAAAL,KAAA,EAAAU,KAAA;EAClC,MAAQ;IAAEgB;EAAI,IAAAC,WAAA;IACVC,IAAA,EAAAP,IAAA;IACAQ,YAAA,EAAAA,CAAA,KAAAZ,OAAA,IAAAA,OAAA;EACF;EACA,MAAMa,SAAQ,GAAAC,YAAgB,CAAC,CAAAL,OAAA,CAAAM,IAAA,CAAAC,WAAA,EAAAhC,GAAA;EAC/B,MAAMiC,KAAA,GAAOC,QAAG,CAAAT,OAAW;EAC3B,MAAMU,OAAO,GAAAC,UAAQ,CAAAX,OAAQ;IAAAY,iBAAA;IAAAC,OAAA,EAAAvB;EAAA;EAC7B,MAAMwB,IAAE,GAAAC,OAAA,CAAAf,OAAkB,CAAG;EAC7B,MAAK;IAAAgB;EAAM,IAAAC,eAAA,EAAAT,KAAA,EAAAE,OAAA,EAAAI,IAAA;EACb,IAAI,CAAAnB,IAAO;IACX;EACE;EACF,OAAI,eAAqBuB,GAAA,CACrBC,YAAA,CAAAC,QAAA,EACJ;IACAC,KAAQ,EAAK;MACLxC,KAAA,EAAAP,KAAY,CAAAO,KAAM;MAClBK,UAAU,EAAEZ,KAAK,CAACY,UAAU;MAC5BC,UAAK,EAAAb,KAAA,CAAAa,UAAA;MACLK,KAAA;MACAD,OAAA;MACDd;IACD;IACNW,QAAQ,iBAAe8B,GAAA,CAAAI,cAAA;MAAA5B,IAAA;MAAAN,QAAA,iBAAA8B,GAAA,CACfK,eAAA,EACR;QACUC,UAAA,MAAe;QACf,aAAW,iBAAO;QAC5BnC,SAAkB,EAAAoC,OAAS,CACf5C,KAAK,CAACa,IAAI,CAACgC,IAAA,EACX7C,KAAI,CAAAa,IAAG,CAAAiC,SAAW,CAAAlC,QAAU,GAC5BE,IAAA,GAAAd,KAAA,CAAAa,IAAA,CAAAC,IAAA,CAAAiC,EAAA,GAAA/C,KAAA,CAAAa,IAAA,CAAAC,IAAA,CAAAkC,GAAA,EACDxC,SACD;QACA,GAAAS,SAAQ;QAClBV,QAAiB,iBAAA8B,GAAA,CAAAY,oBAAA;UAAA9B,OAAA;UAAAH,YAAA;UAAAT,QAAA,iBAAA8B,GAAA,CACL,OACZ;YACc3C,GAAG,EAAA6B,SAAA;YACH,GAAAY,gBAAmB,CAAAlB,SAAQ;YAC3B,iBAAW,EAAQtB,QAAM;YACzBa,SAAQ,EAAAoC,OAAA,CAAA5C,KAAA,CAAAkD,OAAsB,CAAAL,IAAO,EAAE7C,KAAA,CAAAa,IAAS,CAAEsC,KAAK,CAACpC,IAAA;YACtER,QAAA,iBAAA8B,GAAA;cAAA7B,SAAA,EAAAR,KAAA,CAAAkD,OAAA,CAAAE,KAAA;cAAA7C;YAAA;UACW,CACX;QAAA;MACO,CACP;IAAA;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
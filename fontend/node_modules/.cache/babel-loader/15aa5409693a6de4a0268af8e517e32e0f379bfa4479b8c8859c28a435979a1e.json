{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useModalContext } from './ModalContext.js';\nimport { modalTheme } from './theme.js';\nconst ModalFooter = forwardRef((props, ref) => {\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme,\n    popup\n  } = useModalContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([modalTheme.footer, provider.theme?.modal?.footer, rootTheme?.footer, props.theme], [get(provider.clearTheme, \"modal.footer\"), get(rootClearTheme, \"footer\"), props.clearTheme], [get(provider.applyTheme, \"modal.footer\"), get(rootApplyTheme, \"footer\"), props.applyTheme]);\n  const {\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.modalFooter);\n  return /* @__PURE__ */jsx(\"div\", {\n    ref,\n    className: twMerge(theme.base, !popup && theme.popup, className),\n    ...restProps\n  });\n});\nModalFooter.displayName = \"ModalFooter\";\nexport { ModalFooter };","map":{"version":3,"names":["ModalFooter","forwardRef","props","ref","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","popup","useModalContext","provider","useThemeProvider","useResolveTheme","modalTheme","footer","modal","get","className","restProps","resolveProps","modalFooter","jsx","twMerge","base"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Modal\\ModalFooter.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { useModalContext } from \"./ModalContext\";\nimport { modalTheme } from \"./theme\";\n\nexport interface ModalFooterTheme {\n  base: string;\n  popup: string;\n}\n\nexport interface ModalFooterProps extends ComponentProps<\"div\">, ThemingProps<ModalFooterTheme> {}\n\nexport const ModalFooter = forwardRef<HTMLDivElement, ModalFooterProps>((props, ref) => {\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme, popup } = useModalContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [modalTheme.footer, provider.theme?.modal?.footer, rootTheme?.footer, props.theme],\n    [get(provider.clearTheme, \"modal.footer\"), get(rootClearTheme, \"footer\"), props.clearTheme],\n    [get(provider.applyTheme, \"modal.footer\"), get(rootApplyTheme, \"footer\"), props.applyTheme],\n  );\n\n  const { className, ...restProps } = resolveProps(props, provider.props?.modalFooter);\n\n  return <div ref={ref} className={twMerge(theme.base, !popup && theme.popup, className)} {...restProps} />;\n});\n\nModalFooter.displayName = \"ModalFooter\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,WAAe,GAAAC,UAAW,EAAAC,KAAA,EAAUC,GAAE;EACtC,MAAM;IAAAC,KAAA,EAAQC,SAAG;IAAAC,UAAkB,EAAAC,cAAA;IAAAC,UAAA,EAAAC,cAAA;IAAAC;EAAA,IAAAC,eAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKT,KAAA,GAAWU,eAAQ,CACpB,CAACC,UAAI,CAAAC,MAAS,EAAAJ,QAAY,CAAAR,KAAA,EAAAa,KAAe,EAAED,MAAI,EAAAX,SAAA,EAAcW,MAAE,EAAAd,KAAW,CAAAE,KAAM,GAChF,CAACc,GAAG,CAACN,QAAQ,CAACN,UAAU,EAAE,cAAc,CAAC,EAAEY,GAAG,CAACX,cAAc,EAAE,QAAQ,CAAC,EAAEL,KAAK,CAACI,UAAU,GAC3F,CAAAY,GAAA,CAAAN,QAAA,CAAAJ,UAAA,mBAAAU,GAAA,CAAAT,cAAA,aAAAP,KAAA,CAAAM,UAAA,CACD;EACA;IAAAW,SAAA;IAAA,GAAAC;EAAgC,IAAIC,YAAK,CAAAnB,KAAW,EAAAU,QAAQ,CAAKV,KAAK,EAAEoB,WAAU;EACnF,sBAAAC,GAAA;IAAApB,GAAA;IAAAgB,SAAA,EAAAK,OAAA,CAAApB,KAAA,CAAAqB,IAAA,GAAAf,KAAA,IAAAN,KAAA,CAAAM,KAAA,EAAAS,SAAA;IAAA,GAAAC;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef, useId, useMemo, Children, useRef, useState, useEffect, useImperativeHandle } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { tabsTheme } from './theme.js';\nconst Tabs = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([tabsTheme, provider.theme?.tabs, props.theme], [get(provider.clearTheme, \"tabs\"), props.clearTheme], [get(provider.applyTheme, \"tabs\"), props.applyTheme]);\n  const {\n    children,\n    className,\n    onActiveTabChange,\n    variant = \"default\",\n    ...restProps\n  } = resolveProps(props, provider.props?.tabs);\n  const id = useId();\n  const tabs = useMemo(() => Children.map(Children.toArray(children), ({\n    props: props2\n  }) => props2), [children]);\n  const tabRefs = useRef([]);\n  const [activeTab, setActiveTab] = useState(Math.max(0, tabs.findIndex(tab => tab.active)));\n  const [focusedTab, setFocusedTab] = useState(-1);\n  function setActiveTabWithCallback(activeTab2) {\n    setActiveTab(activeTab2);\n    if (onActiveTabChange) onActiveTabChange(activeTab2);\n  }\n  function handleClick({\n    target\n  }) {\n    setActiveTabWithCallback(target);\n    setFocusedTab(target);\n  }\n  function handleKeyboard({\n    event,\n    target\n  }) {\n    if (event.key === \"ArrowLeft\") {\n      setFocusedTab(Math.max(0, focusedTab - 1));\n    }\n    if (event.key === \"ArrowRight\") {\n      setFocusedTab(Math.min(tabs.length - 1, focusedTab + 1));\n    }\n    if (event.key === \"Enter\") {\n      setActiveTabWithCallback(target);\n      setFocusedTab(target);\n    }\n  }\n  const tabItemStyle = theme.tablist.tabitem.variant[variant];\n  const tabItemContainerStyle = theme.tabitemcontainer.variant[variant];\n  useEffect(() => {\n    tabRefs.current[focusedTab]?.focus();\n  }, [focusedTab]);\n  useImperativeHandle(ref, () => ({\n    setActiveTab: setActiveTabWithCallback\n  }));\n  return /* @__PURE__ */jsxs(\"div\", {\n    className: twMerge(theme.base, className),\n    children: [/* @__PURE__ */jsx(\"div\", {\n      \"aria-label\": \"Tabs\",\n      role: \"tablist\",\n      className: twMerge(theme.tablist.base, theme.tablist.variant[variant], className),\n      ...restProps,\n      children: tabs.map((tab, index) => /* @__PURE__ */jsxs(\"button\", {\n        type: \"button\",\n        \"aria-controls\": `${id}-tabpanel-${index}`,\n        \"aria-selected\": index === activeTab,\n        className: twMerge(theme.tablist.tabitem.base, tabItemStyle.base, index === activeTab && tabItemStyle.active.on, index !== activeTab && !tab.disabled && tabItemStyle.active.off),\n        disabled: tab.disabled,\n        id: `${id}-tab-${index}`,\n        onClick: () => handleClick({\n          target: index\n        }),\n        onKeyDown: event => handleKeyboard({\n          event,\n          target: index\n        }),\n        ref: element => {\n          tabRefs.current[index] = element;\n        },\n        role: \"tab\",\n        tabIndex: index === focusedTab ? 0 : -1,\n        style: {\n          zIndex: index === focusedTab ? 2 : 1\n        },\n        children: [tab.icon && /* @__PURE__ */jsx(tab.icon, {\n          className: theme.tablist.tabitem.icon\n        }), tab.title]\n      }, index))\n    }), /* @__PURE__ */jsx(\"div\", {\n      className: twMerge(theme.tabitemcontainer.base, tabItemContainerStyle),\n      children: tabs.map((tab, index) => /* @__PURE__ */jsx(\"div\", {\n        \"aria-labelledby\": `${id}-tab-${index}`,\n        className: theme.tabpanel,\n        hidden: index !== activeTab,\n        id: `${id}-tabpanel-${index}`,\n        role: \"tabpanel\",\n        tabIndex: 0,\n        children: tab.children\n      }, index))\n    })]\n  });\n});\nTabs.displayName = \"Tabs\";\nexport { Tabs };","map":{"version":3,"names":["Tabs","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","tabsTheme","tabs","get","clearTheme","applyTheme","children","className","onActiveTabChange","variant","restProps","resolveProps","id","useId","useMemo","Children","map","toArray","props2","tabRefs","useRef","activeTab","setActiveTab","useState","Math","max","findIndex","tab","active","focusedTab","setFocusedTab","setActiveTabWithCallback","activeTab2","handleClick","target","handleKeyboard","event","key","min","length","tabItemStyle","tablist","tabitem","tabItemContainerStyle","tabitemcontainer","useEffect","current","focus","useImperativeHandle","jsxs","twMerge","base","jsx","role","index","type","on","disabled","off","onClick","onKeyDown","element","tabIndex","style","zIndex","icon","title","tabpanel","hidden"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Tabs\\Tabs.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps, KeyboardEvent, PropsWithChildren, ReactElement } from \"react\";\nimport { Children, forwardRef, useEffect, useId, useImperativeHandle, useMemo, useRef, useState } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { FlowbiteBoolean, ThemingProps } from \"../../types\";\nimport type { TabItemProps } from \"./TabItem\";\nimport { tabsTheme } from \"./theme\";\n\nexport interface TabsTheme {\n  base: string;\n  tablist: {\n    base: string;\n    variant: TabStyles;\n    tabitem: {\n      base: string;\n      variant: TabStyleItem<TabStyles>;\n      icon: string;\n    };\n  };\n  tabitemcontainer: {\n    base: string;\n    variant: TabStyles;\n  };\n  tabpanel: string;\n}\n\nexport interface TabStyles {\n  default: string;\n  fullWidth: string;\n  pills: string;\n  underline: string;\n}\n\nexport interface TabStyleItemProps {\n  base: string;\n  active: FlowbiteBoolean;\n}\n\nexport type TabStyleItem<Type> = {\n  [K in keyof Type]: TabStyleItemProps;\n};\n\nexport type TabItemStatus = \"active\" | \"notActive\";\n\ninterface TabEventProps {\n  target: number;\n}\n\ninterface TabKeyboardEventProps extends TabEventProps {\n  event: KeyboardEvent<HTMLButtonElement>;\n}\n\nexport interface TabsProps extends Omit<ComponentProps<\"div\">, \"ref\">, ThemingProps<TabsTheme> {\n  onActiveTabChange?: (activeTab: number) => void;\n  variant?: keyof TabStyles;\n}\n\nexport interface TabsRef {\n  setActiveTab: (activeTab: number) => void;\n}\n\nexport const Tabs = forwardRef<TabsRef, TabsProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [tabsTheme, provider.theme?.tabs, props.theme],\n    [get(provider.clearTheme, \"tabs\"), props.clearTheme],\n    [get(provider.applyTheme, \"tabs\"), props.applyTheme],\n  );\n\n  const {\n    children,\n    className,\n    onActiveTabChange,\n    variant = \"default\",\n    ...restProps\n  } = resolveProps(props, provider.props?.tabs);\n\n  const id = useId();\n  const tabs = useMemo(\n    () =>\n      Children.map(Children.toArray(children) as ReactElement<PropsWithChildren<TabItemProps>>[], ({ props }) => props),\n    [children],\n  );\n  const tabRefs = useRef<HTMLButtonElement[]>([]);\n  const [activeTab, setActiveTab] = useState(\n    Math.max(\n      0,\n      tabs.findIndex((tab) => tab.active),\n    ),\n  );\n  const [focusedTab, setFocusedTab] = useState(-1);\n\n  function setActiveTabWithCallback(activeTab: number) {\n    setActiveTab(activeTab);\n    if (onActiveTabChange) onActiveTabChange(activeTab);\n  }\n\n  function handleClick({ target }: TabEventProps): void {\n    setActiveTabWithCallback(target);\n    setFocusedTab(target);\n  }\n\n  function handleKeyboard({ event, target }: TabKeyboardEventProps): void {\n    if (event.key === \"ArrowLeft\") {\n      setFocusedTab(Math.max(0, focusedTab - 1));\n    }\n\n    if (event.key === \"ArrowRight\") {\n      setFocusedTab(Math.min(tabs.length - 1, focusedTab + 1));\n    }\n\n    if (event.key === \"Enter\") {\n      setActiveTabWithCallback(target);\n      setFocusedTab(target);\n    }\n  }\n\n  const tabItemStyle = theme.tablist.tabitem.variant[variant];\n  const tabItemContainerStyle = theme.tabitemcontainer.variant[variant];\n\n  useEffect(() => {\n    tabRefs.current[focusedTab]?.focus();\n  }, [focusedTab]);\n\n  useImperativeHandle(ref, () => ({\n    setActiveTab: setActiveTabWithCallback,\n  }));\n\n  return (\n    <div className={twMerge(theme.base, className)}>\n      <div\n        aria-label=\"Tabs\"\n        role=\"tablist\"\n        className={twMerge(theme.tablist.base, theme.tablist.variant[variant], className)}\n        {...restProps}\n      >\n        {tabs.map((tab, index) => (\n          <button\n            key={index}\n            type=\"button\"\n            aria-controls={`${id}-tabpanel-${index}`}\n            aria-selected={index === activeTab}\n            className={twMerge(\n              theme.tablist.tabitem.base,\n              tabItemStyle.base,\n              index === activeTab && tabItemStyle.active.on,\n              index !== activeTab && !tab.disabled && tabItemStyle.active.off,\n            )}\n            disabled={tab.disabled}\n            id={`${id}-tab-${index}`}\n            onClick={() => handleClick({ target: index })}\n            onKeyDown={(event) => handleKeyboard({ event, target: index })}\n            ref={(element) => {\n              tabRefs.current[index] = element as HTMLButtonElement;\n            }}\n            role=\"tab\"\n            tabIndex={index === focusedTab ? 0 : -1}\n            style={{ zIndex: index === focusedTab ? 2 : 1 }}\n          >\n            {tab.icon && <tab.icon className={theme.tablist.tabitem.icon} />}\n            {tab.title}\n          </button>\n        ))}\n      </div>\n      <div className={twMerge(theme.tabitemcontainer.base, tabItemContainerStyle)}>\n        {tabs.map((tab, index) => (\n          <div\n            key={index}\n            aria-labelledby={`${id}-tab-${index}`}\n            className={theme.tabpanel}\n            hidden={index !== activeTab}\n            id={`${id}-tabpanel-${index}`}\n            role=\"tabpanel\"\n            tabIndex={0}\n          >\n            {tab.children}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n});\n\nTabs.displayName = \"Tabs\";\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
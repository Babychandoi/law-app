{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { ButtonGroupContext } from './ButtonGroupContext.js';\nimport { buttonGroupTheme } from './theme.js';\nconst ButtonGroup = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([buttonGroupTheme, provider.theme?.buttonGroup, props.theme], [get(provider.clearTheme, \"buttonGroup\"), props.clearTheme], [get(provider.applyTheme, \"buttonGroup\"), props.applyTheme]);\n  const {\n    children,\n    className,\n    outline,\n    pill,\n    ...restProps\n  } = resolveProps(props, provider.props?.buttonGroup);\n  return /* @__PURE__ */jsx(ButtonGroupContext.Provider, {\n    value: {\n      outline,\n      pill\n    },\n    children: /* @__PURE__ */jsx(\"div\", {\n      ref,\n      className: twMerge(theme.base, className),\n      role: \"group\",\n      ...restProps,\n      children\n    })\n  });\n});\nButtonGroup.displayName = \"ButtonGroup\";\nexport { ButtonGroup };","map":{"version":3,"names":["ButtonGroup","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","buttonGroupTheme","buttonGroup","get","clearTheme","applyTheme","children","className","outline","pill","restProps","resolveProps","jsx","ButtonGroupContext","Provider","value","twMerge","base","role"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Button\\ButtonGroup.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport type { ButtonProps } from \"../Button/Button\";\nimport { ButtonGroupContext } from \"./ButtonGroupContext\";\nimport { buttonGroupTheme } from \"./theme\";\n\nexport interface ButtonGroupTheme {\n  base: string;\n}\n\nexport interface ButtonGroupProps\n  extends ComponentProps<\"div\">,\n    Pick<ButtonProps, \"outline\" | \"pill\">,\n    ThemingProps<ButtonGroupTheme> {}\n\nexport const ButtonGroup = forwardRef<HTMLDivElement, ButtonGroupProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [buttonGroupTheme, provider.theme?.buttonGroup, props.theme],\n    [get(provider.clearTheme, \"buttonGroup\"), props.clearTheme],\n    [get(provider.applyTheme, \"buttonGroup\"), props.applyTheme],\n  );\n\n  const { children, className, outline, pill, ...restProps } = resolveProps(props, provider.props?.buttonGroup);\n\n  return (\n    <ButtonGroupContext.Provider value={{ outline, pill }}>\n      <div ref={ref} className={twMerge(theme.base, className)} role=\"group\" {...restProps}>\n        {children}\n      </div>\n    </ButtonGroupContext.Provider>\n  );\n});\n\nButtonGroup.displayName = \"ButtonGroup\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,WAAc,GAAGC,UAAA,EAAAC,KAAkB,EAAAC,GAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAA0B,CAC3B,CAACC,gBAAa,EAAAJ,QAAY,CAAAE,KAAA,EAAAG,WAAgB,EAAMP,KAAA,CAAAI,KAAW,GAC3D,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,aAAa,CAAC,EAAET,KAAK,CAACS,UAAU,GAC3D,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,kBAAAV,KAAA,CAAAU,UAAA,CACD;EACA;IAAAC,QAAA;IAAAC,SAA2B;IAAAC,OAAA;IAAAC,IAAA;IAAA,GAAmBC;EAAU,CAAE,GAAAC,YAAS,CAAOhB,KAAE,EAAIE,QAAI,CAAAF,KAAQ,EAAAO,WAAA;EAC7F,sBAAAU,GAAA,CAAAC,kBAAA,CAAAC,QAAA;IAAAC,KAAA;MAAAP,OAAA;MAAAC;IAAA;IAAAH,QAAA,iBAAAM,GAAA;MAAAhB,GAAA;MAAAW,SAAA,EAAAS,OAAA,CAAAjB,KAAA,CAAAkB,IAAA,EAAAV,SAAA;MAAAW,IAAA;MAAA,GAAAR,SAAA;MAAAJ;IAAA;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
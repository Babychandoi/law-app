{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef, useId } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useSidebarContext } from './SidebarContext.js';\nimport { sidebarTheme } from './theme.js';\nconst SidebarLogo = forwardRef((props, ref) => {\n  const id = useId();\n  const {\n    theme: rootTheme,\n    clearTheme: rootClearTheme,\n    applyTheme: rootApplyTheme,\n    isCollapsed\n  } = useSidebarContext();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([sidebarTheme.logo, provider.theme?.sidebar?.logo, rootTheme?.logo, props.theme], [get(provider.clearTheme, \"sidebar.logo\"), get(rootClearTheme, \"logo\"), props.clearTheme], [get(provider.applyTheme, \"sidebar.logo\"), get(rootApplyTheme, \"logo\"), props.applyTheme]);\n  const {\n    children,\n    className,\n    href,\n    img,\n    imgAlt = \"\",\n    ...restProps\n  } = resolveProps(props, provider.props?.sidebarLogo);\n  return /* @__PURE__ */jsxs(\"a\", {\n    ref,\n    \"aria-labelledby\": `flowbite-sidebar-logo-${id}`,\n    href,\n    className: twMerge(theme.base, className),\n    ...restProps,\n    children: [/* @__PURE__ */jsx(\"img\", {\n      alt: imgAlt,\n      src: img,\n      className: theme.img\n    }), /* @__PURE__ */jsx(\"span\", {\n      className: theme.collapsed[isCollapsed ? \"on\" : \"off\"],\n      id: `flowbite-sidebar-logo-${id}`,\n      children\n    })]\n  });\n});\nSidebarLogo.displayName = \"SidebarLogo\";\nexport { SidebarLogo };","map":{"version":3,"names":["SidebarLogo","forwardRef","props","ref","id","useId","theme","rootTheme","clearTheme","rootClearTheme","applyTheme","rootApplyTheme","isCollapsed","useSidebarContext","provider","useThemeProvider","useResolveTheme","sidebarTheme","logo","sidebar","get","children","className","href","img","imgAlt","restProps","resolveProps","sidebarLogo","jsxs","twMerge","base","jsx","alt","src","collapsed"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Sidebar\\SidebarLogo.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps } from \"react\";\nimport { forwardRef, useId } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { FlowbiteBoolean, ThemingProps } from \"../../types\";\nimport { useSidebarContext } from \"./SidebarContext\";\nimport { sidebarTheme } from \"./theme\";\n\nexport interface SidebarLogoTheme {\n  base: string;\n  collapsed: FlowbiteBoolean;\n  img: string;\n}\n\nexport interface SidebarLogoProps extends ComponentProps<\"a\">, ThemingProps<SidebarLogoTheme> {\n  href: string;\n  img: string;\n  imgAlt?: string;\n}\n\nexport const SidebarLogo = forwardRef<HTMLAnchorElement, SidebarLogoProps>((props, ref) => {\n  const id = useId();\n  const { theme: rootTheme, clearTheme: rootClearTheme, applyTheme: rootApplyTheme, isCollapsed } = useSidebarContext();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [sidebarTheme.logo, provider.theme?.sidebar?.logo, rootTheme?.logo, props.theme],\n    [get(provider.clearTheme, \"sidebar.logo\"), get(rootClearTheme, \"logo\"), props.clearTheme],\n    [get(provider.applyTheme, \"sidebar.logo\"), get(rootApplyTheme, \"logo\"), props.applyTheme],\n  );\n\n  const {\n    children,\n    className,\n    href,\n    img,\n    imgAlt = \"\",\n    ...restProps\n  } = resolveProps(props, provider.props?.sidebarLogo);\n\n  return (\n    <a\n      ref={ref}\n      aria-labelledby={`flowbite-sidebar-logo-${id}`}\n      href={href}\n      className={twMerge(theme.base, className)}\n      {...restProps}\n    >\n      <img alt={imgAlt} src={img} className={theme.img} />\n      <span className={theme.collapsed[isCollapsed ? \"on\" : \"off\"]} id={`flowbite-sidebar-logo-${id}`}>\n        {children}\n      </span>\n    </a>\n  );\n});\n\nSidebarLogo.displayName = \"SidebarLogo\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,WAAW,GAAOC,UAAA,EAAAC,KAAA,EAAAC,GAAA;EAClB,MAAMC,EAAE,GAAAC,KAAO;EACf,MAAM;IAAAC,KAAA,EAAQC,SAAG;IAAAC,UAAkB,EAAAC,cAAA;IAAAC,UAAA,EAAAC,cAAA;IAAAC;EAAA,IAAAC,iBAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKT,KAAA,GAAAU,eAAmB,CACpB,CAACC,YAAY,CAACC,IAAA,EAAAJ,QAAY,CAAAR,KAAA,EAAAa,OAAiB,EAAAD,IAAI,EAAAX,SAAA,EAAcW,IAAE,EAAAhB,KAAS,CAAAI,KAAM,GAC9E,CAACc,GAAG,CAACN,QAAQ,CAACN,UAAU,EAAE,cAAc,CAAC,EAAEY,GAAG,CAACX,cAAc,EAAE,MAAM,CAAC,EAAEP,KAAK,CAACM,UAAU,GACzF,CAAAY,GAAA,CAAAN,QAAA,CAAAJ,UAAA,mBAAAU,GAAA,CAAAT,cAAA,WAAAT,KAAA,CAAAQ,UAAA,CACD;EACF,MAAI;IACAW,QAAA;IACAC,SAAI;IACJC,IAAG;IACHC,GAAA;IACAC,MAAG;IACJ,GAAGC;EACJ,IAAAC,YAAA,CAAAzB,KAAA,EAAuBY,QAAI,CAAAZ,KAAA,EAAA0B,WAAA;EAC7B,OAAO,eAAAC,IAAA,CACH,KACJ;IACM1B,GAAA;IACA,iBAAI,2BAAAC,EAAA;IACJmB,IAAA;IACAD,SAAG,EAAAQ,OAAS,CAAAxB,KAAA,CAAAyB,IAAA,EAAAT,SAAA;IACZ,GAAAI,SAAU;IAChBL,QAAA,GACA,eAAwBW,GAAG,CAAC,OAAM;MAAEC,GAAE,EAAAR,MAAS;MAAES,GAAA,EAAMV,GAAA;MAAAF,SAAU,EAAAhB,KAAW,CAAAkB;IAAG,EAAI,EACnF,eAAAQ,GAAA;MAAAV,SAAA,EAAAhB,KAAA,CAAA6B,SAAA,CAAAvB,WAAA;MAAAR,EAAA,2BAAAA,EAAA;MAAAiB;IAAA;EAEG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
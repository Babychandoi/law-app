{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { avatarTheme } from './theme.js';\nconst AvatarGroup = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([avatarTheme.group, provider.theme?.avatar?.group, props.theme], [get(provider.clearTheme, \"avatar\"), props.clearTheme], [get(provider.applyTheme, \"avatar\"), props.applyTheme]);\n  const {\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.avatarGroup);\n  return /* @__PURE__ */jsx(\"div\", {\n    ref,\n    \"data-testid\": \"avatar-group-element\",\n    className: twMerge(theme.base, className),\n    ...restProps\n  });\n});\nAvatarGroup.displayName = \"AvatarGroup\";\nexport { AvatarGroup };","map":{"version":3,"names":["AvatarGroup","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","avatarTheme","group","avatar","get","clearTheme","applyTheme","className","restProps","resolveProps","avatarGroup","jsx","twMerge","base"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Avatar\\AvatarGroup.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { avatarTheme } from \"./theme\";\n\nexport interface AvatarGroupTheme {\n  base: string;\n}\n\nexport interface AvatarGroupProps extends ComponentProps<\"div\">, ThemingProps<AvatarGroupTheme> {}\n\nexport const AvatarGroup = forwardRef<HTMLDivElement, AvatarGroupProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [avatarTheme.group, provider.theme?.avatar?.group, props.theme],\n    [get(provider.clearTheme, \"avatar\"), props.clearTheme],\n    [get(provider.applyTheme, \"avatar\"), props.applyTheme],\n  );\n\n  const { className, ...restProps } = resolveProps(props, provider.props?.avatarGroup);\n\n  return <div ref={ref} data-testid=\"avatar-group-element\" className={twMerge(theme.base, className)} {...restProps} />;\n});\n\nAvatarGroup.displayName = \"AvatarGroup\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,WAAc,GAAGC,UAAA,EAAAC,KAAkB,EAAAC,GAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAWC,eAAQ,CACpB,CAACC,WAAI,CAAQC,KAAC,EAAAL,QAAY,CAAAE,KAAQ,EAACI,MAAO,EAACD,KAAA,EAAAP,KAAW,CAAAI,KAAA,GACtD,CAACK,GAAG,CAACP,QAAQ,CAACQ,UAAU,EAAE,QAAQ,CAAC,EAAEV,KAAK,CAACU,UAAU,GACtD,CAAAD,GAAA,CAAAP,QAAA,CAAAS,UAAA,aAAAX,KAAA,CAAAW,UAAA,CACD;EACA;IAAAC,SAAA;IAAA,GAAAC;EAAgC,IAAIC,YAAK,CAAAd,KAAa,EAAEE,QAAA,CAAAF,KAAA,EAAAe,WAAwB;EACjF,sBAAAC,GAAA;IAAAf,GAAA;IAAA;IAAAW,SAAA,EAAAK,OAAA,CAAAb,KAAA,CAAAc,IAAA,EAAAN,SAAA;IAAA,GAAAC;EAAA;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
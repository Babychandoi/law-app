{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { cardTheme } from './theme.js';\nconst Card = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([cardTheme, provider.theme?.card, props.theme], [get(provider.clearTheme, \"card\"), props.clearTheme], [get(provider.applyTheme, \"card\"), props.applyTheme]);\n  const {\n    children,\n    className,\n    horizontal,\n    href,\n    imgAlt,\n    imgSrc,\n    renderImage,\n    ...restProps\n  } = resolveProps(props, provider.props?.card);\n  const Component = typeof href === \"undefined\" ? \"div\" : \"a\";\n  return /* @__PURE__ */jsxs(Component, {\n    ref,\n    \"data-testid\": \"flowbite-card\",\n    href,\n    className: twMerge(theme.root.base, theme.root.horizontal[horizontal ? \"on\" : \"off\"], href && theme.root.href, className),\n    ...restProps,\n    children: [renderImage?.(theme, !!horizontal) ?? (imgSrc && /* @__PURE__ */jsx(\"img\", {\n      \"data-testid\": \"flowbite-card-image\",\n      alt: imgAlt ?? \"\",\n      src: imgSrc,\n      className: twMerge(theme.img.base, theme.img.horizontal[props.horizontal ? \"on\" : \"off\"])\n    })), /* @__PURE__ */jsx(\"div\", {\n      className: theme.root.children,\n      children\n    })]\n  });\n});\nCard.displayName = \"Card\";\nexport { Card };","map":{"version":3,"names":["Card","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","cardTheme","card","get","clearTheme","applyTheme","children","className","horizontal","href","imgAlt","imgSrc","renderImage","restProps","resolveProps","Component","jsxs","twMerge","root","base","jsx","alt","src","img"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Card\\Card.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { DeepPartial, FlowbiteBoolean, ThemingProps } from \"../../types\";\nimport { cardTheme } from \"./theme\";\n\nexport interface CardTheme {\n  root: CardRootTheme;\n  img: CardImageTheme;\n}\n\nexport interface CardRootTheme {\n  base: string;\n  children: string;\n  horizontal: FlowbiteBoolean;\n  href: string;\n}\n\nexport interface CardImageTheme {\n  base: string;\n  horizontal: FlowbiteBoolean;\n}\n\ninterface CommonCardProps extends ComponentProps<\"div\">, ThemingProps<CardTheme> {\n  horizontal?: boolean;\n  href?: string;\n}\n\nexport type CardProps = (\n  | { imgAlt?: string; imgSrc?: string; renderImage?: never }\n  | {\n      /** Allows to provide a custom render function for the image component. Useful in Next.JS and Gatsby. **Setting this will disable `imgSrc` and `imgAlt`**.\n       */\n      renderImage?: (theme: DeepPartial<CardTheme>, horizontal: boolean) => JSX.Element;\n      imgAlt?: never;\n      imgSrc?: never;\n    }\n) &\n  CommonCardProps;\n\nexport const Card = forwardRef<HTMLDivElement | HTMLAnchorElement, CardProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [cardTheme, provider.theme?.card, props.theme],\n    [get(provider.clearTheme, \"card\"), props.clearTheme],\n    [get(provider.applyTheme, \"card\"), props.applyTheme],\n  );\n\n  const { children, className, horizontal, href, imgAlt, imgSrc, renderImage, ...restProps } = resolveProps(\n    props,\n    provider.props?.card,\n  );\n\n  const Component = typeof href === \"undefined\" ? \"div\" : \"a\";\n\n  return (\n    <Component\n      // @ts-expect-error - bypass\n      ref={ref}\n      data-testid=\"flowbite-card\"\n      href={href}\n      className={twMerge(\n        theme.root.base,\n        theme.root.horizontal[horizontal ? \"on\" : \"off\"],\n        href && theme.root.href,\n        className,\n      )}\n      {...restProps}\n    >\n      {renderImage?.(theme, !!horizontal) ??\n        (imgSrc && (\n          <img\n            data-testid=\"flowbite-card-image\"\n            alt={imgAlt ?? \"\"}\n            src={imgSrc}\n            className={twMerge(theme.img.base, theme.img.horizontal[props.horizontal ? \"on\" : \"off\"])}\n          />\n        ))}\n      <div className={theme.root.children}>{children}</div>\n    </Component>\n  );\n});\n\nCard.displayName = \"Card\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,IAAM,GAAAC,UAAW,EAAAC,KAAA,EAAAC,GAAgB,KAAE;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAWC,eAAc,CAC1B,CAACC,SAAI,EAAAJ,QAAS,CAAAE,KAAY,EAAAG,IAAM,EAACP,KAAE,CAAKI,KAAC,GACzC,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,MAAM,CAAC,EAAET,KAAK,CAACS,UAAU,GACpD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,WAAAV,KAAA,CAAAU,UAAA,CACD;EACF,MAAI;IAAKC,QAAA;IAAAC,SAAA;IAAAC,UAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,MAAA;IAAAC,WAAA;IAAA,GAAAC;EAAA,IAAAC,YAAA,CACLnB,KAAA,EACDE,QAAA,CAAAF,KAAA,EAAAO,IACD;EACA,MAAAa,SAAA,UAAuBN,IAAI;EAC7B,OAAI,eAASO,IAAA,CACTD,SAAA,EACJ;IACMnB,GAAA;IACA,aAAI;IACJa,IAAA;IACNF,SAAc,EAAAU,OAAS,CACflB,KAAK,CAACmB,IAAI,CAACC,IAAA,EACXpB,KAAI,CAAAmB,IAAI,CAAAV,UAAW,CAAAA,UAAI,kBACvBC,IAAA,IAAAV,KAAA,CAAAmB,IAAA,CAAAT,IAAA,EACDF,SACD;IACA,GAAAM,SAAU;IAChBP,QAAQ,GACRM,WAAe,GAAAb,KAAA,IAAAS,UAAA,MAAAG,MAAA,mBAAAS,GAAA,CACL,OACV;MACY,aAAW,EAAI,qBAAE;MACjBC,GAAG,EAAEX,MAAM;MACXY,GAAA,EAAAX,MAAW;MACvBJ,SAAA,EAAAU,OAAA,CAAAlB,KAAA,CAAAwB,GAAA,CAAAJ,IAAA,EAAApB,KAAA,CAAAwB,GAAA,CAAAf,UAAA,CAAAb,KAAA,CAAAa,UAAA;IACU,CACV,IACA,eAAAY,GAAA;MAAAb,SAAA,EAAAR,KAAA,CAAAmB,IAAA,CAAAZ,QAAA;MAAAA;IAAA;EAEG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
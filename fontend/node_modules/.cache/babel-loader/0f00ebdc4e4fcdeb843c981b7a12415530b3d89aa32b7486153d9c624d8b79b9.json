{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { badgeTheme } from './theme.js';\nconst Badge = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([badgeTheme, provider.theme?.badge, props.theme], [get(provider.clearTheme, \"badge\"), props.clearTheme], [get(provider.applyTheme, \"badge\"), props.applyTheme]);\n  const {\n    children,\n    color = \"info\",\n    icon: Icon,\n    size = \"xs\",\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.badge);\n  return /* @__PURE__ */jsxs(\"span\", {\n    ref,\n    className: twMerge(theme.root.base, theme.root.color[color], theme.root.size[size], theme.icon[Icon ? \"on\" : \"off\"], className),\n    \"data-testid\": \"flowbite-badge\",\n    ...restProps,\n    children: [Icon && /* @__PURE__ */jsx(Icon, {\n      \"aria-hidden\": true,\n      className: theme.icon.size[size],\n      \"data-testid\": \"flowbite-badge-icon\"\n    }), children && /* @__PURE__ */jsx(\"span\", {\n      children\n    })]\n  });\n});\nBadge.displayName = \"Badge\";\nexport { Badge };","map":{"version":3,"names":["Badge","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","badgeTheme","badge","get","clearTheme","applyTheme","children","color","icon","Icon","size","className","restProps","resolveProps","jsxs","twMerge","root","base","jsx"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Badge\\Badge.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, type ComponentProps, type FC } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type {\n  DynamicStringEnumKeysOf,\n  FlowbiteBoolean,\n  FlowbiteColors,\n  FlowbiteSizes,\n  ThemingProps,\n} from \"../../types\";\nimport { badgeTheme } from \"./theme\";\n\nexport interface BadgeTheme {\n  root: BadgeRootTheme;\n  icon: BadgeIconTheme;\n}\n\nexport interface BadgeRootTheme {\n  base: string;\n  color: FlowbiteColors;\n  size: BadgeSizes;\n}\n\nexport interface BadgeIconTheme extends FlowbiteBoolean {\n  size: BadgeSizes;\n}\n\nexport interface BadgeSizes extends Pick<FlowbiteSizes, \"xs\" | \"sm\"> {\n  [key: string]: string;\n}\n\nexport interface BadgeProps extends Omit<ComponentProps<\"span\">, \"color\">, ThemingProps<BadgeTheme> {\n  color?: DynamicStringEnumKeysOf<FlowbiteColors>;\n  icon?: FC<ComponentProps<\"svg\">>;\n  size?: DynamicStringEnumKeysOf<BadgeSizes>;\n}\n\nexport const Badge = forwardRef<HTMLSpanElement, BadgeProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [badgeTheme, provider.theme?.badge, props.theme],\n    [get(provider.clearTheme, \"badge\"), props.clearTheme],\n    [get(provider.applyTheme, \"badge\"), props.applyTheme],\n  );\n\n  const {\n    children,\n    color = \"info\",\n    icon: Icon,\n    size = \"xs\",\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.badge);\n\n  return (\n    <span\n      ref={ref}\n      className={twMerge(\n        theme.root.base,\n        theme.root.color[color],\n        theme.root.size[size],\n        theme.icon[Icon ? \"on\" : \"off\"],\n        className,\n      )}\n      data-testid=\"flowbite-badge\"\n      {...restProps}\n    >\n      {Icon && <Icon aria-hidden className={theme.icon.size[size]} data-testid=\"flowbite-badge-icon\" />}\n      {children && <span>{children}</span>}\n    </span>\n  );\n});\n\nBadge.displayName = \"Badge\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,KAAM,GAAAC,UAAW,EAAAC,KAAA,EAAAC,GAAgB,KAAE;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAUC,eAAgB,CAC3B,CAACC,UAAI,EAAQJ,QAAC,CAAAE,KAAY,EAAAG,KAAQ,EAAEP,KAAK,CAACI,KAAA,GAC1C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,OAAO,CAAC,EAAET,KAAK,CAACS,UAAU,GACrD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,YAAAV,KAAA,CAAAU,UAAA,CACD;EACF,MAAI;IACAC,QAAQ;IACRC,KAAI,GAAE,MAAI;IACVC,IAAI,EAAAC,IAAG;IACPC,IAAA,OAAS;IACTC,SAAG;IACJ,GAAGC;EACJ,IAAAC,YAAA,CAAAlB,KAAA,EAAuBE,QAAI,CAAAF,KAAA,EAAAO,KAAA;EAC7B,OAAI,eAAMY,IAAA,CACN,QACJ;IACMlB,GAAA;IACNe,SAAc,EAAAI,OAAS,CACfhB,KAAK,CAACiB,IAAI,CAACC,IAAA,EACXlB,KAAK,CAACiB,IAAI,CAACT,KAAK,CAAAA,KAAK,GACrBR,KAAK,CAACiB,IAAI,CAACN,IAAI,CAAAA,IAAG,GAClBX,KAAA,CAAAS,IAAA,CAAAC,IAAA,kBACDE,SACD;IACA,aAAY;IACZ,GAAAC,SAAU;IAChBN,QAAY,GACJG,IAAA,IAAQ,eAAAS,GAAA,CAAoBT,IAAI;MAAA,aAAU,EAAQ,IAAE;MAAAE,SAAA,EAAAZ,KAAA,CAAAS,IAAA,CAAAE,IAAA,CAAAA,IAAA;MAAA;IAAA,IAC5DJ,QAAA,mBAAAY,GAAA;MAAAZ;IAAA;EAEG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { useAccordionContext } from './AccordionPanelContext.js';\nimport { accordionTheme } from './theme.js';\nfunction AccordionTitle(props) {\n  const {\n    arrowIcon: ArrowIcon,\n    flush,\n    isOpen,\n    setOpen\n  } = useAccordionContext();\n  const onClick = () => typeof setOpen !== \"undefined\" && setOpen();\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([accordionTheme.title, provider.theme?.accordion?.title, props.theme], [get(provider.clearTheme, \"accordion.title\"), props.clearTheme], [get(provider.applyTheme, \"accordion.title\"), props.applyTheme]);\n  const {\n    as: Heading = \"h2\",\n    children,\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.accordionTitle);\n  return /* @__PURE__ */jsxs(\"button\", {\n    className: twMerge(theme.base, theme.flush[flush ? \"on\" : \"off\"], theme.open[isOpen ? \"on\" : \"off\"], className),\n    onClick,\n    type: \"button\",\n    ...restProps,\n    children: [/* @__PURE__ */jsx(Heading, {\n      className: theme.heading,\n      \"data-testid\": \"flowbite-accordion-heading\",\n      children\n    }), ArrowIcon && /* @__PURE__ */jsx(ArrowIcon, {\n      \"aria-hidden\": true,\n      className: twMerge(theme.arrow.base, theme.arrow.open[isOpen ? \"on\" : \"off\"]),\n      \"data-testid\": \"flowbite-accordion-arrow\"\n    })]\n  });\n}\nAccordionTitle.displayName = \"AccordionTitle\";\nexport { AccordionTitle };","map":{"version":3,"names":["AccordionTitle","props","arrowIcon","ArrowIcon","flush","isOpen","setOpen","useAccordionContext","onClick","provider","useThemeProvider","theme","useResolveTheme","accordionTheme","title","accordion","get","clearTheme","applyTheme","as","Heading","children","className","restProps","resolveProps","accordionTitle","jsxs","twMerge","base","open","type","jsx","heading","arrow"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Accordion\\AccordionTitle.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps, FC } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { FlowbiteBoolean, FlowbiteHeadingLevel, ThemingProps } from \"../../types\";\nimport { useAccordionContext } from \"./AccordionPanelContext\";\nimport { accordionTheme } from \"./theme\";\n\nexport interface AccordionTitleTheme {\n  arrow: {\n    base: string;\n    open: FlowbiteBoolean;\n  };\n  base: string;\n  flush: FlowbiteBoolean;\n  heading: string;\n  open: FlowbiteBoolean;\n}\n\nexport interface AccordionTitleProps extends ComponentProps<\"button\">, ThemingProps<AccordionTitleTheme> {\n  arrowIcon?: FC<ComponentProps<\"svg\">>;\n  as?: FlowbiteHeadingLevel;\n}\n\nexport function AccordionTitle(props: AccordionTitleProps) {\n  const { arrowIcon: ArrowIcon, flush, isOpen, setOpen } = useAccordionContext();\n  const onClick = () => typeof setOpen !== \"undefined\" && setOpen();\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [accordionTheme.title, provider.theme?.accordion?.title, props.theme],\n    [get(provider.clearTheme, \"accordion.title\"), props.clearTheme],\n    [get(provider.applyTheme, \"accordion.title\"), props.applyTheme],\n  );\n\n  const { as: Heading = \"h2\", children, className, ...restProps } = resolveProps(props, provider.props?.accordionTitle);\n\n  return (\n    <button\n      className={twMerge(theme.base, theme.flush[flush ? \"on\" : \"off\"], theme.open[isOpen ? \"on\" : \"off\"], className)}\n      onClick={onClick}\n      type=\"button\"\n      {...restProps}\n    >\n      <Heading className={theme.heading} data-testid=\"flowbite-accordion-heading\">\n        {children}\n      </Heading>\n      {ArrowIcon && (\n        <ArrowIcon\n          aria-hidden\n          className={twMerge(theme.arrow.base, theme.arrow.open[isOpen ? \"on\" : \"off\"])}\n          data-testid=\"flowbite-accordion-arrow\"\n        />\n      )}\n    </button>\n  );\n}\n\nAccordionTitle.displayName = \"AccordionTitle\";\n"],"mappings":";;;;;;;;;;AAWA,SAAQA,cAAaA,CAAAC,KAAA,EAAS;EAC5B,MAAM;IAAAC,SAAU,EAAAC,SAAM;IAAOC,KAAA;IAAOC,MAAK;IAAAC;EAAW,IAAIC,mBAAS;EACjE,MAAMC,OAAA,GAAQA,CAAA,KAAG,OAAAF,OAAkB,oBAAAA,OAAA;EACnC,MAAMG,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAsB,CACvB,CAACC,cAAa,CAAAC,KAAA,EAAAL,QAAY,CAAAE,KAAA,EAAAI,SAAoB,EAAAD,KAAM,EAAAb,KAAU,CAACU,KAAA,GAC/D,CAACK,GAAG,CAACP,QAAQ,CAACQ,UAAU,EAAE,iBAAiB,CAAC,EAAEhB,KAAK,CAACgB,UAAU,GAC/D,CAAAD,GAAA,CAAAP,QAAA,CAAAS,UAAA,sBAAAjB,KAAA,CAAAiB,UAAA,CACD;EACA;IAAAC,EAAA,EAAAC,OAAA,OAAuB;IAAIC,QAAA;IAAAC,SAAA;IAAA,GAAAC;EAAA,IAAAC,YAAA,CAAAvB,KAAA,EAAAQ,QAAA,CAAAR,KAAA,EAAAwB,cAAA;EAC7B,OAAI,eAAQC,IAAA,CACR,UACJ;IACMJ,SAAO,EAAAK,OAAA,CAAAhB,KAAA,CAAAiB,IAAA,EAAAjB,KAAA,CAAAP,KAAA,CAAAA,KAAA,kBAAAO,KAAA,CAAAkB,IAAA,CAAAxB,MAAA,kBAAAiB,SAAA;IACPd,OAAM;IACNsB,IAAG,UAAS;IACZ,GAAAP,SAAU;IAChBF,QAAA,GACQ,eAASU,GAAA,CAAAX,OAAA,EAAoB;MAAAE,SAAG,EAAAX,KAAA,CAAAqB,OAAA;MAAA;MAAAX;IAAA,IACxClB,SAAU,IAAS,eAAA4B,GAAA,CACT5B,SAAA,EACV;MACY,aAAW,MAAQ;MACnBmB,SAAA,EAAAK,OAAe,CAAAhB,KAAA,CAAAsB,KAAA,CAAAL,IAAA,EAAAjB,KAAA,CAAAsB,KAAA,CAAAJ,IAAA,CAAAxB,MAAA;MAC3B;IACA,CACA;EAEG,CACH;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
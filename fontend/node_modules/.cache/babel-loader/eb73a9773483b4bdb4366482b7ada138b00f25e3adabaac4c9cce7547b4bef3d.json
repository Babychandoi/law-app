{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useState } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { CheckIcon } from '../../icons/check-icon.js';\nimport { ClipboardListIcon } from '../../icons/clipboard-list-icon.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { copyToClipboard } from './helpers.js';\nimport { clipboardTheme } from './theme.js';\nconst ClipboardWithIcon = forwardRef((props, ref) => {\n  const [isJustCopied, setIsJustCopied] = useState(false);\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([clipboardTheme.withIcon, provider.theme?.clipboard?.withIcon, props.theme], [get(provider.clearTheme, \"clipboard.withIcon\"), props.clearTheme], [get(provider.applyTheme, \"clipboard.withIcon\"), props.applyTheme]);\n  const {\n    valueToCopy,\n    icon: Icon = ClipboardListIcon,\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.clipboardWithIcon);\n  return /* @__PURE__ */jsx(\"button\", {\n    className: twMerge(theme.base, className),\n    onClick: () => copyToClipboard(valueToCopy, setIsJustCopied),\n    ...restProps,\n    ref,\n    children: isJustCopied ? /* @__PURE__ */jsx(CheckIcon, {\n      \"aria-hidden\": true,\n      className: theme.icon.successIcon\n    }) : /* @__PURE__ */jsx(Icon, {\n      \"aria-hidden\": true,\n      className: theme.icon.defaultIcon\n    })\n  });\n});\nClipboardWithIcon.displayName = \"Clipboard.WithIcon\";\nexport { ClipboardWithIcon };","map":{"version":3,"names":["ClipboardWithIcon","forwardRef","props","ref","isJustCopied","setIsJustCopied","useState","provider","useThemeProvider","theme","useResolveTheme","clipboardTheme","withIcon","clipboard","get","clearTheme","applyTheme","valueToCopy","icon","Icon","ClipboardListIcon","className","restProps","resolveProps","clipboardWithIcon","jsx","twMerge","base","onClick","copyToClipboard","children","CheckIcon","successIcon","defaultIcon"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Clipboard\\ClipboardWithIcon.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, useState, type ComponentProps, type FC } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { CheckIcon } from \"../../icons/check-icon\";\nimport { ClipboardListIcon } from \"../../icons/clipboard-list-icon\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { copyToClipboard } from \"./helpers\";\nimport { clipboardTheme } from \"./theme\";\n\nexport interface ClipboardWithIconTheme {\n  base: string;\n  icon: {\n    defaultIcon: string;\n    successIcon: string;\n  };\n}\n\nexport interface ClipboardWithIconProps extends ComponentProps<\"button\">, ThemingProps<ClipboardWithIconTheme> {\n  valueToCopy: string;\n  icon?: FC<ComponentProps<\"svg\">>;\n}\n\nexport const ClipboardWithIcon = forwardRef<HTMLButtonElement, ClipboardWithIconProps>((props, ref) => {\n  const [isJustCopied, setIsJustCopied] = useState(false);\n\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [clipboardTheme.withIcon, provider.theme?.clipboard?.withIcon, props.theme],\n    [get(provider.clearTheme, \"clipboard.withIcon\"), props.clearTheme],\n    [get(provider.applyTheme, \"clipboard.withIcon\"), props.applyTheme],\n  );\n\n  const {\n    valueToCopy,\n    icon: Icon = ClipboardListIcon,\n    className,\n    ...restProps\n  } = resolveProps(props, provider.props?.clipboardWithIcon);\n\n  return (\n    <button\n      className={twMerge(theme.base, className)}\n      onClick={() => copyToClipboard(valueToCopy, setIsJustCopied)}\n      {...restProps}\n      ref={ref}\n    >\n      {isJustCopied ? (\n        <CheckIcon aria-hidden className={theme.icon.successIcon} />\n      ) : (\n        <Icon aria-hidden className={theme.icon.defaultIcon} />\n      )}\n    </button>\n  );\n});\n\nClipboardWithIcon.displayName = \"Clipboard.WithIcon\";\n"],"mappings":";;;;;;;;;;;;;AAcA,MAAEA,iBAAqB,GAAAC,UAAA,EAAeC,KAAI,EAAAC,GAAA,KAAS;EACjD,MAAM,CAAAC,YAAW,EAAAC,eAAkB,IAAAC,QAAA;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAAC,eAAyB,CAC1B,CAACC,cAAa,CAAAC,QAAU,EAAEL,QAAA,CAAAE,KAAA,EAAAI,SAAuB,EAAAD,QAAM,EAAAV,KAAW,CAAAO,KAAA,GAClE,CAACK,GAAG,CAACP,QAAQ,CAACQ,UAAU,EAAE,oBAAoB,CAAC,EAAEb,KAAK,CAACa,UAAU,GAClE,CAAAD,GAAA,CAAAP,QAAA,CAAAS,UAAA,yBAAAd,KAAA,CAAAc,UAAA,CACD;EACF,MAAI;IACAC,WAAU;IACVC,IAAA,EAAAC,IAAS,GAAAC,iBAAA;IACTC,SAAG;IACJ,GAAGC;EACJ,IAAAC,YAAA,CAAArB,KAAA,EAAuBK,QAAG,CAAAL,KAAA,EAAAsB,iBAAA;EAC5B,OAAI,eAAQC,GAAA,CACR,UACJ;IACMJ,SAAS,EAAAK,OAAM,CAAAjB,KAAA,CAAAkB,IAAA,EAAgBN,SAAA;IAC/BO,OAAG,EAAAA,CAAA,KAASC,eAAA,CAAAZ,WAAA,EAAAZ,eAAA;IACZ,GAAGiB,SAAA;IACHnB,GAAA;IACN2B,QAAA,EAAA1B,YAAA,kBAAAqB,GAAA,CAAAM,SAAA;MAAA;MAAAV,SAAA,EAAAZ,KAAA,CAAAS,IAAA,CAAAc;IAAA,oBAAAP,GAAA,CAAAN,IAAA;MAAA;MAAAE,SAAA,EAAAZ,KAAA,CAAAS,IAAA,CAAAe;IAAA;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
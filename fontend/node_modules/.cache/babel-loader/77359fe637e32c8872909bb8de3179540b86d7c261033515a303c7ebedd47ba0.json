{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useState } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { NavbarContext } from './NavbarContext.js';\nimport { navbarTheme } from './theme.js';\nconst Navbar = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([navbarTheme, provider.theme?.navbar, props.theme], [get(provider.clearTheme, \"navbar\"), props.clearTheme], [get(provider.applyTheme, \"navbar\"), props.applyTheme]);\n  const {\n    border,\n    children,\n    className,\n    fluid = false,\n    menuOpen,\n    rounded,\n    ...restProps\n  } = resolveProps(props, provider.props?.navbar);\n  const [isOpen, setIsOpen] = useState(menuOpen);\n  return /* @__PURE__ */jsx(NavbarContext.Provider, {\n    value: {\n      theme: props.theme,\n      clearTheme: props.clearTheme,\n      applyTheme: props.applyTheme,\n      isOpen,\n      setIsOpen\n    },\n    children: /* @__PURE__ */jsx(\"nav\", {\n      ref,\n      className: twMerge(theme.root.base, theme.root.bordered[border ? \"on\" : \"off\"], theme.root.rounded[rounded ? \"on\" : \"off\"], className),\n      ...restProps,\n      children: /* @__PURE__ */jsx(\"div\", {\n        className: twMerge(theme.root.inner.base, theme.root.inner.fluid[fluid ? \"on\" : \"off\"]),\n        children\n      })\n    })\n  });\n});\nNavbar.displayName = \"Navbar\";\nexport { Navbar };","map":{"version":3,"names":["Navbar","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","navbarTheme","navbar","get","clearTheme","applyTheme","border","children","className","fluid","menuOpen","rounded","restProps","resolveProps","isOpen","setIsOpen","useState","jsx","NavbarContext","Provider","value","twMerge","root","base","bordered","inner"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\Navbar\\Navbar.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps } from \"react\";\nimport { forwardRef, useState } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { FlowbiteBoolean, ThemingProps } from \"../../types\";\nimport type { NavbarBrandTheme } from \"./NavbarBrand\";\nimport type { NavbarCollapseTheme } from \"./NavbarCollapse\";\nimport { NavbarContext } from \"./NavbarContext\";\nimport type { NavbarLinkTheme } from \"./NavbarLink\";\nimport type { NavbarToggleThem } from \"./NavbarToggle\";\nimport { navbarTheme } from \"./theme\";\n\nexport interface NavbarTheme {\n  root: NavbarRootTheme;\n  brand: NavbarBrandTheme;\n  collapse: NavbarCollapseTheme;\n  link: NavbarLinkTheme;\n  toggle: NavbarToggleThem;\n}\n\nexport interface NavbarRootTheme {\n  base: string;\n  rounded: FlowbiteBoolean;\n  bordered: FlowbiteBoolean;\n  inner: {\n    base: string;\n    fluid: FlowbiteBoolean;\n  };\n}\n\nexport interface NavbarProps extends ComponentProps<\"nav\">, ThemingProps<NavbarTheme> {\n  menuOpen?: boolean;\n  fluid?: boolean;\n  rounded?: boolean;\n  border?: boolean;\n}\n\nexport const Navbar = forwardRef<HTMLElement, NavbarProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [navbarTheme, provider.theme?.navbar, props.theme],\n    [get(provider.clearTheme, \"navbar\"), props.clearTheme],\n    [get(provider.applyTheme, \"navbar\"), props.applyTheme],\n  );\n\n  const {\n    border,\n    children,\n    className,\n    fluid = false,\n    menuOpen,\n    rounded,\n    ...restProps\n  } = resolveProps(props, provider.props?.navbar);\n\n  const [isOpen, setIsOpen] = useState(menuOpen);\n\n  return (\n    <NavbarContext.Provider\n      value={{ theme: props.theme, clearTheme: props.clearTheme, applyTheme: props.applyTheme, isOpen, setIsOpen }}\n    >\n      <nav\n        ref={ref}\n        className={twMerge(\n          theme.root.base,\n          theme.root.bordered[border ? \"on\" : \"off\"],\n          theme.root.rounded[rounded ? \"on\" : \"off\"],\n          className,\n        )}\n        {...restProps}\n      >\n        <div className={twMerge(theme.root.inner.base, theme.root.inner.fluid[fluid ? \"on\" : \"off\"])}>{children}</div>\n      </nav>\n    </NavbarContext.Provider>\n  );\n});\n\nNavbar.displayName = \"Navbar\";\n"],"mappings":";;;;;;;;;;;AAYA,MAAEA,MAAM,GAAAC,UAAW,EAAAC,KAAA,EAAAC,GAAkB;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAA,GAAWC,eAAW,CACvB,CAACC,WAAI,EAASJ,QAAA,CAAAE,KAAY,EAAAG,MAAS,EAAEP,KAAM,CAAAI,KAAA,GAC3C,CAACI,GAAG,CAACN,QAAQ,CAACO,UAAU,EAAE,QAAQ,CAAC,EAAET,KAAK,CAACS,UAAU,GACtD,CAAAD,GAAA,CAAAN,QAAA,CAAAQ,UAAA,aAAAV,KAAA,CAAAU,UAAA,CACD;EACF,MAAI;IACAC,MAAA;IACAC,QAAA;IACAC,SAAQ;IACRC,KAAA,GAAQ;IACRC,QAAO;IACPC,OAAG;IACJ,GAAGC;EACJ,IAAAC,YAAe,CAAAlB,KAAA,EAASE,QAAI,CAAAF,KAAS,EAAAO,MAAS;EAC9C,OAAAY,MAAA,EAAAC,SAAuB,IAAGC,QAAA,CAAAN,QAAA;EAC5B,OAAI,eAAcO,GAAQ,CACtBC,aAAA,CAAAC,QAAA,EACJ;IACMC,KAAA;MAAQrB,KAAA,EAAAJ,KAAA,CAAAI,KAAkB;MAAGK,UAAA,EAAAT,KAAA,CAAAS,UAAA;MAAAC,UAAA,EAAAV,KAAA,CAAAU,UAAA;MAAAS,MAAA;MAAAC;IAAA;IACnCR,QAAa,iBAAAU,GAAA,CACL,OACR;MACUrB,GAAA;MACVY,SAAkB,EAAAa,OAAS,CACftB,KAAK,CAACuB,IAAI,CAACC,IAAA,EACXxB,KAAK,CAACuB,IAAI,CAACE,QAAQ,CAAAlB,MAAO,GAAG,IAAI,GAAG,KAAK,CAAC,EAC1CP,KAAA,CAAAuB,IAAA,CAAAX,OAAA,CAAAA,OAAA,kBACDH,SACD;MACA,GAAAI,SAAQ;MAClBL,QAAA,iBAAAU,GAAA;QAAAT,SAAA,EAAAa,OAAA,CAAAtB,KAAA,CAAAuB,IAAA,CAAAG,KAAA,CAAAF,IAAA,EAAAxB,KAAA,CAAAuB,IAAA,CAAAG,KAAA,CAAAhB,KAAA,CAAAA,KAAA;QAAAF;MAAA;IACA,CACA;EACG,CACF;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// src/lib/utils.ts\nimport { clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\nexport const formatDate = dateString => {\n  try {\n    // Handle DD/MM/YYYY format\n    const [day, month, year] = dateString.split('/');\n    const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n    return new Intl.DateTimeFormat('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    }).format(date);\n  } catch {\n    return dateString;\n  }\n};\nexport const truncateText = (text, maxLength) => {\n  if (text.length <= maxLength) return text;\n  return text.slice(0, maxLength).trim() + '...';\n};\nexport const generateSlug = title => {\n  return title.toLowerCase().replace(/[^\\w\\s-]/g, '').replace(/[\\s_-]+/g, '-').replace(/^-+|-+$/g, '');\n};","map":{"version":3,"names":["clsx","twMerge","cn","inputs","formatDate","dateString","day","month","year","split","date","Date","parseInt","Intl","DateTimeFormat","format","truncateText","text","maxLength","length","slice","trim","generateSlug","title","toLowerCase","replace"],"sources":["D:/ATWON/law-app/src/lib/utils.ts"],"sourcesContent":["// src/lib/utils.ts\r\nimport { type ClassValue, clsx } from 'clsx';\r\nimport { twMerge } from 'tailwind-merge';\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}   \r\n\r\nexport const formatDate = (dateString: string): string => {\r\n  try {\r\n    // Handle DD/MM/YYYY format\r\n    const [day, month, year] = dateString.split('/');\r\n    const date = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\r\n    \r\n    return new Intl.DateTimeFormat('en-US', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric'\r\n    }).format(date);\r\n  } catch {\r\n    return dateString;\r\n  }\r\n};\r\n\r\nexport const truncateText = (text: string, maxLength: number): string => {\r\n  if (text.length <= maxLength) return text;\r\n  return text.slice(0, maxLength).trim() + '...';\r\n};\r\n\r\nexport const generateSlug = (title: string): string => {\r\n  return title\r\n    .toLowerCase()\r\n    .replace(/[^\\w\\s-]/g, '')\r\n    .replace(/[\\s_-]+/g, '-')\r\n    .replace(/^-+|-+$/g, '');\r\n};\r\n"],"mappings":"AAAA;AACA,SAA0BA,IAAI,QAAQ,MAAM;AAC5C,SAASC,OAAO,QAAQ,gBAAgB;AAExC,OAAO,SAASC,EAAEA,CAAC,GAAGC,MAAoB,EAAE;EAC1C,OAAOF,OAAO,CAACD,IAAI,CAACG,MAAM,CAAC,CAAC;AAC9B;AAEA,OAAO,MAAMC,UAAU,GAAIC,UAAkB,IAAa;EACxD,IAAI;IACF;IACA,MAAM,CAACC,GAAG,EAAEC,KAAK,EAAEC,IAAI,CAAC,GAAGH,UAAU,CAACI,KAAK,CAAC,GAAG,CAAC;IAChD,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACC,QAAQ,CAACJ,IAAI,CAAC,EAAEI,QAAQ,CAACL,KAAK,CAAC,GAAG,CAAC,EAAEK,QAAQ,CAACN,GAAG,CAAC,CAAC;IAEzE,OAAO,IAAIO,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;MACtCN,IAAI,EAAE,SAAS;MACfD,KAAK,EAAE,MAAM;MACbD,GAAG,EAAE;IACP,CAAC,CAAC,CAACS,MAAM,CAACL,IAAI,CAAC;EACjB,CAAC,CAAC,MAAM;IACN,OAAOL,UAAU;EACnB;AACF,CAAC;AAED,OAAO,MAAMW,YAAY,GAAGA,CAACC,IAAY,EAAEC,SAAiB,KAAa;EACvE,IAAID,IAAI,CAACE,MAAM,IAAID,SAAS,EAAE,OAAOD,IAAI;EACzC,OAAOA,IAAI,CAACG,KAAK,CAAC,CAAC,EAAEF,SAAS,CAAC,CAACG,IAAI,CAAC,CAAC,GAAG,KAAK;AAChD,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,KAAa,IAAa;EACrD,OAAOA,KAAK,CACTC,WAAW,CAAC,CAAC,CACbC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CACxBA,OAAO,CAAC,UAAU,EAAE,GAAG,CAAC,CACxBA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;AAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
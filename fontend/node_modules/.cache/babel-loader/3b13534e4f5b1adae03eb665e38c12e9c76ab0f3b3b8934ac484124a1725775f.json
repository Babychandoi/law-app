{"ast":null,"code":"'use client';\n\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { get } from '../../helpers/get.js';\nimport { resolveProps } from '../../helpers/resolve-props.js';\nimport { useResolveTheme } from '../../helpers/resolve-theme.js';\nimport { twMerge } from '../../helpers/tailwind-merge.js';\nimport { useThemeProvider } from '../../theme/provider.js';\nimport { hrTheme } from './theme.js';\nconst HRText = forwardRef((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme([hrTheme.text, provider.theme?.hr?.text, props.theme], [get(provider.clearTheme, \"hr.text\"), props.clearTheme], [get(provider.applyTheme, \"hr.text\"), props.applyTheme]);\n  const {\n    className,\n    text,\n    ...restProps\n  } = resolveProps(props, provider.props?.hrText);\n  return /* @__PURE__ */jsxs(\"div\", {\n    className: theme.base,\n    children: [/* @__PURE__ */jsx(\"hr\", {\n      ref,\n      className: twMerge(theme.hrLine, className),\n      \"data-testid\": \"flowbite-hr-text\",\n      role: \"separator\",\n      ...restProps\n    }), /* @__PURE__ */jsx(\"span\", {\n      className: theme.text,\n      children: text\n    })]\n  });\n});\nHRText.displayName = \"HRText\";\nexport { HRText };","map":{"version":3,"names":["HRText","forwardRef","props","ref","provider","useThemeProvider","theme","useResolveTheme","hrTheme","text","hr","get","clearTheme","applyTheme","className","restProps","resolveProps","hrText","jsxs","base","children","jsx","twMerge","hrLine","role"],"sources":["D:\\ATWON\\law-app\\node_modules\\flowbite-react\\src\\components\\HR\\HRText.tsx"],"sourcesContent":["\"use client\";\n\nimport type { ComponentProps } from \"react\";\nimport { forwardRef } from \"react\";\nimport { get } from \"../../helpers/get\";\nimport { resolveProps } from \"../../helpers/resolve-props\";\nimport { useResolveTheme } from \"../../helpers/resolve-theme\";\nimport { twMerge } from \"../../helpers/tailwind-merge\";\nimport { useThemeProvider } from \"../../theme/provider\";\nimport type { ThemingProps } from \"../../types\";\nimport { hrTheme } from \"./theme\";\n\nexport interface HRTextTheme {\n  base: string;\n  hrLine: string;\n  text: string;\n}\n\nexport interface HRTextProps extends Omit<ComponentProps<\"hr\">, \"ref\">, ThemingProps<HRTextTheme> {\n  text: string;\n}\n\nexport const HRText = forwardRef<HTMLHRElement, HRTextProps>((props, ref) => {\n  const provider = useThemeProvider();\n  const theme = useResolveTheme(\n    [hrTheme.text, provider.theme?.hr?.text, props.theme],\n    [get(provider.clearTheme, \"hr.text\"), props.clearTheme],\n    [get(provider.applyTheme, \"hr.text\"), props.applyTheme],\n  );\n\n  const { className, text, ...restProps } = resolveProps(props, provider.props?.hrText);\n\n  return (\n    <div className={theme.base}>\n      <hr\n        ref={ref}\n        className={twMerge(theme.hrLine, className)}\n        data-testid=\"flowbite-hr-text\"\n        role=\"separator\"\n        {...restProps}\n      />\n      <span className={theme.text}>{text}</span>\n    </div>\n  );\n});\n\nHRText.displayName = \"HRText\";\n"],"mappings":";;;;;;;;;;AAWA,MAAEA,MAAM,GAAAC,UAAW,EAAAC,KAAA,EAAAC,GAAkB;EACnC,MAAMC,QAAQ,GAAAC,gBAAe;EAC/B,MAAKC,KAAQ,GAAAC,eAAe,CACxB,CAACC,OAAI,CAAAC,IAAQ,EAACL,QAAA,CAAUE,KAAE,EAAAI,EAAA,EAASD,IAAG,EAAAP,KAAM,CAAAI,KAAA,GAC5C,CAACK,GAAG,CAACP,QAAQ,CAACQ,UAAU,EAAE,SAAS,CAAC,EAAEV,KAAK,CAACU,UAAU,GACvD,CAAAD,GAAA,CAAAP,QAAA,CAAAS,UAAA,cAAAX,KAAA,CAAAW,UAAA,CACD;EACA;IAAAC,SAAA;IAAAL,IAAuB;IAAA,GAAKM;EAAS,IAAAC,YAAiB,CAAAd,KAAM,EAAAE,QAAU,CAAAF,KAAA,EAAAe,MAAA;EACxE,sBAAuBC,IAAA;IAAAJ,SAAA,EAAAR,KAAA,CAAAa,IAAA;IAAAC,QAAA,GACvB,eAAUC,GAAA,CACJ,MACN;MACQlB,GAAA;MACAW,SAAA,EAAAQ,OAAe,CAAAhB,KAAA,CAAAiB,MAAA,EAAkBT,SAAA;MACjC,aAAM,oBAAW;MACjBU,IAAG;MACX,GAAAT;IACK,CACL,GACG,eAAGM,GAAA;MAAAP,SAAA,EAAAR,KAAA,CAAAG,IAAA;MAAAW,QAAA,EAAAX;IAAA;EACL;AACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}